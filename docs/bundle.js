(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
module.exports=[
	{
		"name": "ときめきエクスペリエンス！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 106.7,
		"playtime": 100.5,
		"BPM": 180,
		"difficult": "Easy",
		"level": 8,
		"added": "2017/3/16",
		"totalnotes": 130
	},
	{
		"name": "ときめきエクスペリエンス！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 106.7,
		"playtime": 102.2,
		"BPM": 180,
		"difficult": "Normal",
		"level": 13,
		"added": "2017/3/16",
		"totalnotes": 231
	},
	{
		"name": "ときめきエクスペリエンス！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 106.7,
		"playtime": 101.8,
		"BPM": 180,
		"difficult": "Hard",
		"level": 16,
		"added": "2017/3/16",
		"totalnotes": 292
	},
	{
		"name": "ときめきエクスペリエンス！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 106.7,
		"playtime": 102.7,
		"BPM": 180,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/3/16",
		"totalnotes": 508
	},
	{
		"name": "キラキラだとか夢だとか～Sing Girls～",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 112.5,
		"playtime": 106.7,
		"BPM": 180,
		"difficult": "Easy",
		"level": 8,
		"added": "2017/3/16",
		"totalnotes": 152
	},
	{
		"name": "キラキラだとか夢だとか～Sing Girls～",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 112.5,
		"playtime": 107,
		"BPM": 180,
		"difficult": "Normal",
		"level": 14,
		"added": "2017/3/16",
		"totalnotes": 296
	},
	{
		"name": "キラキラだとか夢だとか～Sing Girls～",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 112.5,
		"playtime": 107.2,
		"BPM": 180,
		"difficult": "Hard",
		"level": 17,
		"added": "2017/3/16",
		"totalnotes": 363
	},
	{
		"name": "キラキラだとか夢だとか～Sing Girls～",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 112.5,
		"playtime": 107.4,
		"BPM": 180,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/3/16",
		"totalnotes": 613
	},
	{
		"name": "Yes！BanG_Dream！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 120,
		"playtime": 111.7,
		"BPM": 185,
		"difficult": "Easy",
		"level": 5,
		"added": "2017/3/16",
		"totalnotes": 63
	},
	{
		"name": "Yes！BanG_Dream！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 120,
		"playtime": 111.7,
		"BPM": 185,
		"difficult": "Normal",
		"level": 10,
		"added": "2017/3/16",
		"totalnotes": 153
	},
	{
		"name": "Yes！BanG_Dream！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 120,
		"playtime": 114,
		"BPM": 185,
		"difficult": "Hard",
		"level": 15,
		"added": "2017/3/16",
		"totalnotes": 336
	},
	{
		"name": "Yes！BanG_Dream！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 120,
		"playtime": 114.2,
		"BPM": 185,
		"difficult": "Expert",
		"level": 20,
		"added": "2017/3/16",
		"totalnotes": 459
	},
	{
		"name": "ティアドロップス",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 150.3,
		"playtime": 146.4,
		"BPM": 190,
		"difficult": "Easy",
		"level": 9,
		"added": "2017/3/16",
		"totalnotes": 158
	},
	{
		"name": "ティアドロップス",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 150.3,
		"playtime": 146.4,
		"BPM": 190,
		"difficult": "Normal",
		"level": 13,
		"added": "2017/3/16",
		"totalnotes": 288
	},
	{
		"name": "ティアドロップス",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 150.3,
		"playtime": 146.4,
		"BPM": 190,
		"difficult": "Hard",
		"level": 17,
		"added": "2017/3/16",
		"totalnotes": 450
	},
	{
		"name": "ティアドロップス",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 150.3,
		"playtime": 146.4,
		"BPM": 190,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/3/16",
		"totalnotes": 774
	},
	{
		"name": "ぽっぴん’しゃっふる",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 133.1,
		"playtime": 126.3,
		"BPM": 220,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/3/16",
		"totalnotes": 124
	},
	{
		"name": "ぽっぴん’しゃっふる",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 133.1,
		"playtime": 126.3,
		"BPM": 220,
		"difficult": "Normal",
		"level": 11,
		"added": "2017/3/16",
		"totalnotes": 207
	},
	{
		"name": "ぽっぴん’しゃっふる",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 133.1,
		"playtime": 127.2,
		"BPM": 220,
		"difficult": "Hard",
		"level": 16,
		"added": "2017/3/16",
		"totalnotes": 443
	},
	{
		"name": "ぽっぴん’しゃっふる",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 133.1,
		"playtime": 127.4,
		"BPM": 220,
		"difficult": "Expert",
		"level": 22,
		"added": "2017/3/16",
		"totalnotes": 651
	},
	{
		"name": "STAR BEAT！～ホシノコドウ～",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 109.8,
		"playtime": 124.9,
		"BPM": 195,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/3/16",
		"totalnotes": 106
	},
	{
		"name": "STAR BEAT！～ホシノコドウ～",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 109.8,
		"playtime": 129.2,
		"BPM": 195,
		"difficult": "Normal",
		"level": 14,
		"added": "2017/3/16",
		"totalnotes": 203
	},
	{
		"name": "STAR BEAT！～ホシノコドウ～",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 109.8,
		"playtime": 129.2,
		"BPM": 195,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/3/16",
		"totalnotes": 437
	},
	{
		"name": "STAR BEAT！～ホシノコドウ～",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 109.8,
		"playtime": 129.4,
		"BPM": 195,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/3/16",
		"totalnotes": 642
	},
	{
		"name": "夏空SUN！SUN！SEVEN！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 146.1,
		"playtime": 138.8,
		"BPM": 176,
		"difficult": "Easy",
		"level": 8,
		"added": "2017/3/16",
		"totalnotes": 152
	},
	{
		"name": "夏空SUN！SUN！SEVEN！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 146.1,
		"playtime": 138.8,
		"BPM": 176,
		"difficult": "Normal",
		"level": 12,
		"added": "2017/3/16",
		"totalnotes": 231
	},
	{
		"name": "夏空SUN！SUN！SEVEN！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 146.1,
		"playtime": 139.3,
		"BPM": 176,
		"difficult": "Hard",
		"level": 17,
		"added": "2017/3/16",
		"totalnotes": 521
	},
	{
		"name": "夏空SUN！SUN！SEVEN！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 146.1,
		"playtime": 139.3,
		"BPM": 176,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/3/16",
		"totalnotes": 750
	},
	{
		"name": "走り始めたばかりのキミに",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 118.1,
		"playtime": 110.4,
		"BPM": 125,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/3/16",
		"totalnotes": 89
	},
	{
		"name": "走り始めたばかりのキミに",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 118.1,
		"playtime": 111.1,
		"BPM": 125,
		"difficult": "Normal",
		"level": 12,
		"added": "2017/3/16",
		"totalnotes": 205
	},
	{
		"name": "走り始めたばかりのキミに",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 118.1,
		"playtime": 111.4,
		"BPM": 125,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/3/16",
		"totalnotes": 341
	},
	{
		"name": "走り始めたばかりのキミに",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 118.1,
		"playtime": 110.4,
		"BPM": 125,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/3/16",
		"totalnotes": 531
	},
	{
		"name": "1000回潤んだ空",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 152,
		"playtime": 146.4,
		"BPM": 182,
		"difficult": "Easy",
		"level": 6,
		"added": "2017/3/16",
		"totalnotes": 105
	},
	{
		"name": "1000回潤んだ空",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 152,
		"playtime": 148.8,
		"BPM": 182,
		"difficult": "Normal",
		"level": 12,
		"added": "2017/3/16",
		"totalnotes": 220
	},
	{
		"name": "1000回潤んだ空",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 152,
		"playtime": 148.8,
		"BPM": 182,
		"difficult": "Hard",
		"level": 19,
		"added": "2017/3/16",
		"totalnotes": 459
	},
	{
		"name": "1000回潤んだ空",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 152,
		"playtime": 149,
		"BPM": 182,
		"difficult": "Expert",
		"level": 26,
		"added": "2017/3/16",
		"totalnotes": 868
	},
	{
		"name": "前へススメ！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 135,
		"playtime": 128.6,
		"BPM": 181,
		"difficult": "Easy",
		"level": 6,
		"added": "2017/4/2",
		"totalnotes": 105
	},
	{
		"name": "前へススメ！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 135,
		"playtime": 130.6,
		"BPM": 181,
		"difficult": "Normal",
		"level": 13,
		"added": "2017/4/2",
		"totalnotes": 249
	},
	{
		"name": "前へススメ！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 135,
		"playtime": 130.6,
		"BPM": 181,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/4/2",
		"totalnotes": 471
	},
	{
		"name": "前へススメ！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 135,
		"playtime": 130.6,
		"BPM": 181,
		"difficult": "Expert",
		"level": 26,
		"added": "2017/4/2",
		"totalnotes": 723
	},
	{
		"name": "夢見るSunflower",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 128.8,
		"playtime": 121.5,
		"BPM": 164,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/4/22",
		"totalnotes": 152
	},
	{
		"name": "夢見るSunflower",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 128.8,
		"playtime": 120.7,
		"BPM": 164,
		"difficult": "Normal",
		"level": 13,
		"added": "2017/4/22",
		"totalnotes": 231
	},
	{
		"name": "夢見るSunflower",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 128.8,
		"playtime": 121.5,
		"BPM": 164,
		"difficult": "Hard",
		"level": 17,
		"added": "2017/4/22",
		"totalnotes": 434
	},
	{
		"name": "夢見るSunflower",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 128.8,
		"playtime": 121.5,
		"BPM": 164,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/4/22",
		"totalnotes": 628
	},
	{
		"name": "キミにもらったもの",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 105.1,
		"playtime": 95.9,
		"BPM": 147,
		"difficult": "Easy",
		"level": 6,
		"added": "2017/4/21",
		"totalnotes": 69
	},
	{
		"name": "キミにもらったもの",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 105.1,
		"playtime": 95.9,
		"BPM": 147,
		"difficult": "Normal",
		"level": 13,
		"added": "2017/4/21",
		"totalnotes": 169
	},
	{
		"name": "キミにもらったもの",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 105.1,
		"playtime": 95.9,
		"BPM": 147,
		"difficult": "Hard",
		"level": 16,
		"added": "2017/4/21",
		"totalnotes": 279
	},
	{
		"name": "キミにもらったもの",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 105.1,
		"playtime": 95.9,
		"BPM": 147,
		"difficult": "Expert",
		"level": 21,
		"added": "2017/4/21",
		"totalnotes": 371
	},
	{
		"name": "八月のif",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 115,
		"playtime": 106,
		"BPM": 120,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/8/19",
		"totalnotes": 142
	},
	{
		"name": "八月のif",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 115,
		"playtime": 107.8,
		"BPM": 120,
		"difficult": "Normal",
		"level": 13,
		"added": "2017/8/19",
		"totalnotes": 268
	},
	{
		"name": "八月のif",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 115,
		"playtime": 107.8,
		"BPM": 120,
		"difficult": "Hard",
		"level": 17,
		"added": "2017/8/19",
		"totalnotes": 444
	},
	{
		"name": "八月のif",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 115,
		"playtime": 110,
		"BPM": 120,
		"difficult": "Expert",
		"level": 24,
		"added": "2017/8/19",
		"totalnotes": 609
	},
	{
		"name": "Time Lapse",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 123.8,
		"playtime": 120,
		"BPM": 192,
		"difficult": "Easy",
		"level": 9,
		"added": "2017/9/10",
		"totalnotes": 148
	},
	{
		"name": "Time Lapse",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 123.8,
		"playtime": 120,
		"BPM": 192,
		"difficult": "Normal",
		"level": 15,
		"added": "2017/9/10",
		"totalnotes": 252
	},
	{
		"name": "Time Lapse",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 123.8,
		"playtime": 120,
		"BPM": 192,
		"difficult": "Hard",
		"level": 19,
		"added": "2017/9/10",
		"totalnotes": 563
	},
	{
		"name": "Time Lapse",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 123.8,
		"playtime": 120,
		"BPM": 192,
		"difficult": "Expert",
		"level": 26,
		"added": "2017/9/10",
		"totalnotes": 728
	},
	{
		"name": "クリスマスのうた",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 129.9,
		"playtime": 116.8,
		"BPM": "90-138",
		"difficult": "Easy",
		"level": 8,
		"added": "2017/11/30",
		"totalnotes": 147
	},
	{
		"name": "クリスマスのうた",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 129.9,
		"playtime": 122.1,
		"BPM": "90-138",
		"difficult": "Normal",
		"level": 13,
		"added": "2017/11/30",
		"totalnotes": 239
	},
	{
		"name": "クリスマスのうた",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 129.9,
		"playtime": 122.1,
		"BPM": "90-138",
		"difficult": "Hard",
		"level": 18,
		"added": "2017/11/30",
		"totalnotes": 471
	},
	{
		"name": "クリスマスのうた",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 129.9,
		"playtime": 122.1,
		"BPM": "90-138",
		"difficult": "Expert",
		"level": 25,
		"added": "2017/11/30",
		"totalnotes": 683
	},
	{
		"name": "B.O.F",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 94.6,
		"playtime": 89.8,
		"BPM": 175,
		"difficult": "Easy",
		"level": 6,
		"added": "2017/12/6",
		"totalnotes": 108
	},
	{
		"name": "B.O.F",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 94.6,
		"playtime": 89.8,
		"BPM": 175,
		"difficult": "Normal",
		"level": 12,
		"added": "2017/12/6",
		"totalnotes": 175
	},
	{
		"name": "B.O.F",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 94.6,
		"playtime": 89.8,
		"BPM": 175,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/12/6",
		"totalnotes": 413
	},
	{
		"name": "B.O.F",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 94.6,
		"playtime": 89.8,
		"BPM": 175,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/12/6",
		"totalnotes": 612
	},
	{
		"name": "CiRCLING",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 120,
		"playtime": 114.8,
		"BPM": 160,
		"difficult": "Easy",
		"level": 8,
		"added": "2018/1/10",
		"totalnotes": 170
	},
	{
		"name": "CiRCLING",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 120,
		"playtime": 114.8,
		"BPM": 160,
		"difficult": "Normal",
		"level": 14,
		"added": "2018/1/10",
		"totalnotes": 324
	},
	{
		"name": "CiRCLING",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 120,
		"playtime": 114.8,
		"BPM": 160,
		"difficult": "Hard",
		"level": 18,
		"added": "2018/1/10",
		"totalnotes": 569
	},
	{
		"name": "CiRCLING",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 120,
		"playtime": 114.8,
		"BPM": 160,
		"difficult": "Expert",
		"level": 25,
		"added": "2018/1/10",
		"totalnotes": 823
	},
	{
		"name": "Light Delight",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 122.7,
		"playtime": 114.7,
		"BPM": 180,
		"difficult": "Easy",
		"level": 9,
		"added": "2018/4/21",
		"totalnotes": 159
	},
	{
		"name": "Light Delight",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 122.7,
		"playtime": 115.8,
		"BPM": 180,
		"difficult": "Normal",
		"level": 14,
		"added": "2018/4/21",
		"totalnotes": 286
	},
	{
		"name": "Light Delight",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 122.7,
		"playtime": 115.8,
		"BPM": 180,
		"difficult": "Hard",
		"level": 20,
		"added": "2018/4/21",
		"totalnotes": 491
	},
	{
		"name": "Light Delight",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 122.7,
		"playtime": 115.8,
		"BPM": 180,
		"difficult": "Expert",
		"level": 26,
		"added": "2018/4/21",
		"totalnotes": 750
	},
	{
		"name": "私の心はチョココロネ",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 114.6,
		"playtime": 107.2,
		"BPM": 134,
		"difficult": "Easy",
		"level": 9,
		"added": "2018/4/23",
		"totalnotes": 139
	},
	{
		"name": "私の心はチョココロネ",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 114.6,
		"playtime": 107.2,
		"BPM": 134,
		"difficult": "Normal",
		"level": 13,
		"added": "2018/4/23",
		"totalnotes": 232
	},
	{
		"name": "私の心はチョココロネ",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 114.6,
		"playtime": 107.2,
		"BPM": 134,
		"difficult": "Hard",
		"level": 16,
		"added": "2018/4/23",
		"totalnotes": 381
	},
	{
		"name": "私の心はチョココロネ",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 114.6,
		"playtime": 107.2,
		"BPM": 134,
		"difficult": "Expert",
		"level": 22,
		"added": "2018/4/23",
		"totalnotes": 482
	},
	{
		"name": "二重の虹(ダブル レインボウ)",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 109.2,
		"playtime": 104.7,
		"BPM": 188,
		"difficult": "Easy",
		"level": 9,
		"added": "2018/4/30",
		"totalnotes": 141
	},
	{
		"name": "二重の虹(ダブル レインボウ)",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 109.2,
		"playtime": 104.7,
		"BPM": 188,
		"difficult": "Normal",
		"level": 14,
		"added": "2018/4/30",
		"totalnotes": 276
	},
	{
		"name": "二重の虹(ダブル レインボウ)",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 109.2,
		"playtime": 104.7,
		"BPM": 188,
		"difficult": "Hard",
		"level": 18,
		"added": "2018/4/30",
		"totalnotes": 477
	},
	{
		"name": "二重の虹(ダブル レインボウ)",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 109.2,
		"playtime": 104.7,
		"BPM": 188,
		"difficult": "Expert",
		"level": 25,
		"added": "2018/4/30",
		"totalnotes": 623
	},
	{
		"name": "最高(さあ行こう)！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 114,
		"playtime": 107.8,
		"BPM": 180,
		"difficult": "Easy",
		"level": 10,
		"added": "2018/6/16",
		"totalnotes": 196
	},
	{
		"name": "最高(さあ行こう)！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 114,
		"playtime": 107.8,
		"BPM": 180,
		"difficult": "Normal",
		"level": 14,
		"added": "2018/6/16",
		"totalnotes": 304
	},
	{
		"name": "最高(さあ行こう)！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 114,
		"playtime": 107.8,
		"BPM": 180,
		"difficult": "Hard",
		"level": 20,
		"added": "2018/6/16",
		"totalnotes": 506
	},
	{
		"name": "最高(さあ行こう)！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 114,
		"playtime": 107.8,
		"BPM": 180,
		"difficult": "Expert",
		"level": 26,
		"added": "2018/6/16",
		"totalnotes": 666
	},
	{
		"name": "ガールズコード",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 126.7,
		"playtime": 121.1,
		"BPM": 125,
		"difficult": "Easy",
		"level": 7,
		"added": "2018/8/31",
		"totalnotes": 148
	},
	{
		"name": "ガールズコード",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 126.7,
		"playtime": 121.1,
		"BPM": 125,
		"difficult": "Normal",
		"level": 13,
		"added": "2018/8/31",
		"totalnotes": 255
	},
	{
		"name": "ガールズコード",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 126.7,
		"playtime": 121.1,
		"BPM": 125,
		"difficult": "Hard",
		"level": 17,
		"added": "2018/8/31",
		"totalnotes": 388
	},
	{
		"name": "ガールズコード",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 126.7,
		"playtime": 121.1,
		"BPM": 125,
		"difficult": "Expert",
		"level": 24,
		"added": "2018/8/31",
		"totalnotes": 638
	},
	{
		"name": "Don't be afraid！",
		"band": "Glitter*Green",
		"type": "Original",
		"totaltime": 120.3,
		"playtime": 116,
		"BPM": 180,
		"difficult": "Easy",
		"level": 6,
		"added": "2017/3/25",
		"totalnotes": 75
	},
	{
		"name": "Don't be afraid！",
		"band": "Glitter*Green",
		"type": "Original",
		"totaltime": 120.3,
		"playtime": 116,
		"BPM": 180,
		"difficult": "Normal",
		"level": 12,
		"added": "2017/3/25",
		"totalnotes": 192
	},
	{
		"name": "Don't be afraid！",
		"band": "Glitter*Green",
		"type": "Original",
		"totaltime": 120.3,
		"playtime": 116,
		"BPM": 180,
		"difficult": "Hard",
		"level": 16,
		"added": "2017/3/25",
		"totalnotes": 469
	},
	{
		"name": "Don't be afraid！",
		"band": "Glitter*Green",
		"type": "Original",
		"totaltime": 120.3,
		"playtime": 116,
		"BPM": 180,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/3/25",
		"totalnotes": 661
	},
	{
		"name": "Happy Happy Party！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 124,
		"playtime": 118.3,
		"BPM": 140,
		"difficult": "Easy",
		"level": 6,
		"added": "2017/3/16",
		"totalnotes": 73
	},
	{
		"name": "Happy Happy Party！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 124,
		"playtime": 117.9,
		"BPM": 140,
		"difficult": "Normal",
		"level": 12,
		"added": "2017/3/16",
		"totalnotes": 255
	},
	{
		"name": "Happy Happy Party！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 124,
		"playtime": 117.9,
		"BPM": 140,
		"difficult": "Hard",
		"level": 17,
		"added": "2017/3/16",
		"totalnotes": 425
	},
	{
		"name": "Happy Happy Party！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 124,
		"playtime": 117.9,
		"BPM": 140,
		"difficult": "Expert",
		"level": 23,
		"added": "2017/3/16",
		"totalnotes": 549
	},
	{
		"name": "夏のドーン！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 110.3,
		"playtime": 103.8,
		"BPM": 160,
		"difficult": "Easy",
		"level": 8,
		"added": "2017/8/10",
		"totalnotes": 145
	},
	{
		"name": "夏のドーン！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 110.3,
		"playtime": 103.8,
		"BPM": 160,
		"difficult": "Normal",
		"level": 14,
		"added": "2017/8/10",
		"totalnotes": 273
	},
	{
		"name": "夏のドーン！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 110.3,
		"playtime": 103.8,
		"BPM": 160,
		"difficult": "Hard",
		"level": 17,
		"added": "2017/8/10",
		"totalnotes": 406
	},
	{
		"name": "夏のドーン！",
		"band": "Poppin' Party",
		"type": "Original",
		"totaltime": 110.3,
		"playtime": 103.8,
		"BPM": 160,
		"difficult": "Expert",
		"level": 24,
		"added": "2017/8/10",
		"totalnotes": 594
	},
	{
		"name": "どきどきSING OUT！",
		"band": "戸山香澄キャラクターソング",
		"type": "Original",
		"totaltime": 114.5,
		"playtime": 108.7,
		"BPM": 194,
		"difficult": "Easy",
		"level": 8,
		"added": "2017/6/5",
		"totalnotes": 133
	},
	{
		"name": "どきどきSING OUT！",
		"band": "戸山香澄キャラクターソング",
		"type": "Original",
		"totaltime": 114.5,
		"playtime": 108.7,
		"BPM": 194,
		"difficult": "Normal",
		"level": 14,
		"added": "2017/6/5",
		"totalnotes": 265
	},
	{
		"name": "どきどきSING OUT！",
		"band": "戸山香澄キャラクターソング",
		"type": "Original",
		"totaltime": 114.5,
		"playtime": 109.9,
		"BPM": 194,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/6/5",
		"totalnotes": 498
	},
	{
		"name": "どきどきSING OUT！",
		"band": "戸山香澄キャラクターソング",
		"type": "Original",
		"totaltime": 114.5,
		"playtime": 109.9,
		"BPM": 194,
		"difficult": "Expert",
		"level": 24,
		"added": "2017/6/5",
		"totalnotes": 605
	},
	{
		"name": "花園電気ギター！！！",
		"band": "花園たえキャラクターソング",
		"type": "Original",
		"totaltime": 106,
		"playtime": 100.9,
		"BPM": 188,
		"difficult": "Easy",
		"level": 10,
		"added": "2017/7/19",
		"totalnotes": 142
	},
	{
		"name": "花園電気ギター！！！",
		"band": "花園たえキャラクターソング",
		"type": "Original",
		"totaltime": 106,
		"playtime": 100.9,
		"BPM": 188,
		"difficult": "Normal",
		"level": 14,
		"added": "2017/7/19",
		"totalnotes": 250
	},
	{
		"name": "花園電気ギター！！！",
		"band": "花園たえキャラクターソング",
		"type": "Original",
		"totaltime": 106,
		"playtime": 101.2,
		"BPM": 188,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/7/19",
		"totalnotes": 463
	},
	{
		"name": "花園電気ギター！！！",
		"band": "花園たえキャラクターソング",
		"type": "Original",
		"totaltime": 106,
		"playtime": 101.6,
		"BPM": 188,
		"difficult": "Expert",
		"level": 26,
		"added": "2017/7/19",
		"totalnotes": 718
	},
	{
		"name": "チョコレイトの低音レシピ",
		"band": "牛込りみキャラクターソング",
		"type": "Original",
		"totaltime": 120,
		"playtime": 112.3,
		"BPM": 96,
		"difficult": "Easy",
		"level": 6,
		"added": "2017/7/28",
		"totalnotes": 114
	},
	{
		"name": "チョコレイトの低音レシピ",
		"band": "牛込りみキャラクターソング",
		"type": "Original",
		"totaltime": 120,
		"playtime": 112.8,
		"BPM": 96,
		"difficult": "Normal",
		"level": 13,
		"added": "2017/7/28",
		"totalnotes": 239
	},
	{
		"name": "チョコレイトの低音レシピ",
		"band": "牛込りみキャラクターソング",
		"type": "Original",
		"totaltime": 120,
		"playtime": 113.8,
		"BPM": 96,
		"difficult": "Hard",
		"level": 17,
		"added": "2017/7/28",
		"totalnotes": 505
	},
	{
		"name": "チョコレイトの低音レシピ",
		"band": "牛込りみキャラクターソング",
		"type": "Original",
		"totaltime": 120,
		"playtime": 113.8,
		"BPM": 96,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/7/28",
		"totalnotes": 670
	},
	{
		"name": "遠い音楽 ～ハートビート～",
		"band": "山吹沙綾キャラクターソング",
		"type": "Original",
		"totaltime": 112.1,
		"playtime": 101.4,
		"BPM": 168,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/10/4",
		"totalnotes": 116
	},
	{
		"name": "遠い音楽 ～ハートビート～",
		"band": "山吹沙綾キャラクターソング",
		"type": "Original",
		"totaltime": 112.1,
		"playtime": 105.9,
		"BPM": 168,
		"difficult": "Normal",
		"level": 13,
		"added": "2017/10/4",
		"totalnotes": 272
	},
	{
		"name": "遠い音楽 ～ハートビート～",
		"band": "山吹沙綾キャラクターソング",
		"type": "Original",
		"totaltime": 112.1,
		"playtime": 107.3,
		"BPM": 168,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/10/4",
		"totalnotes": 507
	},
	{
		"name": "遠い音楽 ～ハートビート～",
		"band": "山吹沙綾キャラクターソング",
		"type": "Original",
		"totaltime": 112.1,
		"playtime": 107.3,
		"BPM": 168,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/10/4",
		"totalnotes": 687
	},
	{
		"name": "す、好きなんかじゃない！",
		"band": "市ヶ谷有咲キャラクターソング",
		"type": "Original",
		"totaltime": 97.6,
		"playtime": 92.8,
		"BPM": 166,
		"difficult": "Easy",
		"level": 8,
		"added": "2017/11/6",
		"totalnotes": 133
	},
	{
		"name": "す、好きなんかじゃない！",
		"band": "市ヶ谷有咲キャラクターソング",
		"type": "Original",
		"totaltime": 97.6,
		"playtime": 92.8,
		"BPM": 166,
		"difficult": "Normal",
		"level": 13,
		"added": "2017/11/6",
		"totalnotes": 202
	},
	{
		"name": "す、好きなんかじゃない！",
		"band": "市ヶ谷有咲キャラクターソング",
		"type": "Original",
		"totaltime": 97.6,
		"playtime": 92.8,
		"BPM": 166,
		"difficult": "Hard",
		"level": 17,
		"added": "2017/11/6",
		"totalnotes": 397
	},
	{
		"name": "す、好きなんかじゃない！",
		"band": "市ヶ谷有咲キャラクターソング",
		"type": "Original",
		"totaltime": 97.6,
		"playtime": 92.8,
		"BPM": 166,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/11/6",
		"totalnotes": 606
	},
	{
		"name": "That Is How I Roll",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 103,
		"playtime": 98.7,
		"BPM": 180,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/3/16",
		"totalnotes": 99
	},
	{
		"name": "That Is How I Roll",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 103,
		"playtime": 98.7,
		"BPM": 180,
		"difficult": "Normal",
		"level": 13,
		"added": "2017/3/16",
		"totalnotes": 224
	},
	{
		"name": "That Is How I Roll",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 103,
		"playtime": 98.3,
		"BPM": 180,
		"difficult": "Hard",
		"level": 16,
		"added": "2017/3/16",
		"totalnotes": 315
	},
	{
		"name": "That Is How I Roll",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 103,
		"playtime": 98.8,
		"BPM": 180,
		"difficult": "Expert",
		"level": 24,
		"added": "2017/3/16",
		"totalnotes": 547
	},
	{
		"name": "True color",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 123,
		"playtime": 107.8,
		"BPM": 160,
		"difficult": "Easy",
		"level": 6,
		"added": "2017/3/16",
		"totalnotes": 112
	},
	{
		"name": "True color",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 123,
		"playtime": 107.8,
		"BPM": 160,
		"difficult": "Normal",
		"level": 13,
		"added": "2017/3/16",
		"totalnotes": 240
	},
	{
		"name": "True color",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 123,
		"playtime": 111.2,
		"BPM": 160,
		"difficult": "Hard",
		"level": 16,
		"added": "2017/3/16",
		"totalnotes": 370
	},
	{
		"name": "True color",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 123,
		"playtime": 111.3,
		"BPM": 160,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/3/16",
		"totalnotes": 574
	},
	{
		"name": "Scarlet Sky",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 107.3,
		"playtime": 103.8,
		"BPM": 180,
		"difficult": "Easy",
		"level": 6,
		"added": "2017/5/11",
		"totalnotes": 77
	},
	{
		"name": "Scarlet Sky",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 107.3,
		"playtime": 103.8,
		"BPM": 180,
		"difficult": "Normal",
		"level": 12,
		"added": "2017/5/11",
		"totalnotes": 160
	},
	{
		"name": "Scarlet Sky",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 107.3,
		"playtime": 103.8,
		"BPM": 180,
		"difficult": "Hard",
		"level": 17,
		"added": "2017/5/11",
		"totalnotes": 433
	},
	{
		"name": "Scarlet Sky",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 107.3,
		"playtime": 103.8,
		"BPM": 180,
		"difficult": "Expert",
		"level": 26,
		"added": "2017/5/11",
		"totalnotes": 695
	},
	{
		"name": "Hey-day狂騒曲(カプリチオ)",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 110.9,
		"playtime": 105.2,
		"BPM": 158,
		"difficult": "Easy",
		"level": 10,
		"added": "2017/8/21",
		"totalnotes": 184
	},
	{
		"name": "Hey-day狂騒曲(カプリチオ)",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 110.9,
		"playtime": 105.2,
		"BPM": 158,
		"difficult": "Normal",
		"level": 15,
		"added": "2017/8/21",
		"totalnotes": 314
	},
	{
		"name": "Hey-day狂騒曲(カプリチオ)",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 110.9,
		"playtime": 105.2,
		"BPM": 158,
		"difficult": "Hard",
		"level": 20,
		"added": "2017/8/21",
		"totalnotes": 542
	},
	{
		"name": "Hey-day狂騒曲(カプリチオ)",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 110.9,
		"playtime": 105.2,
		"BPM": 158,
		"difficult": "Expert",
		"level": 28,
		"added": "2017/8/21",
		"totalnotes": 878
	},
	{
		"name": "Y.O.L.O!!!!!",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 115.3,
		"playtime": 106.8,
		"BPM": "128-210",
		"difficult": "Easy",
		"level": 8,
		"added": "2017/12/9",
		"totalnotes": 162
	},
	{
		"name": "Y.O.L.O!!!!!",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 115.3,
		"playtime": 108.1,
		"BPM": "128-210",
		"difficult": "Normal",
		"level": 14,
		"added": "2017/12/9",
		"totalnotes": 298
	},
	{
		"name": "Y.O.L.O!!!!!",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 115.3,
		"playtime": 108.1,
		"BPM": "128-210",
		"difficult": "Hard",
		"level": 19,
		"added": "2017/12/9",
		"totalnotes": 530
	},
	{
		"name": "Y.O.L.O!!!!!",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 115.3,
		"playtime": 108.1,
		"BPM": "128-210",
		"difficult": "Expert",
		"level": 26,
		"added": "2017/12/9",
		"totalnotes": 768
	},
	{
		"name": "Jamboree!Journey!",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 119.3,
		"playtime": 110.6,
		"BPM": 156,
		"difficult": "Easy",
		"level": 7,
		"added": "2018/3/21",
		"totalnotes": 121
	},
	{
		"name": "Jamboree!Journey!",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 119.3,
		"playtime": 112.1,
		"BPM": 156,
		"difficult": "Normal",
		"level": 13,
		"added": "2018/3/21",
		"totalnotes": 248
	},
	{
		"name": "Jamboree!Journey!",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 119.3,
		"playtime": 113.7,
		"BPM": 156,
		"difficult": "Hard",
		"level": 18,
		"added": "2018/3/21",
		"totalnotes": 461
	},
	{
		"name": "Jamboree!Journey!",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 119.3,
		"playtime": 113.7,
		"BPM": 156,
		"difficult": "Expert",
		"level": 25,
		"added": "2018/3/21",
		"totalnotes": 641
	},
	{
		"name": "COMIC PANIC!!!",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 110.3,
		"playtime": 104.6,
		"BPM": 210,
		"difficult": "Easy",
		"level": 11,
		"added": "2018/8/3",
		"totalnotes": 215
	},
	{
		"name": "COMIC PANIC!!!",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 110.3,
		"playtime": 104.6,
		"BPM": 210,
		"difficult": "Normal",
		"level": 15,
		"added": "2018/8/3",
		"totalnotes": 346
	},
	{
		"name": "COMIC PANIC!!!",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 110.3,
		"playtime": 105.7,
		"BPM": 210,
		"difficult": "Hard",
		"level": 19,
		"added": "2018/8/3",
		"totalnotes": 523
	},
	{
		"name": "COMIC PANIC!!!",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 110.3,
		"playtime": 105.7,
		"BPM": 210,
		"difficult": "Expert",
		"level": 26,
		"added": "2018/8/3",
		"totalnotes": 729
	},
	{
		"name": "ツナグ、ソラモヨウ",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 106.3,
		"playtime": 101.3,
		"BPM": 192,
		"difficult": "Easy",
		"level": 9,
		"added": "2018/9/10",
		"totalnotes": 170
	},
	{
		"name": "ツナグ、ソラモヨウ",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 106.3,
		"playtime": 101.3,
		"BPM": 192,
		"difficult": "Normal",
		"level": 14,
		"added": "2018/9/10",
		"totalnotes": 275
	},
	{
		"name": "ツナグ、ソラモヨウ",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 106.3,
		"playtime": 101.3,
		"BPM": 192,
		"difficult": "Hard",
		"level": 18,
		"added": "2018/9/10",
		"totalnotes": 432
	},
	{
		"name": "ツナグ、ソラモヨウ",
		"band": "Afterglow",
		"type": "Original",
		"totaltime": 106.3,
		"playtime": 101.3,
		"BPM": 192,
		"difficult": "Expert",
		"level": 26,
		"added": "2018/9/10",
		"totalnotes": 646
	},
	{
		"name": "しゅわりん☆どり～みん",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 104.3,
		"playtime": 96.6,
		"BPM": 176,
		"difficult": "Easy",
		"level": 6,
		"added": "2017/3/16",
		"totalnotes": 79
	},
	{
		"name": "しゅわりん☆どり～みん",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 104.3,
		"playtime": 96.6,
		"BPM": 176,
		"difficult": "Normal",
		"level": 12,
		"added": "2017/3/16",
		"totalnotes": 192
	},
	{
		"name": "しゅわりん☆どり～みん",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 104.3,
		"playtime": 96.8,
		"BPM": 176,
		"difficult": "Hard",
		"level": 17,
		"added": "2017/3/16",
		"totalnotes": 348
	},
	{
		"name": "しゅわりん☆どり～みん",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 104.3,
		"playtime": 96.8,
		"BPM": 176,
		"difficult": "Expert",
		"level": 24,
		"added": "2017/3/16",
		"totalnotes": 520
	},
	{
		"name": "パスパレボリューションず☆",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 105,
		"playtime": 95,
		"BPM": 174,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/3/16",
		"totalnotes": 109
	},
	{
		"name": "パスパレボリューションず☆",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 105,
		"playtime": 97.9,
		"BPM": 174,
		"difficult": "Normal",
		"level": 12,
		"added": "2017/3/16",
		"totalnotes": 216
	},
	{
		"name": "パスパレボリューションず☆",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 105,
		"playtime": 97.9,
		"BPM": 174,
		"difficult": "Hard",
		"level": 17,
		"added": "2017/3/16",
		"totalnotes": 338
	},
	{
		"name": "パスパレボリューションず☆",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 105,
		"playtime": 97.9,
		"BPM": 174,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/3/16",
		"totalnotes": 511
	},
	{
		"name": "はなまる◎アンダンテ",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 108.4,
		"playtime": 99.8,
		"BPM": 166,
		"difficult": "Easy",
		"level": 8,
		"added": "2017/5/31",
		"totalnotes": 174
	},
	{
		"name": "はなまる◎アンダンテ",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 108.4,
		"playtime": 99.8,
		"BPM": 166,
		"difficult": "Normal",
		"level": 14,
		"added": "2017/5/31",
		"totalnotes": 246
	},
	{
		"name": "はなまる◎アンダンテ",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 108.4,
		"playtime": 99.9,
		"BPM": 166,
		"difficult": "Hard",
		"level": 17,
		"added": "2017/5/31",
		"totalnotes": 363
	},
	{
		"name": "はなまる◎アンダンテ",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 108.4,
		"playtime": 100.4,
		"BPM": 166,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/5/31",
		"totalnotes": 607
	},
	{
		"name": "ゆら・ゆらRing-Dong-Dance",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 105.4,
		"playtime": 100.5,
		"BPM": 172,
		"difficult": "Easy",
		"level": 9,
		"added": "2017/7/24",
		"totalnotes": 137
	},
	{
		"name": "ゆら・ゆらRing-Dong-Dance",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 105.4,
		"playtime": 100.5,
		"BPM": 172,
		"difficult": "Normal",
		"level": 14,
		"added": "2017/7/24",
		"totalnotes": 260
	},
	{
		"name": "ゆら・ゆらRing-Dong-Dance",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 105.4,
		"playtime": 101.2,
		"BPM": 172,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/7/24",
		"totalnotes": 389
	},
	{
		"name": "ゆら・ゆらRing-Dong-Dance",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 105.4,
		"playtime": 101.2,
		"BPM": 172,
		"difficult": "Expert",
		"level": 24,
		"added": "2017/7/24",
		"totalnotes": 546
	},
	{
		"name": "SURVIVOR ねばーぎぶあっぷ！",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 108.5,
		"playtime": 104,
		"BPM": "195-200",
		"difficult": "Easy",
		"level": 10,
		"added": "2017/9/21",
		"totalnotes": 220
	},
	{
		"name": "SURVIVOR ねばーぎぶあっぷ！",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 108.5,
		"playtime": 104,
		"BPM": "195-200",
		"difficult": "Normal",
		"level": 15,
		"added": "2017/9/21",
		"totalnotes": 343
	},
	{
		"name": "SURVIVOR ねばーぎぶあっぷ！",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 108.5,
		"playtime": 104,
		"BPM": "195-200",
		"difficult": "Hard",
		"level": 20,
		"added": "2017/9/21",
		"totalnotes": 559
	},
	{
		"name": "SURVIVOR ねばーぎぶあっぷ！",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 108.5,
		"playtime": 104.5,
		"BPM": "195-200",
		"difficult": "Expert",
		"level": 26,
		"added": "2017/9/21",
		"totalnotes": 868
	},
	{
		"name": "Wonderland Girl",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 115.6,
		"playtime": 109.5,
		"BPM": 137,
		"difficult": "Easy",
		"level": 8,
		"added": "2018/2/19",
		"totalnotes": 168
	},
	{
		"name": "Wonderland Girl",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 115.6,
		"playtime": 109.9,
		"BPM": 137,
		"difficult": "Normal",
		"level": 14,
		"added": "2018/2/19",
		"totalnotes": 365
	},
	{
		"name": "Wonderland Girl",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 115.6,
		"playtime": 109.7,
		"BPM": 137,
		"difficult": "Hard",
		"level": 18,
		"added": "2018/2/19",
		"totalnotes": 461
	},
	{
		"name": "Wonderland Girl",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 115.6,
		"playtime": 110.1,
		"BPM": 137,
		"difficult": "Expert",
		"level": 25,
		"added": "2018/2/19",
		"totalnotes": 625
	},
	{
		"name": "天下トーイツ A to Z☆",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 91,
		"playtime": 86.2,
		"BPM": 153,
		"difficult": "Easy",
		"level": 8,
		"added": "2018/4/10",
		"totalnotes": 173
	},
	{
		"name": "天下トーイツ A to Z☆",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 91,
		"playtime": 86.2,
		"BPM": 153,
		"difficult": "Normal",
		"level": 13,
		"added": "2018/4/10",
		"totalnotes": 247
	},
	{
		"name": "天下トーイツ A to Z☆",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 91,
		"playtime": 86.2,
		"BPM": 153,
		"difficult": "Hard",
		"level": 20,
		"added": "2018/4/10",
		"totalnotes": 503
	},
	{
		"name": "天下トーイツ A to Z☆",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 91,
		"playtime": 86.2,
		"BPM": 153,
		"difficult": "Expert",
		"level": 26,
		"added": "2018/4/10",
		"totalnotes": 713
	},
	{
		"name": "もういちど ルミナス",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 115.8,
		"playtime": 109,
		"BPM": 169,
		"difficult": "Easy",
		"level": 6,
		"added": "2018/6/20",
		"totalnotes": 86
	},
	{
		"name": "もういちど ルミナス",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 115.8,
		"playtime": 109,
		"BPM": 169,
		"difficult": "Normal",
		"level": 12,
		"added": "2018/6/20",
		"totalnotes": 168
	},
	{
		"name": "もういちど ルミナス",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 115.8,
		"playtime": 109.9,
		"BPM": 169,
		"difficult": "Hard",
		"level": 17,
		"added": "2018/6/20",
		"totalnotes": 439
	},
	{
		"name": "もういちど ルミナス",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 115.8,
		"playtime": 110.6,
		"BPM": 169,
		"difficult": "Expert",
		"level": 25,
		"added": "2018/6/20",
		"totalnotes": 660
	},
	{
		"name": "ゼッタイ宣言～Recital～",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 109.2,
		"playtime": 103.7,
		"BPM": 177,
		"difficult": "Easy",
		"level": 10,
		"added": "2018/9/30",
		"totalnotes": 185
	},
	{
		"name": "ゼッタイ宣言～Recital～",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 109.2,
		"playtime": 103.7,
		"BPM": 177,
		"difficult": "Normal",
		"level": 14,
		"added": "2018/9/30",
		"totalnotes": 279
	},
	{
		"name": "ゼッタイ宣言～Recital～",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 109.2,
		"playtime": 103.7,
		"BPM": 177,
		"difficult": "Hard",
		"level": 20,
		"added": "2018/9/30",
		"totalnotes": 572
	},
	{
		"name": "ゼッタイ宣言～Recital～",
		"band": "Pastel*Palettes",
		"type": "Original",
		"totaltime": 109.2,
		"playtime": 103.7,
		"BPM": 177,
		"difficult": "Expert",
		"level": 27,
		"added": "1900/01/00",
		"totalnotes": 921
	},
	{
		"name": "BLACK SHOUT",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 110,
		"playtime": 105.7,
		"BPM": 185,
		"difficult": "Easy",
		"level": 6,
		"added": "2017/3/16",
		"totalnotes": 81
	},
	{
		"name": "BLACK SHOUT",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 110,
		"playtime": 105.7,
		"BPM": 185,
		"difficult": "Normal",
		"level": 13,
		"added": "2017/3/16",
		"totalnotes": 214
	},
	{
		"name": "BLACK SHOUT",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 110,
		"playtime": 105.7,
		"BPM": 185,
		"difficult": "Hard",
		"level": 16,
		"added": "2017/3/16",
		"totalnotes": 309
	},
	{
		"name": "BLACK SHOUT",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 110,
		"playtime": 105.7,
		"BPM": 185,
		"difficult": "Expert",
		"level": 25,
		"added": "2018/8/10",
		"totalnotes": 506
	},
	{
		"name": "BLACK SHOUT",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 110,
		"playtime": 105.7,
		"BPM": 185,
		"difficult": "Special",
		"level": 26,
		"added": "2017/3/16",
		"totalnotes": 575
	},
	{
		"name": "Re:birth day",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 124.2,
		"playtime": 118.2,
		"BPM": 170,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/3/16",
		"totalnotes": 101
	},
	{
		"name": "Re:birth day",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 124.2,
		"playtime": 117.9,
		"BPM": 170,
		"difficult": "Normal",
		"level": 11,
		"added": "2017/3/16",
		"totalnotes": 177
	},
	{
		"name": "Re:birth day",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 124.2,
		"playtime": 120,
		"BPM": 170,
		"difficult": "Hard",
		"level": 19,
		"added": "2017/3/16",
		"totalnotes": 514
	},
	{
		"name": "Re:birth day",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 124.2,
		"playtime": 120,
		"BPM": 170,
		"difficult": "Expert",
		"level": 28,
		"added": "2017/3/16",
		"totalnotes": 848
	},
	{
		"name": "LOUDER",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 109.8,
		"playtime": 103.4,
		"BPM": 195,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/4/5",
		"totalnotes": 67
	},
	{
		"name": "LOUDER",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 109.8,
		"playtime": 103.4,
		"BPM": 195,
		"difficult": "Normal",
		"level": 12,
		"added": "2017/4/5",
		"totalnotes": 180
	},
	{
		"name": "LOUDER",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 109.8,
		"playtime": 103.5,
		"BPM": 195,
		"difficult": "Hard",
		"level": 19,
		"added": "2017/4/5",
		"totalnotes": 543
	},
	{
		"name": "LOUDER",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 109.8,
		"playtime": 103.5,
		"BPM": 195,
		"difficult": "Expert",
		"level": 27,
		"added": "2017/4/5",
		"totalnotes": 828
	},
	{
		"name": "陽だまりロードナイト",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 119.2,
		"playtime": 114.1,
		"BPM": 143,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/6/21",
		"totalnotes": 99
	},
	{
		"name": "陽だまりロードナイト",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 119.2,
		"playtime": 114.1,
		"BPM": 143,
		"difficult": "Normal",
		"level": 11,
		"added": "2017/6/21",
		"totalnotes": 188
	},
	{
		"name": "陽だまりロードナイト",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 119.2,
		"playtime": 114.1,
		"BPM": 143,
		"difficult": "Hard",
		"level": 17,
		"added": "2017/6/21",
		"totalnotes": 413
	},
	{
		"name": "陽だまりロードナイト",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 119.2,
		"playtime": 114.1,
		"BPM": 143,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/6/21",
		"totalnotes": 659
	},
	{
		"name": "熱色スターマイン",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 118.7,
		"playtime": 114.1,
		"BPM": 187,
		"difficult": "Easy",
		"level": 10,
		"added": "2017/8/25",
		"totalnotes": 157
	},
	{
		"name": "熱色スターマイン",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 118.7,
		"playtime": 114.1,
		"BPM": 187,
		"difficult": "Normal",
		"level": 14,
		"added": "2017/8/25",
		"totalnotes": 262
	},
	{
		"name": "熱色スターマイン",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 118.7,
		"playtime": 114.1,
		"BPM": 187,
		"difficult": "Hard",
		"level": 20,
		"added": "2017/8/25",
		"totalnotes": 529
	},
	{
		"name": "熱色スターマイン",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 118.7,
		"playtime": 114.1,
		"BPM": 187,
		"difficult": "Expert",
		"level": 26,
		"added": "2017/8/25",
		"totalnotes": 691
	},
	{
		"name": "-HEROIC ADVENT-",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 103.5,
		"playtime": 99,
		"BPM": 182,
		"difficult": "Easy",
		"level": 9,
		"added": "2017/10/8",
		"totalnotes": 156
	},
	{
		"name": "-HEROIC ADVENT-",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 103.5,
		"playtime": 99,
		"BPM": 182,
		"difficult": "Normal",
		"level": 14,
		"added": "2017/10/8",
		"totalnotes": 257
	},
	{
		"name": "-HEROIC ADVENT-",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 103.5,
		"playtime": 99,
		"BPM": 182,
		"difficult": "Hard",
		"level": 19,
		"added": "2017/10/8",
		"totalnotes": 509
	},
	{
		"name": "-HEROIC ADVENT-",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 103.5,
		"playtime": 99,
		"BPM": 182,
		"difficult": "Expert",
		"level": 26,
		"added": "2017/10/8",
		"totalnotes": 730
	},
	{
		"name": "Determination Symphony",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 130.8,
		"playtime": 125.7,
		"BPM": 190,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/10/11",
		"totalnotes": 140
	},
	{
		"name": "Determination Symphony",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 130.8,
		"playtime": 126,
		"BPM": 190,
		"difficult": "Normal",
		"level": 13,
		"added": "2017/10/11",
		"totalnotes": 264
	},
	{
		"name": "Determination Symphony",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 130.8,
		"playtime": 126.2,
		"BPM": 190,
		"difficult": "Hard",
		"level": 21,
		"added": "2017/10/11",
		"totalnotes": 630
	},
	{
		"name": "Determination Symphony",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 130.8,
		"playtime": 126.2,
		"BPM": 190,
		"difficult": "Expert",
		"level": 27,
		"added": "2017/10/11",
		"totalnotes": 1054
	},
	{
		"name": "ONENESS",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 122.3,
		"playtime": 114.9,
		"BPM": "100-190",
		"difficult": "Easy",
		"level": 8,
		"added": "2018/1/13",
		"totalnotes": 165
	},
	{
		"name": "ONENESS",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 122.3,
		"playtime": 114.9,
		"BPM": "100-190",
		"difficult": "Normal",
		"level": 13,
		"added": "2018/1/13",
		"totalnotes": 262
	},
	{
		"name": "ONENESS",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 122.3,
		"playtime": 114.9,
		"BPM": "100-190",
		"difficult": "Hard",
		"level": 18,
		"added": "2018/1/13",
		"totalnotes": 445
	},
	{
		"name": "ONENESS",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 122.3,
		"playtime": 114.9,
		"BPM": "100-190",
		"difficult": "Expert",
		"level": 27,
		"added": "2018/1/13",
		"totalnotes": 746
	},
	{
		"name": "Opera of the wasteland",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 112.9,
		"playtime": 105.6,
		"BPM": 135,
		"difficult": "Easy",
		"level": 8,
		"added": "2018/1/22",
		"totalnotes": 155
	},
	{
		"name": "Opera of the wasteland",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 112.9,
		"playtime": 105.6,
		"BPM": 135,
		"difficult": "Normal",
		"level": 14,
		"added": "2018/1/22",
		"totalnotes": 281
	},
	{
		"name": "Opera of the wasteland",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 112.9,
		"playtime": 105.7,
		"BPM": 135,
		"difficult": "Hard",
		"level": 20,
		"added": "2018/1/22",
		"totalnotes": 483
	},
	{
		"name": "Opera of the wasteland",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 112.9,
		"playtime": 105.7,
		"BPM": 135,
		"difficult": "Expert",
		"level": 28,
		"added": "2018/1/22",
		"totalnotes": 696
	},
	{
		"name": "軌跡",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 135.6,
		"playtime": 126.7,
		"BPM": 85,
		"difficult": "Easy",
		"level": 6,
		"added": "2018/3/31",
		"totalnotes": 94
	},
	{
		"name": "軌跡",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 135.6,
		"playtime": 126.7,
		"BPM": 85,
		"difficult": "Normal",
		"level": 11,
		"added": "2018/3/31",
		"totalnotes": 169
	},
	{
		"name": "軌跡",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 135.6,
		"playtime": 126.7,
		"BPM": 85,
		"difficult": "Hard",
		"level": 16,
		"added": "2018/3/31",
		"totalnotes": 333
	},
	{
		"name": "軌跡",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 135.6,
		"playtime": 126.7,
		"BPM": 85,
		"difficult": "Expert",
		"level": 21,
		"added": "2018/3/31",
		"totalnotes": 449
	},
	{
		"name": "Neo-Aspect",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 116.7,
		"playtime": 111.7,
		"BPM": 180,
		"difficult": "Easy",
		"level": 9,
		"added": "2018/5/21",
		"totalnotes": 172
	},
	{
		"name": "Neo-Aspect",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 116.7,
		"playtime": 111.7,
		"BPM": 180,
		"difficult": "Normal",
		"level": 14,
		"added": "2018/5/21",
		"totalnotes": 287
	},
	{
		"name": "Neo-Aspect",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 116.7,
		"playtime": 111,
		"BPM": 180,
		"difficult": "Hard",
		"level": 19,
		"added": "2018/5/21",
		"totalnotes": 489
	},
	{
		"name": "Neo-Aspect",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 116.7,
		"playtime": 111.7,
		"BPM": 180,
		"difficult": "Expert",
		"level": 26,
		"added": "2018/5/21",
		"totalnotes": 707
	},
	{
		"name": "Legendary",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 110.8,
		"playtime": 104.9,
		"BPM": 144,
		"difficult": "Easy",
		"level": 8,
		"added": "2018/5/26",
		"totalnotes": 158
	},
	{
		"name": "Legendary",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 110.8,
		"playtime": 104.9,
		"BPM": 144,
		"difficult": "Normal",
		"level": 13,
		"added": "2018/5/26",
		"totalnotes": 252
	},
	{
		"name": "Legendary",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 110.8,
		"playtime": 104.9,
		"BPM": 144,
		"difficult": "Hard",
		"level": 18,
		"added": "2018/5/26",
		"totalnotes": 439
	},
	{
		"name": "Legendary",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 110.8,
		"playtime": 105.1,
		"BPM": 144,
		"difficult": "Expert",
		"level": 25,
		"added": "2018/5/26",
		"totalnotes": 638
	},
	{
		"name": "Sanctuary",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 126,
		"playtime": 121,
		"BPM": 182,
		"difficult": "Easy",
		"level": 9,
		"added": "2018/8/20",
		"totalnotes": 213
	},
	{
		"name": "Sanctuary",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 126,
		"playtime": 121,
		"BPM": 182,
		"difficult": "Normal",
		"level": 14,
		"added": "2018/8/20",
		"totalnotes": 303
	},
	{
		"name": "Sanctuary",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 126,
		"playtime": 121,
		"BPM": 182,
		"difficult": "Hard",
		"level": 18,
		"added": "2018/8/20",
		"totalnotes": 494
	},
	{
		"name": "Sanctuary",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 126,
		"playtime": 121.2,
		"BPM": 182,
		"difficult": "Expert",
		"level": 25,
		"added": "2018/8/20",
		"totalnotes": 768
	},
	{
		"name": "R",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 111.1,
		"playtime": 105.3,
		"BPM": 188,
		"difficult": "Easy",
		"level": 8,
		"added": "2018/10/5",
		"totalnotes": 127
	},
	{
		"name": "R",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 111.1,
		"playtime": 105.6,
		"BPM": 188,
		"difficult": "Normal",
		"level": 13,
		"added": "2018/10/5",
		"totalnotes": 230
	},
	{
		"name": "R",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 111.1,
		"playtime": 105.8,
		"BPM": 188,
		"difficult": "Hard",
		"level": 19,
		"added": "2018/10/5",
		"totalnotes": 537
	},
	{
		"name": "R",
		"band": "Roselia",
		"type": "Original",
		"totaltime": 111.1,
		"playtime": 105.8,
		"BPM": 188,
		"difficult": "Expert",
		"level": 26,
		"added": "2018/10/5",
		"totalnotes": 811
	},
	{
		"name": "えがおのオーケストラっ！",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 104,
		"playtime": 95.7,
		"BPM": 138,
		"difficult": "Easy",
		"level": 6,
		"added": "2017/3/16",
		"totalnotes": 101
	},
	{
		"name": "えがおのオーケストラっ！",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 104,
		"playtime": 95.7,
		"BPM": 138,
		"difficult": "Normal",
		"level": 11,
		"added": "2017/3/16",
		"totalnotes": 206
	},
	{
		"name": "えがおのオーケストラっ！",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 104,
		"playtime": 95.7,
		"BPM": 138,
		"difficult": "Hard",
		"level": 16,
		"added": "2017/3/16",
		"totalnotes": 313
	},
	{
		"name": "えがおのオーケストラっ！",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 104,
		"playtime": 95.7,
		"BPM": 138,
		"difficult": "Expert",
		"level": 23,
		"added": "2017/3/16",
		"totalnotes": 427
	},
	{
		"name": "ハピネスっ！ハピィーマジカルっ♪",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 101,
		"playtime": 95.5,
		"BPM": 184,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/3/16",
		"totalnotes": 82
	},
	{
		"name": "ハピネスっ！ハピィーマジカルっ♪",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 101,
		"playtime": 95.5,
		"BPM": 184,
		"difficult": "Normal",
		"level": 12,
		"added": "2017/3/16",
		"totalnotes": 206
	},
	{
		"name": "ハピネスっ！ハピィーマジカルっ♪",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 101,
		"playtime": 95.5,
		"BPM": 184,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/3/16",
		"totalnotes": 384
	},
	{
		"name": "ハピネスっ！ハピィーマジカルっ♪",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 101,
		"playtime": 95.5,
		"BPM": 184,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/3/16",
		"totalnotes": 569
	},
	{
		"name": "ゴーカ！ごーかい！？ファントムシーフ！",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 101.9,
		"playtime": 97.6,
		"BPM": 215,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/4/13",
		"totalnotes": 107
	},
	{
		"name": "ゴーカ！ごーかい！？ファントムシーフ！",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 101.9,
		"playtime": 97.6,
		"BPM": 215,
		"difficult": "Normal",
		"level": 14,
		"added": "2017/4/13",
		"totalnotes": 207
	},
	{
		"name": "ゴーカ！ごーかい！？ファントムシーフ！",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 101.9,
		"playtime": 97.6,
		"BPM": 215,
		"difficult": "Hard",
		"level": 19,
		"added": "2017/4/13",
		"totalnotes": 448
	},
	{
		"name": "ゴーカ！ごーかい！？ファントムシーフ！",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 101.9,
		"playtime": 97.6,
		"BPM": 215,
		"difficult": "Expert",
		"level": 27,
		"added": "2018/9/20",
		"totalnotes": 698
	},
	{
		"name": "ゴーカ！ごーかい！？ファントムシーフ！",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 101.9,
		"playtime": 97.6,
		"BPM": 215,
		"difficult": "Special",
		"level": 25,
		"added": "2017/4/13",
		"totalnotes": 581
	},
	{
		"name": "せかいのっびのびトレジャー！",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 107.4,
		"playtime": 97.7,
		"BPM": "85-200",
		"difficult": "Easy",
		"level": 8,
		"added": "2017/9/12",
		"totalnotes": 163
	},
	{
		"name": "せかいのっびのびトレジャー！",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 107.4,
		"playtime": 97.7,
		"BPM": "85-200",
		"difficult": "Normal",
		"level": 14,
		"added": "2017/9/12",
		"totalnotes": 293
	},
	{
		"name": "せかいのっびのびトレジャー！",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 107.4,
		"playtime": 99.4,
		"BPM": "85-200",
		"difficult": "Hard",
		"level": 20,
		"added": "2017/9/12",
		"totalnotes": 553
	},
	{
		"name": "せかいのっびのびトレジャー！",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 107.4,
		"playtime": 99.4,
		"BPM": "85-200",
		"difficult": "Expert",
		"level": 26,
		"added": "2017/9/12",
		"totalnotes": 796
	},
	{
		"name": "YAPPY！SCHOOL CARNIVAL☆彡",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 103.3,
		"playtime": 97,
		"BPM": 172,
		"difficult": "Easy",
		"level": 9,
		"added": "2017/9/24",
		"totalnotes": 184
	},
	{
		"name": "YAPPY！SCHOOL CARNIVAL☆彡",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 103.3,
		"playtime": 97.7,
		"BPM": 172,
		"difficult": "Normal",
		"level": 14,
		"added": "2017/9/24",
		"totalnotes": 290
	},
	{
		"name": "YAPPY！SCHOOL CARNIVAL☆彡",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 103.3,
		"playtime": 97.7,
		"BPM": 172,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/9/24",
		"totalnotes": 468
	},
	{
		"name": "YAPPY！SCHOOL CARNIVAL☆彡",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 103.3,
		"playtime": 97.7,
		"BPM": 172,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/9/24",
		"totalnotes": 663
	},
	{
		"name": "わちゃ・もちゃ・ぺったん行進曲",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 117.8,
		"playtime": 110.8,
		"BPM": 160,
		"difficult": "Easy",
		"level": 8,
		"added": "2017/12/20",
		"totalnotes": 144
	},
	{
		"name": "わちゃ・もちゃ・ぺったん行進曲",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 117.8,
		"playtime": 110.8,
		"BPM": 160,
		"difficult": "Normal",
		"level": 13,
		"added": "2017/12/20",
		"totalnotes": 246
	},
	{
		"name": "わちゃ・もちゃ・ぺったん行進曲",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 117.8,
		"playtime": 112.3,
		"BPM": 160,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/12/20",
		"totalnotes": 464
	},
	{
		"name": "わちゃ・もちゃ・ぺったん行進曲",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 117.8,
		"playtime": 112.3,
		"BPM": 160,
		"difficult": "Expert",
		"level": 26,
		"added": "2017/12/20",
		"totalnotes": 769
	},
	{
		"name": "ふわふわ☆ゆめいろサンドイッチ",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 119.1,
		"playtime": 112.2,
		"BPM": 130,
		"difficult": "Easy",
		"level": 7,
		"added": "2018/4/20",
		"totalnotes": 158
	},
	{
		"name": "ふわふわ☆ゆめいろサンドイッチ",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 119.1,
		"playtime": 112.2,
		"BPM": 130,
		"difficult": "Normal",
		"level": 13,
		"added": "2018/4/20",
		"totalnotes": 235
	},
	{
		"name": "ふわふわ☆ゆめいろサンドイッチ",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 119.1,
		"playtime": 112.2,
		"BPM": 130,
		"difficult": "Hard",
		"level": 17,
		"added": "2018/4/20",
		"totalnotes": 461
	},
	{
		"name": "ふわふわ☆ゆめいろサンドイッチ",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 119.1,
		"playtime": 112.2,
		"BPM": 130,
		"difficult": "Expert",
		"level": 24,
		"added": "2018/4/20",
		"totalnotes": 613
	},
	{
		"name": "ハイファイヴ∞あどべんちゃっ",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 117.6,
		"playtime": 112.7,
		"BPM": 198,
		"difficult": "Easy",
		"level": 9,
		"added": "2018/7/10",
		"totalnotes": 203
	},
	{
		"name": "ハイファイヴ∞あどべんちゃっ",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 117.6,
		"playtime": 112.7,
		"BPM": 198,
		"difficult": "Normal",
		"level": 14,
		"added": "2018/7/10",
		"totalnotes": 307
	},
	{
		"name": "ハイファイヴ∞あどべんちゃっ",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 117.6,
		"playtime": 112.7,
		"BPM": 198,
		"difficult": "Hard",
		"level": 19,
		"added": "2018/7/10",
		"totalnotes": 504
	},
	{
		"name": "ハイファイヴ∞あどべんちゃっ",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 117.6,
		"playtime": 112.7,
		"BPM": 198,
		"difficult": "Expert",
		"level": 26,
		"added": "2018/7/10",
		"totalnotes": 853
	},
	{
		"name": "キミがいなくちゃっ！",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 106.5,
		"playtime": 96,
		"BPM": 124,
		"difficult": "Easy",
		"level": 9,
		"added": "2018/10/10",
		"totalnotes": 166
	},
	{
		"name": "キミがいなくちゃっ！",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 106.5,
		"playtime": 99.9,
		"BPM": 124,
		"difficult": "Normal",
		"level": 14,
		"added": "2018/10/10",
		"totalnotes": 272
	},
	{
		"name": "キミがいなくちゃっ！",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 106.5,
		"playtime": 99.9,
		"BPM": 124,
		"difficult": "Hard",
		"level": 17,
		"added": "2018/10/10",
		"totalnotes": 399
	},
	{
		"name": "キミがいなくちゃっ！",
		"band": "ハロー、ハッピーワールド！",
		"type": "Original",
		"totaltime": 106.5,
		"playtime": 99.9,
		"BPM": 124,
		"difficult": "Expert",
		"level": 25,
		"added": "2018/10/10",
		"totalnotes": 569
	},
	{
		"name": "クインティプル☆すまいる",
		"band": "GBP！スペシャルバンド",
		"type": "Original",
		"totaltime": 110.3,
		"playtime": 105.4,
		"BPM": 173,
		"difficult": "Easy",
		"level": 8,
		"added": "2018/1/12",
		"totalnotes": 133
	},
	{
		"name": "クインティプル☆すまいる",
		"band": "GBP！スペシャルバンド",
		"type": "Original",
		"totaltime": 110.3,
		"playtime": 105.6,
		"BPM": 173,
		"difficult": "Normal",
		"level": 13,
		"added": "2018/1/12",
		"totalnotes": 239
	},
	{
		"name": "クインティプル☆すまいる",
		"band": "GBP！スペシャルバンド",
		"type": "Original",
		"totaltime": 110.3,
		"playtime": 105.6,
		"BPM": 173,
		"difficult": "Hard",
		"level": 18,
		"added": "2018/1/12",
		"totalnotes": 459
	},
	{
		"name": "クインティプル☆すまいる",
		"band": "GBP！スペシャルバンド",
		"type": "Original",
		"totaltime": 110.3,
		"playtime": 105.6,
		"BPM": 173,
		"difficult": "Expert",
		"level": 25,
		"added": "2018/1/12",
		"totalnotes": 658
	},
	{
		"name": "ピコっと！パピっと！！ガルパ☆ピコ！！！",
		"band": "香澄×蘭×彩×友希那×こころ",
		"type": "Original",
		"totaltime": 113.7,
		"playtime": 108.5,
		"BPM": 190,
		"difficult": "Easy",
		"level": 9,
		"added": "2018/7/5",
		"totalnotes": 184
	},
	{
		"name": "ピコっと！パピっと！！ガルパ☆ピコ！！！",
		"band": "香澄×蘭×彩×友希那×こころ",
		"type": "Original",
		"totaltime": 113.7,
		"playtime": 108.2,
		"BPM": 190,
		"difficult": "Normal",
		"level": 14,
		"added": "2018/7/5",
		"totalnotes": 320
	},
	{
		"name": "ピコっと！パピっと！！ガルパ☆ピコ！！！",
		"band": "香澄×蘭×彩×友希那×こころ",
		"type": "Original",
		"totaltime": 113.7,
		"playtime": 108.9,
		"BPM": 190,
		"difficult": "Hard",
		"level": 19,
		"added": "2018/7/5",
		"totalnotes": 525
	},
	{
		"name": "ピコっと！パピっと！！ガルパ☆ピコ！！！",
		"band": "香澄×蘭×彩×友希那×こころ",
		"type": "Original",
		"totaltime": 113.7,
		"playtime": 108.9,
		"BPM": 190,
		"difficult": "Expert",
		"level": 26,
		"added": "2018/7/5",
		"totalnotes": 758
	},
	{
		"name": "ひとりじゃないんだから",
		"band": "彩×モカ×リサ×花音×つぐみ",
		"type": "Original",
		"totaltime": 103.7,
		"playtime": 96.3,
		"BPM": 220,
		"difficult": "Easy",
		"level": 7,
		"added": "2018/9/23",
		"totalnotes": 115
	},
	{
		"name": "ひとりじゃないんだから",
		"band": "彩×モカ×リサ×花音×つぐみ",
		"type": "Original",
		"totaltime": 103.7,
		"playtime": 96.3,
		"BPM": 220,
		"difficult": "Normal",
		"level": 13,
		"added": "2018/9/23",
		"totalnotes": 200
	},
	{
		"name": "ひとりじゃないんだから",
		"band": "彩×モカ×リサ×花音×つぐみ",
		"type": "Original",
		"totaltime": 103.7,
		"playtime": 96.3,
		"BPM": 220,
		"difficult": "Hard",
		"level": 18,
		"added": "2018/9/23",
		"totalnotes": 400
	},
	{
		"name": "ひとりじゃないんだから",
		"band": "彩×モカ×リサ×花音×つぐみ",
		"type": "Original",
		"totaltime": 103.7,
		"playtime": 98.2,
		"BPM": 220,
		"difficult": "Expert",
		"level": 25,
		"added": "2018/9/23",
		"totalnotes": 591
	},
	{
		"name": "空色デイズ",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 104.9,
		"playtime": 99.5,
		"BPM": 174,
		"difficult": "Easy",
		"level": 5,
		"added": "2017/3/16",
		"totalnotes": 71
	},
	{
		"name": "空色デイズ",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 104.9,
		"playtime": 99.1,
		"BPM": 174,
		"difficult": "Normal",
		"level": 12,
		"added": "2017/3/16",
		"totalnotes": 201
	},
	{
		"name": "空色デイズ",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 104.9,
		"playtime": 99.3,
		"BPM": 174,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/3/16",
		"totalnotes": 399
	},
	{
		"name": "空色デイズ",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 104.9,
		"playtime": 99.3,
		"BPM": 174,
		"difficult": "Expert",
		"level": 26,
		"added": "2017/3/16",
		"totalnotes": 626
	},
	{
		"name": "Alchemy",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 119.2,
		"playtime": 109.8,
		"BPM": 165,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/3/16",
		"totalnotes": 115
	},
	{
		"name": "Alchemy",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 119.2,
		"playtime": 109.8,
		"BPM": 165,
		"difficult": "Normal",
		"level": 12,
		"added": "2017/3/16",
		"totalnotes": 212
	},
	{
		"name": "Alchemy",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 119.2,
		"playtime": 109.8,
		"BPM": 165,
		"difficult": "Hard",
		"level": 17,
		"added": "2017/3/16",
		"totalnotes": 395
	},
	{
		"name": "Alchemy",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 119.2,
		"playtime": 110,
		"BPM": 165,
		"difficult": "Expert",
		"level": 26,
		"added": "2017/3/16",
		"totalnotes": 603
	},
	{
		"name": "光るなら",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 115,
		"playtime": 111,
		"BPM": 160,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/3/27",
		"totalnotes": 107
	},
	{
		"name": "光るなら",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 115,
		"playtime": 111,
		"BPM": 160,
		"difficult": "Normal",
		"level": 13,
		"added": "2017/3/27",
		"totalnotes": 176
	},
	{
		"name": "光るなら",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 115,
		"playtime": 111,
		"BPM": 160,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/3/27",
		"totalnotes": 355
	},
	{
		"name": "光るなら",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 115,
		"playtime": 111,
		"BPM": 160,
		"difficult": "Expert",
		"level": 23,
		"added": "2017/3/27",
		"totalnotes": 531
	},
	{
		"name": "Little Busters！",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 110.5,
		"playtime": 100.1,
		"BPM": 151,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/4/24",
		"totalnotes": 71
	},
	{
		"name": "Little Busters！",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 110.5,
		"playtime": 100.1,
		"BPM": 151,
		"difficult": "Normal",
		"level": 13,
		"added": "2017/4/24",
		"totalnotes": 152
	},
	{
		"name": "Little Busters！",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 110.5,
		"playtime": 100.1,
		"BPM": 151,
		"difficult": "Hard",
		"level": 17,
		"added": "2017/4/24",
		"totalnotes": 370
	},
	{
		"name": "Little Busters！",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 110.5,
		"playtime": 100.1,
		"BPM": 151,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/4/24",
		"totalnotes": 575
	},
	{
		"name": "正解はひとつ！じゃない！！",
		"band": "Glitter*Green + Poppin' Party",
		"type": "Cover",
		"totaltime": 107,
		"playtime": 101.5,
		"BPM": 170,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/4/30",
		"totalnotes": 86
	},
	{
		"name": "正解はひとつ！じゃない！！",
		"band": "Glitter*Green + Poppin' Party",
		"type": "Cover",
		"totaltime": 107,
		"playtime": 101.5,
		"BPM": 170,
		"difficult": "Normal",
		"level": 13,
		"added": "2017/4/30",
		"totalnotes": 222
	},
	{
		"name": "正解はひとつ！じゃない！！",
		"band": "Glitter*Green + Poppin' Party",
		"type": "Cover",
		"totaltime": 107,
		"playtime": 102.2,
		"BPM": 170,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/4/30",
		"totalnotes": 438
	},
	{
		"name": "正解はひとつ！じゃない！！",
		"band": "Glitter*Green + Poppin' Party",
		"type": "Cover",
		"totaltime": 107,
		"playtime": 102.2,
		"BPM": 170,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/4/30",
		"totalnotes": 637
	},
	{
		"name": "天体観測",
		"band": "Afterglow + 戸山香澄",
		"type": "Cover",
		"totaltime": 111.8,
		"playtime": 104.7,
		"BPM": 165,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/5/2",
		"totalnotes": 70
	},
	{
		"name": "天体観測",
		"band": "Afterglow + 戸山香澄",
		"type": "Cover",
		"totaltime": 111.8,
		"playtime": 104.7,
		"BPM": 165,
		"difficult": "Normal",
		"level": 14,
		"added": "2017/5/2",
		"totalnotes": 176
	},
	{
		"name": "天体観測",
		"band": "Afterglow + 戸山香澄",
		"type": "Cover",
		"totaltime": 111.8,
		"playtime": 104.5,
		"BPM": 165,
		"difficult": "Hard",
		"level": 17,
		"added": "2017/5/2",
		"totalnotes": 483
	},
	{
		"name": "天体観測",
		"band": "Afterglow + 戸山香澄",
		"type": "Cover",
		"totaltime": 111.8,
		"playtime": 104.5,
		"BPM": 165,
		"difficult": "Expert",
		"level": 26,
		"added": "2017/5/2",
		"totalnotes": 751
	},
	{
		"name": "God knows…",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 128,
		"playtime": 121.6,
		"BPM": 150,
		"difficult": "Easy",
		"level": 10,
		"added": "2017/7/11",
		"totalnotes": 204
	},
	{
		"name": "God knows…",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 128,
		"playtime": 123.2,
		"BPM": 150,
		"difficult": "Normal",
		"level": 15,
		"added": "2017/7/11",
		"totalnotes": 378
	},
	{
		"name": "God knows…",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 128,
		"playtime": 123.2,
		"BPM": 150,
		"difficult": "Hard",
		"level": 21,
		"added": "2017/7/11",
		"totalnotes": 631
	},
	{
		"name": "God knows…",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 128,
		"playtime": 123.2,
		"BPM": 150,
		"difficult": "Expert",
		"level": 28,
		"added": "2017/7/11",
		"totalnotes": 1081
	},
	{
		"name": "only my railgun",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 104.9,
		"playtime": 99.2,
		"BPM": 143,
		"difficult": "Easy",
		"level": 9,
		"added": "2017/8/26",
		"totalnotes": 186
	},
	{
		"name": "only my railgun",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 104.9,
		"playtime": 99.2,
		"BPM": 143,
		"difficult": "Normal",
		"level": 15,
		"added": "2017/8/26",
		"totalnotes": 305
	},
	{
		"name": "only my railgun",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 104.9,
		"playtime": 99.2,
		"BPM": 143,
		"difficult": "Hard",
		"level": 19,
		"added": "2017/8/26",
		"totalnotes": 445
	},
	{
		"name": "only my railgun",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 104.9,
		"playtime": 99.2,
		"BPM": 143,
		"difficult": "Expert",
		"level": 26,
		"added": "2017/8/26",
		"totalnotes": 706
	},
	{
		"name": "千本桜",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 101.3,
		"playtime": 94.3,
		"BPM": 154,
		"difficult": "Easy",
		"level": 8,
		"added": "2017/11/10",
		"totalnotes": 136
	},
	{
		"name": "千本桜",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 101.3,
		"playtime": 95.8,
		"BPM": 154,
		"difficult": "Normal",
		"level": 14,
		"added": "2017/11/10",
		"totalnotes": 256
	},
	{
		"name": "千本桜",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 101.3,
		"playtime": 95.8,
		"BPM": 154,
		"difficult": "Hard",
		"level": 19,
		"added": "2017/11/10",
		"totalnotes": 553
	},
	{
		"name": "千本桜",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 101.3,
		"playtime": 95.8,
		"BPM": 154,
		"difficult": "Expert",
		"level": 26,
		"added": "2017/11/10",
		"totalnotes": 730
	},
	{
		"name": "君じゃなきゃダメみたい",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 101.7,
		"playtime": 93.5,
		"BPM": 131,
		"difficult": "Easy",
		"level": 8,
		"added": "2018/1/3",
		"totalnotes": 140
	},
	{
		"name": "君じゃなきゃダメみたい",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 101.7,
		"playtime": 94.9,
		"BPM": 131,
		"difficult": "Normal",
		"level": 14,
		"added": "2018/1/3",
		"totalnotes": 269
	},
	{
		"name": "君じゃなきゃダメみたい",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 101.7,
		"playtime": 94.7,
		"BPM": 131,
		"difficult": "Hard",
		"level": 17,
		"added": "2018/1/3",
		"totalnotes": 398
	},
	{
		"name": "君じゃなきゃダメみたい",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 101.7,
		"playtime": 94.9,
		"BPM": 131,
		"difficult": "Expert",
		"level": 25,
		"added": "2018/1/3",
		"totalnotes": 620
	},
	{
		"name": "メランコリック",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 116.6,
		"playtime": 111.2,
		"BPM": 140,
		"difficult": "Easy",
		"level": 8,
		"added": "2018/1/31",
		"totalnotes": 178
	},
	{
		"name": "メランコリック",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 116.6,
		"playtime": 111.2,
		"BPM": 140,
		"difficult": "Normal",
		"level": 13,
		"added": "2018/1/31",
		"totalnotes": 280
	},
	{
		"name": "メランコリック",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 116.6,
		"playtime": 111.2,
		"BPM": 140,
		"difficult": "Hard",
		"level": 17,
		"added": "2018/1/31",
		"totalnotes": 446
	},
	{
		"name": "メランコリック",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 116.6,
		"playtime": 111.3,
		"BPM": 140,
		"difficult": "Expert",
		"level": 24,
		"added": "2018/1/31",
		"totalnotes": 622
	},
	{
		"name": "GLAMOROUS SKY",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 144.7,
		"playtime": 133.4,
		"BPM": "152(-103)",
		"difficult": "Easy",
		"level": 8,
		"added": "2018/3/18",
		"totalnotes": 194
	},
	{
		"name": "GLAMOROUS SKY",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 144.7,
		"playtime": 139.2,
		"BPM": "152(-103)",
		"difficult": "Normal",
		"level": 15,
		"added": "2018/3/18",
		"totalnotes": 399
	},
	{
		"name": "GLAMOROUS SKY",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 144.7,
		"playtime": 139.2,
		"BPM": "152(-103)",
		"difficult": "Hard",
		"level": 17,
		"added": "2018/3/18",
		"totalnotes": 541
	},
	{
		"name": "GLAMOROUS SKY",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 144.7,
		"playtime": 139.4,
		"BPM": "152(-103)",
		"difficult": "Expert",
		"level": 26,
		"added": "2018/3/18",
		"totalnotes": 780
	},
	{
		"name": "DAYS",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 128,
		"playtime": 117.3,
		"BPM": 135,
		"difficult": "Easy",
		"level": 8,
		"added": "2018/6/30",
		"totalnotes": 122
	},
	{
		"name": "DAYS",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 128,
		"playtime": 117.3,
		"BPM": 135,
		"difficult": "Normal",
		"level": 13,
		"added": "2018/6/30",
		"totalnotes": 297
	},
	{
		"name": "DAYS",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 128,
		"playtime": 122.7,
		"BPM": 135,
		"difficult": "Hard",
		"level": 18,
		"added": "2018/6/30",
		"totalnotes": 493
	},
	{
		"name": "DAYS",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 128,
		"playtime": 122.7,
		"BPM": 135,
		"difficult": "Expert",
		"level": 25,
		"added": "2018/6/30",
		"totalnotes": 725
	},
	{
		"name": "Life Will Change",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 121.8,
		"playtime": 115.9,
		"BPM": 132,
		"difficult": "Easy",
		"level": 7,
		"added": "2018/7/20",
		"totalnotes": 128
	},
	{
		"name": "Life Will Change",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 121.8,
		"playtime": 116.1,
		"BPM": 132,
		"difficult": "Normal",
		"level": 12,
		"added": "2018/7/20",
		"totalnotes": 202
	},
	{
		"name": "Life Will Change",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 121.8,
		"playtime": 116.3,
		"BPM": 132,
		"difficult": "Hard",
		"level": 19,
		"added": "2018/7/20",
		"totalnotes": 583
	},
	{
		"name": "Life Will Change",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 121.8,
		"playtime": 116.3,
		"BPM": 132,
		"difficult": "Expert",
		"level": 26,
		"added": "2018/7/20",
		"totalnotes": 823
	},
	{
		"name": "夏祭り",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 125.8,
		"playtime": 119.6,
		"BPM": "72-144",
		"difficult": "Easy",
		"level": 8,
		"added": "2018/7/31",
		"totalnotes": 177
	},
	{
		"name": "夏祭り",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 125.8,
		"playtime": 119.6,
		"BPM": "72-144",
		"difficult": "Normal",
		"level": 12,
		"added": "2018/7/31",
		"totalnotes": 263
	},
	{
		"name": "夏祭り",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 125.8,
		"playtime": 119.8,
		"BPM": "72-144",
		"difficult": "Hard",
		"level": 20,
		"added": "2018/7/31",
		"totalnotes": 618
	},
	{
		"name": "夏祭り",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 125.8,
		"playtime": 119.9,
		"BPM": "72-144",
		"difficult": "Expert",
		"level": 25,
		"added": "2018/7/31",
		"totalnotes": 823
	},
	{
		"name": "ロミオとシンデレラ",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 113.7,
		"playtime": 108,
		"BPM": 170,
		"difficult": "Easy",
		"level": 7,
		"added": "2018/8/24",
		"totalnotes": 136
	},
	{
		"name": "ロミオとシンデレラ",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 113.7,
		"playtime": 108.7,
		"BPM": 170,
		"difficult": "Normal",
		"level": 14,
		"added": "2018/8/24",
		"totalnotes": 282
	},
	{
		"name": "ロミオとシンデレラ",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 113.7,
		"playtime": 109.2,
		"BPM": 170,
		"difficult": "Hard",
		"level": 18,
		"added": "2018/8/24",
		"totalnotes": 479
	},
	{
		"name": "ロミオとシンデレラ",
		"band": "Poppin' Party",
		"type": "Cover",
		"totaltime": 113.7,
		"playtime": 109.3,
		"BPM": 170,
		"difficult": "Expert",
		"level": 25,
		"added": "2018/8/24",
		"totalnotes": 744
	},
	{
		"name": "カルマ",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 101.8,
		"playtime": 95.4,
		"BPM": 195,
		"difficult": "Easy",
		"level": 6,
		"added": "2017/3/16",
		"totalnotes": 97
	},
	{
		"name": "カルマ",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 101.8,
		"playtime": 95.4,
		"BPM": 195,
		"difficult": "Normal",
		"level": 12,
		"added": "2017/3/16",
		"totalnotes": 199
	},
	{
		"name": "カルマ",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 101.8,
		"playtime": 95.4,
		"BPM": 195,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/3/16",
		"totalnotes": 352
	},
	{
		"name": "カルマ",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 101.8,
		"playtime": 95.4,
		"BPM": 195,
		"difficult": "Expert",
		"level": 26,
		"added": "2017/3/16",
		"totalnotes": 582
	},
	{
		"name": "Don't say \"lazy",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 126.6,
		"playtime": 120.3,
		"BPM": 181,
		"difficult": "Easy",
		"level": 8,
		"added": "2017/3/20",
		"totalnotes": 167
	},
	{
		"name": "Don't say \"lazy",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 126.6,
		"playtime": 120.3,
		"BPM": 181,
		"difficult": "Normal",
		"level": 12,
		"added": "2017/3/20",
		"totalnotes": 280
	},
	{
		"name": "Don't say \"lazy",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 126.6,
		"playtime": 121.3,
		"BPM": 181,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/3/20",
		"totalnotes": 505
	},
	{
		"name": "Don't say \"lazy",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 126.6,
		"playtime": 121.3,
		"BPM": 181,
		"difficult": "Expert",
		"level": 26,
		"added": "2018/8/10",
		"totalnotes": 925
	},
	{
		"name": "Don't say \"lazy",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 126.6,
		"playtime": 121.3,
		"BPM": 181,
		"difficult": "Special",
		"level": 25,
		"added": "2017/3/20",
		"totalnotes": 763
	},
	{
		"name": "Butter-Fly",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 119.4,
		"playtime": 111.4,
		"BPM": 171,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/3/16",
		"totalnotes": 133
	},
	{
		"name": "Butter-Fly",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 119.4,
		"playtime": 111.4,
		"BPM": 171,
		"difficult": "Normal",
		"level": 11,
		"added": "2017/3/16",
		"totalnotes": 172
	},
	{
		"name": "Butter-Fly",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 119.4,
		"playtime": 111.6,
		"BPM": 171,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/3/16",
		"totalnotes": 405
	},
	{
		"name": "Butter-Fly",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 119.4,
		"playtime": 111.6,
		"BPM": 171,
		"difficult": "Expert",
		"level": 24,
		"added": "2017/3/16",
		"totalnotes": 615
	},
	{
		"name": "great escape",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 91.3,
		"playtime": 83.2,
		"BPM": 184,
		"difficult": "Easy",
		"level": 8,
		"added": "2017/7/25",
		"totalnotes": 118
	},
	{
		"name": "great escape",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 91.3,
		"playtime": 83.2,
		"BPM": 184,
		"difficult": "Normal",
		"level": 13,
		"added": "2017/7/25",
		"totalnotes": 239
	},
	{
		"name": "great escape",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 91.3,
		"playtime": 84.9,
		"BPM": 184,
		"difficult": "Hard",
		"level": 17,
		"added": "2017/7/25",
		"totalnotes": 445
	},
	{
		"name": "great escape",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 91.3,
		"playtime": 84.9,
		"BPM": 184,
		"difficult": "Expert",
		"level": 26,
		"added": "2017/7/25",
		"totalnotes": 676
	},
	{
		"name": "アスノヨゾラ哨戒班",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 95.4,
		"playtime": 90.9,
		"BPM": 185,
		"difficult": "Easy",
		"level": 10,
		"added": "2017/8/31",
		"totalnotes": 178
	},
	{
		"name": "アスノヨゾラ哨戒班",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 95.4,
		"playtime": 90.9,
		"BPM": 185,
		"difficult": "Normal",
		"level": 15,
		"added": "2017/8/31",
		"totalnotes": 283
	},
	{
		"name": "アスノヨゾラ哨戒班",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 95.4,
		"playtime": 90.9,
		"BPM": 185,
		"difficult": "Hard",
		"level": 19,
		"added": "2017/8/31",
		"totalnotes": 433
	},
	{
		"name": "アスノヨゾラ哨戒班",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 95.4,
		"playtime": 90.9,
		"BPM": 185,
		"difficult": "Expert",
		"level": 26,
		"added": "2017/8/31",
		"totalnotes": 695
	},
	{
		"name": "READY STEADY GO",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 101.7,
		"playtime": 95.8,
		"BPM": 144,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/10/27",
		"totalnotes": 107
	},
	{
		"name": "READY STEADY GO",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 101.7,
		"playtime": 96.3,
		"BPM": 144,
		"difficult": "Normal",
		"level": 13,
		"added": "2017/10/27",
		"totalnotes": 217
	},
	{
		"name": "READY STEADY GO",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 101.7,
		"playtime": 96.6,
		"BPM": 144,
		"difficult": "Hard",
		"level": 17,
		"added": "2017/10/27",
		"totalnotes": 429
	},
	{
		"name": "READY STEADY GO",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 101.7,
		"playtime": 96.6,
		"BPM": 144,
		"difficult": "Expert",
		"level": 24,
		"added": "2017/10/27",
		"totalnotes": 584
	},
	{
		"name": "Redo",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 97.3,
		"playtime": 92.1,
		"BPM": 190,
		"difficult": "Easy",
		"level": 9,
		"added": "2018/1/2",
		"totalnotes": 170
	},
	{
		"name": "Redo",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 97.3,
		"playtime": 92.1,
		"BPM": 190,
		"difficult": "Normal",
		"level": 14,
		"added": "2018/1/2",
		"totalnotes": 285
	},
	{
		"name": "Redo",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 97.3,
		"playtime": 92.1,
		"BPM": 190,
		"difficult": "Hard",
		"level": 20,
		"added": "2018/1/2",
		"totalnotes": 478
	},
	{
		"name": "Redo",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 97.3,
		"playtime": 92.1,
		"BPM": 190,
		"difficult": "Expert",
		"level": 27,
		"added": "2018/1/2",
		"totalnotes": 712
	},
	{
		"name": "プライド革命",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 107.1,
		"playtime": 99.9,
		"BPM": 185,
		"difficult": "Easy",
		"level": 6,
		"added": "2018/1/24",
		"totalnotes": 90
	},
	{
		"name": "プライド革命",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 107.1,
		"playtime": 102.2,
		"BPM": 185,
		"difficult": "Normal",
		"level": 13,
		"added": "2018/1/24",
		"totalnotes": 249
	},
	{
		"name": "プライド革命",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 107.1,
		"playtime": 102.2,
		"BPM": 185,
		"difficult": "Hard",
		"level": 17,
		"added": "2018/1/24",
		"totalnotes": 449
	},
	{
		"name": "プライド革命",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 107.1,
		"playtime": 102.2,
		"BPM": 185,
		"difficult": "Expert",
		"level": 25,
		"added": "2018/1/24",
		"totalnotes": 663
	},
	{
		"name": "イマジネーション",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 120,
		"playtime": 109.4,
		"BPM": 204,
		"difficult": "Easy",
		"level": 9,
		"added": "2018/5/10",
		"totalnotes": 162
	},
	{
		"name": "イマジネーション",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 120,
		"playtime": 109.4,
		"BPM": 204,
		"difficult": "Normal",
		"level": 14,
		"added": "2018/5/10",
		"totalnotes": 302
	},
	{
		"name": "イマジネーション",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 120,
		"playtime": 114.8,
		"BPM": 204,
		"difficult": "Hard",
		"level": 20,
		"added": "2018/5/10",
		"totalnotes": 567
	},
	{
		"name": "イマジネーション",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 120,
		"playtime": 114.8,
		"BPM": 204,
		"difficult": "Expert",
		"level": 26,
		"added": "2018/5/10",
		"totalnotes": 769
	},
	{
		"name": "Reach Out To The Truth",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 116.5,
		"playtime": 109.8,
		"BPM": 170,
		"difficult": "Easy",
		"level": 9,
		"added": "2018/7/20",
		"totalnotes": 177
	},
	{
		"name": "Reach Out To The Truth",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 116.5,
		"playtime": 110.6,
		"BPM": 170,
		"difficult": "Normal",
		"level": 14,
		"added": "2018/7/20",
		"totalnotes": 288
	},
	{
		"name": "Reach Out To The Truth",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 116.5,
		"playtime": 110.6,
		"BPM": 170,
		"difficult": "Hard",
		"level": 18,
		"added": "2018/7/20",
		"totalnotes": 521
	},
	{
		"name": "Reach Out To The Truth",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 116.5,
		"playtime": 110.6,
		"BPM": 170,
		"difficult": "Expert",
		"level": 26,
		"added": "2018/7/20",
		"totalnotes": 723
	},
	{
		"name": "ロストワンの号哭",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 120,
		"playtime": 114.8,
		"BPM": 162,
		"difficult": "Easy",
		"level": 10,
		"added": "2018/8/26",
		"totalnotes": 217
	},
	{
		"name": "ロストワンの号哭",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 120,
		"playtime": 114.8,
		"BPM": 162,
		"difficult": "Normal",
		"level": 14,
		"added": "2018/8/26",
		"totalnotes": 298
	},
	{
		"name": "ロストワンの号哭",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 120,
		"playtime": 114.8,
		"BPM": 162,
		"difficult": "Hard",
		"level": 21,
		"added": "2018/8/26",
		"totalnotes": 687
	},
	{
		"name": "ロストワンの号哭",
		"band": "Afterglow",
		"type": "Cover",
		"totaltime": 120,
		"playtime": 114.8,
		"BPM": 162,
		"difficult": "Expert",
		"level": 26,
		"added": "2018/8/26",
		"totalnotes": 1026
	},
	{
		"name": "secret base～君がくれたもの～",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 143.3,
		"playtime": 131.9,
		"BPM": 144,
		"difficult": "Easy",
		"level": 5,
		"added": "2017/3/16",
		"totalnotes": 71
	},
	{
		"name": "secret base～君がくれたもの～",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 143.3,
		"playtime": 131.9,
		"BPM": 144,
		"difficult": "Normal",
		"level": 12,
		"added": "2017/3/16",
		"totalnotes": 195
	},
	{
		"name": "secret base～君がくれたもの～",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 143.3,
		"playtime": 131.9,
		"BPM": 144,
		"difficult": "Hard",
		"level": 19,
		"added": "2017/3/16",
		"totalnotes": 424
	},
	{
		"name": "secret base～君がくれたもの～",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 143.3,
		"playtime": 131.9,
		"BPM": 144,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/3/16",
		"totalnotes": 560
	},
	{
		"name": "ドリームパレード",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 107.6,
		"playtime": 103.3,
		"BPM": 172,
		"difficult": "Easy",
		"level": 6,
		"added": "2017/3/16",
		"totalnotes": 104
	},
	{
		"name": "ドリームパレード",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 107.6,
		"playtime": 103.3,
		"BPM": 172,
		"difficult": "Normal",
		"level": 13,
		"added": "2017/3/16",
		"totalnotes": 223
	},
	{
		"name": "ドリームパレード",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 107.6,
		"playtime": 103.3,
		"BPM": 172,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/3/16",
		"totalnotes": 394
	},
	{
		"name": "ドリームパレード",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 107.6,
		"playtime": 103.5,
		"BPM": 172,
		"difficult": "Expert",
		"level": 26,
		"added": "2017/3/16",
		"totalnotes": 575
	},
	{
		"name": "そばかす",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 106,
		"playtime": 99.5,
		"BPM": 170,
		"difficult": "Easy",
		"level": 6,
		"added": "2017/4/10",
		"totalnotes": 67
	},
	{
		"name": "そばかす",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 106,
		"playtime": 99.5,
		"BPM": 170,
		"difficult": "Normal",
		"level": 12,
		"added": "2017/4/10",
		"totalnotes": 125
	},
	{
		"name": "そばかす",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 106,
		"playtime": 99.9,
		"BPM": 170,
		"difficult": "Hard",
		"level": 17,
		"added": "2017/4/10",
		"totalnotes": 284
	},
	{
		"name": "そばかす",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 106,
		"playtime": 99.9,
		"BPM": 170,
		"difficult": "Expert",
		"level": 23,
		"added": "2018/9/20",
		"totalnotes": 456
	},
	{
		"name": "そばかす",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 106,
		"playtime": 99.9,
		"BPM": 170,
		"difficult": "Special",
		"level": 25,
		"added": "2017/4/10",
		"totalnotes": 723
	},
	{
		"name": "MOON PRIDE",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 112.4,
		"playtime": 106.8,
		"BPM": 173,
		"difficult": "Easy",
		"level": 8,
		"added": "2017/5/23",
		"totalnotes": 181
	},
	{
		"name": "MOON PRIDE",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 112.4,
		"playtime": 106.8,
		"BPM": 173,
		"difficult": "Normal",
		"level": 14,
		"added": "2017/5/23",
		"totalnotes": 265
	},
	{
		"name": "MOON PRIDE",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 112.4,
		"playtime": 106.8,
		"BPM": 173,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/5/23",
		"totalnotes": 450
	},
	{
		"name": "MOON PRIDE",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 112.4,
		"playtime": 106.8,
		"BPM": 173,
		"difficult": "Expert",
		"level": 26,
		"added": "2017/5/23",
		"totalnotes": 716
	},
	{
		"name": "ふわふわ時間",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 95.3,
		"playtime": 77.3,
		"BPM": 180,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/7/31",
		"totalnotes": 104
	},
	{
		"name": "ふわふわ時間",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 95.3,
		"playtime": 88,
		"BPM": 180,
		"difficult": "Normal",
		"level": 13,
		"added": "2017/7/31",
		"totalnotes": 195
	},
	{
		"name": "ふわふわ時間",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 95.3,
		"playtime": 88,
		"BPM": 180,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/7/31",
		"totalnotes": 384
	},
	{
		"name": "ふわふわ時間",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 95.3,
		"playtime": 88.7,
		"BPM": 180,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/7/31",
		"totalnotes": 544
	},
	{
		"name": "はなまるぴっぴはよいこだけ",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 104.7,
		"playtime": 99.1,
		"BPM": 172,
		"difficult": "Easy",
		"level": 9,
		"added": "2017/9/30",
		"totalnotes": 193
	},
	{
		"name": "はなまるぴっぴはよいこだけ",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 104.7,
		"playtime": 99.1,
		"BPM": 172,
		"difficult": "Normal",
		"level": 14,
		"added": "2017/9/30",
		"totalnotes": 318
	},
	{
		"name": "はなまるぴっぴはよいこだけ",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 104.7,
		"playtime": 99.1,
		"BPM": 172,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/9/30",
		"totalnotes": 507
	},
	{
		"name": "はなまるぴっぴはよいこだけ",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 104.7,
		"playtime": 99.6,
		"BPM": 172,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/9/30",
		"totalnotes": 729
	},
	{
		"name": "世界は恋に落ちている",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 116.3,
		"playtime": 110.3,
		"BPM": 130,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/10/31",
		"totalnotes": 137
	},
	{
		"name": "世界は恋に落ちている",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 116.3,
		"playtime": 110.3,
		"BPM": 130,
		"difficult": "Normal",
		"level": 14,
		"added": "2017/10/31",
		"totalnotes": 267
	},
	{
		"name": "世界は恋に落ちている",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 116.3,
		"playtime": 110.3,
		"BPM": 130,
		"difficult": "Hard",
		"level": 16,
		"added": "2017/10/31",
		"totalnotes": 405
	},
	{
		"name": "世界は恋に落ちている",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 116.3,
		"playtime": 110.3,
		"BPM": 130,
		"difficult": "Expert",
		"level": 23,
		"added": "2017/10/31",
		"totalnotes": 527
	},
	{
		"name": "ハッピーシンセサイザ",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 141.7,
		"playtime": 132.3,
		"BPM": 127,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/12/30",
		"totalnotes": 169
	},
	{
		"name": "ハッピーシンセサイザ",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 141.7,
		"playtime": 132.3,
		"BPM": 127,
		"difficult": "Normal",
		"level": 12,
		"added": "2017/12/30",
		"totalnotes": 339
	},
	{
		"name": "ハッピーシンセサイザ",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 141.7,
		"playtime": 132.3,
		"BPM": 127,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/12/30",
		"totalnotes": 611
	},
	{
		"name": "ハッピーシンセサイザ",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 141.7,
		"playtime": 132.3,
		"BPM": 127,
		"difficult": "Expert",
		"level": 26,
		"added": "2017/12/30",
		"totalnotes": 933
	},
	{
		"name": "SAKURAスキップ",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 104.7,
		"playtime": 98.9,
		"BPM": 165,
		"difficult": "Easy",
		"level": 8,
		"added": "2018/2/10",
		"totalnotes": 135
	},
	{
		"name": "SAKURAスキップ",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 104.7,
		"playtime": 98.9,
		"BPM": 165,
		"difficult": "Normal",
		"level": 13,
		"added": "2018/2/10",
		"totalnotes": 240
	},
	{
		"name": "SAKURAスキップ",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 104.7,
		"playtime": 98.9,
		"BPM": 165,
		"difficult": "Hard",
		"level": 18,
		"added": "2018/2/10",
		"totalnotes": 471
	},
	{
		"name": "SAKURAスキップ",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 104.7,
		"playtime": 99.6,
		"BPM": 165,
		"difficult": "Expert",
		"level": 25,
		"added": "2018/2/10",
		"totalnotes": 650
	},
	{
		"name": "みくみくにしてあげる♪【してやんよ】",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 102.8,
		"playtime": 95.3,
		"BPM": 160,
		"difficult": "Easy",
		"level": 8,
		"added": "2018/4/25",
		"totalnotes": 139
	},
	{
		"name": "みくみくにしてあげる♪【してやんよ】",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 102.8,
		"playtime": 95.6,
		"BPM": 160,
		"difficult": "Normal",
		"level": 14,
		"added": "2018/4/25",
		"totalnotes": 239
	},
	{
		"name": "みくみくにしてあげる♪【してやんよ】",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 102.8,
		"playtime": 95.8,
		"BPM": 160,
		"difficult": "Hard",
		"level": 18,
		"added": "2018/4/25",
		"totalnotes": 439
	},
	{
		"name": "みくみくにしてあげる♪【してやんよ】",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 102.8,
		"playtime": 95.9,
		"BPM": 160,
		"difficult": "Expert",
		"level": 26,
		"added": "2018/4/25",
		"totalnotes": 639
	},
	{
		"name": "気まぐれロマンティック",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 111.6,
		"playtime": 105.7,
		"BPM": 170,
		"difficult": "Easy",
		"level": 7,
		"added": "2018/5/3",
		"totalnotes": 157
	},
	{
		"name": "気まぐれロマンティック",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 111.6,
		"playtime": 105.7,
		"BPM": 170,
		"difficult": "Normal",
		"level": 12,
		"added": "2018/5/3",
		"totalnotes": 237
	},
	{
		"name": "気まぐれロマンティック",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 111.6,
		"playtime": 105.7,
		"BPM": 170,
		"difficult": "Hard",
		"level": 17,
		"added": "2018/5/3",
		"totalnotes": 437
	},
	{
		"name": "気まぐれロマンティック",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 111.6,
		"playtime": 105.7,
		"BPM": 170,
		"difficult": "Expert",
		"level": 24,
		"added": "2018/5/3",
		"totalnotes": 608
	},
	{
		"name": "Fantastic future",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 112.3,
		"playtime": 107.4,
		"BPM": 172,
		"difficult": "Easy",
		"level": 8,
		"added": "2018/6/10",
		"totalnotes": 182
	},
	{
		"name": "Fantastic future",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 112.3,
		"playtime": 107.1,
		"BPM": 172,
		"difficult": "Normal",
		"level": 14,
		"added": "2018/6/10",
		"totalnotes": 259
	},
	{
		"name": "Fantastic future",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 112.3,
		"playtime": 107.4,
		"BPM": 172,
		"difficult": "Hard",
		"level": 19,
		"added": "2018/6/10",
		"totalnotes": 454
	},
	{
		"name": "Fantastic future",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 112.3,
		"playtime": 107.4,
		"BPM": 172,
		"difficult": "Expert",
		"level": 26,
		"added": "2018/6/10",
		"totalnotes": 710
	},
	{
		"name": "DISCOTHEQUE",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 99.9,
		"playtime": 94.2,
		"BPM": 143,
		"difficult": "Easy",
		"level": 9,
		"added": "2018/9/15",
		"totalnotes": 166
	},
	{
		"name": "DISCOTHEQUE",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 99.9,
		"playtime": 94.8,
		"BPM": 143,
		"difficult": "Normal",
		"level": 14,
		"added": "2018/9/15",
		"totalnotes": 234
	},
	{
		"name": "DISCOTHEQUE",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 99.9,
		"playtime": 94.8,
		"BPM": 143,
		"difficult": "Hard",
		"level": 18,
		"added": "2018/9/15",
		"totalnotes": 411
	},
	{
		"name": "DISCOTHEQUE",
		"band": "Pastel*Palettes",
		"type": "Cover",
		"totaltime": 99.9,
		"playtime": 94.8,
		"BPM": 143,
		"difficult": "Expert",
		"level": 26,
		"added": "2018/9/15",
		"totalnotes": 626
	},
	{
		"name": "魂のルフラン",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 152.7,
		"playtime": 141.7,
		"BPM": 130,
		"difficult": "Easy",
		"level": 6,
		"added": "2017/3/16",
		"totalnotes": 88
	},
	{
		"name": "魂のルフラン",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 152.7,
		"playtime": 143.5,
		"BPM": 130,
		"difficult": "Normal",
		"level": 12,
		"added": "2017/3/16",
		"totalnotes": 228
	},
	{
		"name": "魂のルフラン",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 152.7,
		"playtime": 143.5,
		"BPM": 130,
		"difficult": "Hard",
		"level": 17,
		"added": "2017/3/16",
		"totalnotes": 386
	},
	{
		"name": "魂のルフラン",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 152.7,
		"playtime": 143.5,
		"BPM": 130,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/3/16",
		"totalnotes": 698
	},
	{
		"name": "Hacking to the Gate",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 99.9,
		"playtime": 93.9,
		"BPM": 161,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/3/16",
		"totalnotes": 118
	},
	{
		"name": "Hacking to the Gate",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 99.9,
		"playtime": 93.9,
		"BPM": 161,
		"difficult": "Normal",
		"level": 12,
		"added": "2017/3/16",
		"totalnotes": 175
	},
	{
		"name": "Hacking to the Gate",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 99.9,
		"playtime": 93.9,
		"BPM": 161,
		"difficult": "Hard",
		"level": 16,
		"added": "2017/3/16",
		"totalnotes": 339
	},
	{
		"name": "Hacking to the Gate",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 99.9,
		"playtime": 93.9,
		"BPM": 161,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/3/16",
		"totalnotes": 487
	},
	{
		"name": "ETERNAL BLAZE",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 113.9,
		"playtime": 105.9,
		"BPM": "106-155",
		"difficult": "Easy",
		"level": 9,
		"added": "2017/4/17",
		"totalnotes": 135
	},
	{
		"name": "ETERNAL BLAZE",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 113.9,
		"playtime": 105.9,
		"BPM": "106-155",
		"difficult": "Normal",
		"level": 13,
		"added": "2017/4/17",
		"totalnotes": 212
	},
	{
		"name": "ETERNAL BLAZE",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 113.9,
		"playtime": 105.9,
		"BPM": "106-155",
		"difficult": "Hard",
		"level": 17,
		"added": "2017/4/17",
		"totalnotes": 428
	},
	{
		"name": "ETERNAL BLAZE",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 113.9,
		"playtime": 105.9,
		"BPM": "106-155",
		"difficult": "Expert",
		"level": 25,
		"added": "2017/4/17",
		"totalnotes": 609
	},
	{
		"name": "紅蓮の弓矢",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 98.8,
		"playtime": 92.2,
		"BPM": 181,
		"difficult": "Easy",
		"level": 10,
		"added": "2017/6/30",
		"totalnotes": 179
	},
	{
		"name": "紅蓮の弓矢",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 98.8,
		"playtime": 92.2,
		"BPM": 181,
		"difficult": "Normal",
		"level": 14,
		"added": "2017/6/30",
		"totalnotes": 291
	},
	{
		"name": "紅蓮の弓矢",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 98.8,
		"playtime": 92.2,
		"BPM": 181,
		"difficult": "Hard",
		"level": 19,
		"added": "2017/6/30",
		"totalnotes": 482
	},
	{
		"name": "紅蓮の弓矢",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 98.8,
		"playtime": 92.2,
		"BPM": 181,
		"difficult": "Expert",
		"level": 27,
		"added": "2017/6/30",
		"totalnotes": 707
	},
	{
		"name": "The Everlasting Guilty Crown",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 131.9,
		"playtime": 126.5,
		"BPM": 172,
		"difficult": "Easy",
		"level": 8,
		"added": "2017/8/15",
		"totalnotes": 158
	},
	{
		"name": "The Everlasting Guilty Crown",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 131.9,
		"playtime": 126.5,
		"BPM": 172,
		"difficult": "Normal",
		"level": 15,
		"added": "2017/8/15",
		"totalnotes": 340
	},
	{
		"name": "The Everlasting Guilty Crown",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 131.9,
		"playtime": 126.5,
		"BPM": 172,
		"difficult": "Hard",
		"level": 20,
		"added": "2017/8/15",
		"totalnotes": 571
	},
	{
		"name": "The Everlasting Guilty Crown",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 131.9,
		"playtime": 126.5,
		"BPM": 172,
		"difficult": "Expert",
		"level": 26,
		"added": "2017/8/15",
		"totalnotes": 852
	},
	{
		"name": "Red fraction",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 107.3,
		"playtime": 100.6,
		"BPM": 142,
		"difficult": "Easy",
		"level": 8,
		"added": "2017/9/25",
		"totalnotes": 155
	},
	{
		"name": "Red fraction",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 107.3,
		"playtime": 102.3,
		"BPM": 142,
		"difficult": "Normal",
		"level": 14,
		"added": "2017/9/25",
		"totalnotes": 289
	},
	{
		"name": "Red fraction",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 107.3,
		"playtime": 102.3,
		"BPM": 142,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/9/25",
		"totalnotes": 490
	},
	{
		"name": "Red fraction",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 107.3,
		"playtime": 102.3,
		"BPM": 142,
		"difficult": "Expert",
		"level": 26,
		"added": "2017/9/25",
		"totalnotes": 724
	},
	{
		"name": "深愛",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 113.9,
		"playtime": 107.8,
		"BPM": 138,
		"difficult": "Easy",
		"level": 8,
		"added": "2017/12/18",
		"totalnotes": 150
	},
	{
		"name": "深愛",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 113.9,
		"playtime": 107.8,
		"BPM": 138,
		"difficult": "Normal",
		"level": 14,
		"added": "2017/12/18",
		"totalnotes": 262
	},
	{
		"name": "深愛",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 113.9,
		"playtime": 108,
		"BPM": 138,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/12/18",
		"totalnotes": 422
	},
	{
		"name": "深愛",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 113.9,
		"playtime": 108,
		"BPM": 138,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/12/18",
		"totalnotes": 666
	},
	{
		"name": "残酷な天使のテーゼ",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 117.5,
		"playtime": 109.3,
		"BPM": "85-140",
		"difficult": "Easy",
		"level": 8,
		"added": "2018/1/1",
		"totalnotes": 164
	},
	{
		"name": "残酷な天使のテーゼ",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 117.5,
		"playtime": 109.3,
		"BPM": "85-140",
		"difficult": "Normal",
		"level": 13,
		"added": "2018/1/1",
		"totalnotes": 276
	},
	{
		"name": "残酷な天使のテーゼ",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 117.5,
		"playtime": 109.3,
		"BPM": "85-140",
		"difficult": "Hard",
		"level": 18,
		"added": "2018/1/1",
		"totalnotes": 435
	},
	{
		"name": "残酷な天使のテーゼ",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 117.5,
		"playtime": 109.3,
		"BPM": "85-140",
		"difficult": "Expert",
		"level": 25,
		"added": "2018/1/1",
		"totalnotes": 659
	},
	{
		"name": "Shangri-La",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 112,
		"playtime": 105.5,
		"BPM": "120-156",
		"difficult": "Easy",
		"level": 7,
		"added": "2018/2/23",
		"totalnotes": 96
	},
	{
		"name": "Shangri-La",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 112,
		"playtime": 105.5,
		"BPM": "120-156",
		"difficult": "Normal",
		"level": 12,
		"added": "2018/2/23",
		"totalnotes": 157
	},
	{
		"name": "Shangri-La",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 112,
		"playtime": 105.8,
		"BPM": "120-156",
		"difficult": "Hard",
		"level": 16,
		"added": "2018/2/23",
		"totalnotes": 324
	},
	{
		"name": "Shangri-La",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 112,
		"playtime": 105.8,
		"BPM": "120-156",
		"difficult": "Expert",
		"level": 24,
		"added": "2018/2/23",
		"totalnotes": 551
	},
	{
		"name": "This game",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 122.5,
		"playtime": 115.9,
		"BPM": 147,
		"difficult": "Easy",
		"level": 11,
		"added": "2018/3/16",
		"totalnotes": 216
	},
	{
		"name": "This game",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 122.5,
		"playtime": 115.9,
		"BPM": 147,
		"difficult": "Normal",
		"level": 15,
		"added": "2018/3/16",
		"totalnotes": 370
	},
	{
		"name": "This game",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 122.5,
		"playtime": 115.9,
		"BPM": 147,
		"difficult": "Hard",
		"level": 21,
		"added": "2018/3/16",
		"totalnotes": 634
	},
	{
		"name": "This game",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 122.5,
		"playtime": 115.9,
		"BPM": 147,
		"difficult": "Expert",
		"level": 27,
		"added": "2018/3/16",
		"totalnotes": 907
	},
	{
		"name": "Believe in my existence",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 93.4,
		"playtime": 86.9,
		"BPM": 117,
		"difficult": "Easy",
		"level": 10,
		"added": "2018/5/5",
		"totalnotes": 169
	},
	{
		"name": "Believe in my existence",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 93.4,
		"playtime": 87.1,
		"BPM": 117,
		"difficult": "Normal",
		"level": 14,
		"added": "2018/5/5",
		"totalnotes": 261
	},
	{
		"name": "Believe in my existence",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 93.4,
		"playtime": 87.1,
		"BPM": 117,
		"difficult": "Hard",
		"level": 19,
		"added": "2018/5/5",
		"totalnotes": 400
	},
	{
		"name": "Believe in my existence",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 93.4,
		"playtime": 87.1,
		"BPM": 117,
		"difficult": "Expert",
		"level": 26,
		"added": "2018/5/5",
		"totalnotes": 589
	},
	{
		"name": "六兆年と一夜物語",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 103.8,
		"playtime": 94.6,
		"BPM": "85-186",
		"difficult": "Easy",
		"level": 8,
		"added": "2018/6/4",
		"totalnotes": 157
	},
	{
		"name": "六兆年と一夜物語",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 103.8,
		"playtime": 95.1,
		"BPM": "85-186",
		"difficult": "Normal",
		"level": 14,
		"added": "2018/6/4",
		"totalnotes": 286
	},
	{
		"name": "六兆年と一夜物語",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 103.8,
		"playtime": 96.1,
		"BPM": "85-186",
		"difficult": "Hard",
		"level": 21,
		"added": "2018/6/4",
		"totalnotes": 501
	},
	{
		"name": "六兆年と一夜物語",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 103.8,
		"playtime": 96.1,
		"BPM": "85-186",
		"difficult": "Expert",
		"level": 29,
		"added": "2018/6/4",
		"totalnotes": 895
	},
	{
		"name": "キミの記憶",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 130.3,
		"playtime": 121.1,
		"BPM": "114（-97）",
		"difficult": "Easy",
		"level": 6,
		"added": "2018/7/20",
		"totalnotes": 104
	},
	{
		"name": "キミの記憶",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 130.3,
		"playtime": 121.1,
		"BPM": "114（-97）",
		"difficult": "Normal",
		"level": 11,
		"added": "2018/7/20",
		"totalnotes": 180
	},
	{
		"name": "キミの記憶",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 130.3,
		"playtime": 121.7,
		"BPM": "114（-97）",
		"difficult": "Hard",
		"level": 17,
		"added": "2018/7/20",
		"totalnotes": 447
	},
	{
		"name": "キミの記憶",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 130.3,
		"playtime": 121.7,
		"BPM": "114（-97）",
		"difficult": "Expert",
		"level": 25,
		"added": "2018/7/20",
		"totalnotes": 651
	},
	{
		"name": "シャルル",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 97.7,
		"playtime": 92.3,
		"BPM": 145,
		"difficult": "Easy",
		"level": 8,
		"added": "2018/8/5",
		"totalnotes": 140
	},
	{
		"name": "シャルル",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 97.7,
		"playtime": 92.3,
		"BPM": 145,
		"difficult": "Normal",
		"level": 13,
		"added": "2018/8/5",
		"totalnotes": 218
	},
	{
		"name": "シャルル",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 97.7,
		"playtime": 92.6,
		"BPM": 145,
		"difficult": "Hard",
		"level": 18,
		"added": "2018/8/5",
		"totalnotes": 373
	},
	{
		"name": "シャルル",
		"band": "Roselia",
		"type": "Cover",
		"totaltime": 97.7,
		"playtime": 93,
		"BPM": 145,
		"difficult": "Expert",
		"level": 25,
		"added": "2018/8/5",
		"totalnotes": 602
	},
	{
		"name": "シュガーソングとビターステップ",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 110.9,
		"playtime": 104.1,
		"BPM": 132,
		"difficult": "Easy",
		"level": 9,
		"added": "2017/3/16",
		"totalnotes": 131
	},
	{
		"name": "シュガーソングとビターステップ",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 110.9,
		"playtime": 105.2,
		"BPM": 132,
		"difficult": "Normal",
		"level": 14,
		"added": "2017/3/16",
		"totalnotes": 252
	},
	{
		"name": "シュガーソングとビターステップ",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 110.9,
		"playtime": 105.2,
		"BPM": 132,
		"difficult": "Hard",
		"level": 19,
		"added": "2017/3/16",
		"totalnotes": 469
	},
	{
		"name": "シュガーソングとビターステップ",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 110.9,
		"playtime": 105.2,
		"BPM": 132,
		"difficult": "Expert",
		"level": 28,
		"added": "2017/3/16",
		"totalnotes": 811
	},
	{
		"name": "いーあるふぁんくらぶ",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 113,
		"playtime": 102.6,
		"BPM": 145,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/3/16",
		"totalnotes": 108
	},
	{
		"name": "いーあるふぁんくらぶ",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 113,
		"playtime": 106.3,
		"BPM": 145,
		"difficult": "Normal",
		"level": 11,
		"added": "2017/3/16",
		"totalnotes": 189
	},
	{
		"name": "いーあるふぁんくらぶ",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 113,
		"playtime": 106.3,
		"BPM": 145,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/3/16",
		"totalnotes": 394
	},
	{
		"name": "いーあるふぁんくらぶ",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 113,
		"playtime": 106.3,
		"BPM": 145,
		"difficult": "Expert",
		"level": 26,
		"added": "2017/3/16",
		"totalnotes": 652
	},
	{
		"name": "シルエット",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 113.5,
		"playtime": 107.4,
		"BPM": 183,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/4/3",
		"totalnotes": 103
	},
	{
		"name": "シルエット",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 113.5,
		"playtime": 107.4,
		"BPM": 183,
		"difficult": "Normal",
		"level": 14,
		"added": "2017/4/3",
		"totalnotes": 247
	},
	{
		"name": "シルエット",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 113.5,
		"playtime": 107.4,
		"BPM": 183,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/4/3",
		"totalnotes": 427
	},
	{
		"name": "シルエット",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 113.5,
		"playtime": 107.4,
		"BPM": 183,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/4/3",
		"totalnotes": 600
	},
	{
		"name": "ハッピーサマーウェディング",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 110.6,
		"playtime": 102.7,
		"BPM": 128,
		"difficult": "Easy",
		"level": 8,
		"added": "2017/6/10",
		"totalnotes": 179
	},
	{
		"name": "ハッピーサマーウェディング",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 110.6,
		"playtime": 102.7,
		"BPM": 128,
		"difficult": "Normal",
		"level": 14,
		"added": "2017/6/10",
		"totalnotes": 241
	},
	{
		"name": "ハッピーサマーウェディング",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 110.6,
		"playtime": 102.7,
		"BPM": 128,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/6/10",
		"totalnotes": 456
	},
	{
		"name": "ハッピーサマーウェディング",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 110.6,
		"playtime": 102.7,
		"BPM": 128,
		"difficult": "Expert",
		"level": 26,
		"added": "2017/6/10",
		"totalnotes": 768
	},
	{
		"name": "ひまわりの約束",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 130.6,
		"playtime": 122.3,
		"BPM": 79,
		"difficult": "Easy",
		"level": 8,
		"added": "2017/8/12",
		"totalnotes": 125
	},
	{
		"name": "ひまわりの約束",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 130.6,
		"playtime": 122.3,
		"BPM": 79,
		"difficult": "Normal",
		"level": 13,
		"added": "2017/8/12",
		"totalnotes": 244
	},
	{
		"name": "ひまわりの約束",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 130.6,
		"playtime": 122.3,
		"BPM": 79,
		"difficult": "Hard",
		"level": 16,
		"added": "2017/8/12",
		"totalnotes": 394
	},
	{
		"name": "ひまわりの約束",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 130.6,
		"playtime": 122.3,
		"BPM": 79,
		"difficult": "Expert",
		"level": 21,
		"added": "2017/8/12",
		"totalnotes": 481
	},
	{
		"name": "ロメオ",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 127.7,
		"playtime": 108.9,
		"BPM": 140,
		"difficult": "Easy",
		"level": 6,
		"added": "2017/10/20",
		"totalnotes": 103
	},
	{
		"name": "ロメオ",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 127.7,
		"playtime": 109.3,
		"BPM": 140,
		"difficult": "Normal",
		"level": 13,
		"added": "2017/10/20",
		"totalnotes": 259
	},
	{
		"name": "ロメオ",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 127.7,
		"playtime": 109.3,
		"BPM": 140,
		"difficult": "Hard",
		"level": 18,
		"added": "2017/10/20",
		"totalnotes": 474
	},
	{
		"name": "ロメオ",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 127.7,
		"playtime": 109.7,
		"BPM": 140,
		"difficult": "Expert",
		"level": 25,
		"added": "2017/10/20",
		"totalnotes": 620
	},
	{
		"name": "恋は渾沌の隷也",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 107.1,
		"playtime": 99.9,
		"BPM": 158,
		"difficult": "Easy",
		"level": 7,
		"added": "2017/11/21",
		"totalnotes": 134
	},
	{
		"name": "恋は渾沌の隷也",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 107.1,
		"playtime": 99.9,
		"BPM": 158,
		"difficult": "Normal",
		"level": 13,
		"added": "2017/11/21",
		"totalnotes": 262
	},
	{
		"name": "恋は渾沌の隷也",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 107.1,
		"playtime": 99.9,
		"BPM": 158,
		"difficult": "Hard",
		"level": 20,
		"added": "2017/11/21",
		"totalnotes": 641
	},
	{
		"name": "恋は渾沌の隷也",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 107.1,
		"playtime": 99.9,
		"BPM": 158,
		"difficult": "Expert",
		"level": 26,
		"added": "2017/11/21",
		"totalnotes": 815
	},
	{
		"name": "Dragon Night",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 111.3,
		"playtime": 98.7,
		"BPM": 124,
		"difficult": "Easy",
		"level": 6,
		"added": "2017/12/31",
		"totalnotes": 103
	},
	{
		"name": "Dragon Night",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 111.3,
		"playtime": 98.7,
		"BPM": 124,
		"difficult": "Normal",
		"level": 11,
		"added": "2017/12/31",
		"totalnotes": 168
	},
	{
		"name": "Dragon Night",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 111.3,
		"playtime": 98.7,
		"BPM": 124,
		"difficult": "Hard",
		"level": 17,
		"added": "2017/12/31",
		"totalnotes": 335
	},
	{
		"name": "Dragon Night",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 111.3,
		"playtime": 98.7,
		"BPM": 124,
		"difficult": "Expert",
		"level": 23,
		"added": "2017/12/31",
		"totalnotes": 500
	},
	{
		"name": "fantastic dreamer",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 99.8,
		"playtime": 93.6,
		"BPM": "185(-150)",
		"difficult": "Easy",
		"level": 8,
		"added": "2018/2/28",
		"totalnotes": 146
	},
	{
		"name": "fantastic dreamer",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 99.8,
		"playtime": 93.8,
		"BPM": "185(-150)",
		"difficult": "Normal",
		"level": 14,
		"added": "2018/2/28",
		"totalnotes": 235
	},
	{
		"name": "fantastic dreamer",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 99.8,
		"playtime": 94.6,
		"BPM": "185(-150)",
		"difficult": "Hard",
		"level": 18,
		"added": "2018/2/28",
		"totalnotes": 388
	},
	{
		"name": "fantastic dreamer",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 99.8,
		"playtime": 94.6,
		"BPM": "185(-150)",
		"difficult": "Expert",
		"level": 25,
		"added": "2018/2/28",
		"totalnotes": 553
	},
	{
		"name": "ハレ晴レユカイ",
		"band": "ハロー、ハッピーワールド！ + 蘭 + 彩",
		"type": "Cover",
		"totaltime": 139.5,
		"playtime": 134.5,
		"BPM": 172,
		"difficult": "Easy",
		"level": 9,
		"added": "2018/3/10",
		"totalnotes": 235
	},
	{
		"name": "ハレ晴レユカイ",
		"band": "ハロー、ハッピーワールド！ + 蘭 + 彩",
		"type": "Cover",
		"totaltime": 139.5,
		"playtime": 134.5,
		"BPM": 172,
		"difficult": "Normal",
		"level": 14,
		"added": "2018/3/10",
		"totalnotes": 397
	},
	{
		"name": "ハレ晴レユカイ",
		"band": "ハロー、ハッピーワールド！ + 蘭 + 彩",
		"type": "Cover",
		"totaltime": 139.5,
		"playtime": 134.5,
		"BPM": 172,
		"difficult": "Hard",
		"level": 20,
		"added": "2018/3/10",
		"totalnotes": 664
	},
	{
		"name": "ハレ晴レユカイ",
		"band": "ハロー、ハッピーワールド！ + 蘭 + 彩",
		"type": "Cover",
		"totaltime": 139.5,
		"playtime": 134.5,
		"BPM": 172,
		"difficult": "Expert",
		"level": 26,
		"added": "2018/3/10",
		"totalnotes": 972
	},
	{
		"name": "太陽曰く燃えよカオス",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 98.2,
		"playtime": 86.9,
		"BPM": 143,
		"difficult": "Easy",
		"level": 9,
		"added": "2018/5/31",
		"totalnotes": 176
	},
	{
		"name": "太陽曰く燃えよカオス",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 98.2,
		"playtime": 86.9,
		"BPM": 143,
		"difficult": "Normal",
		"level": 15,
		"added": "2018/5/31",
		"totalnotes": 312
	},
	{
		"name": "太陽曰く燃えよカオス",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 98.2,
		"playtime": 86.9,
		"BPM": 143,
		"difficult": "Hard",
		"level": 20,
		"added": "2018/5/31",
		"totalnotes": 459
	},
	{
		"name": "太陽曰く燃えよカオス",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 98.2,
		"playtime": 86.9,
		"BPM": 143,
		"difficult": "Expert",
		"level": 26,
		"added": "2018/5/31",
		"totalnotes": 652
	},
	{
		"name": "GO! GO! MANIAC",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 103.7,
		"playtime": 98.9,
		"BPM": 250,
		"difficult": "Easy",
		"level": 9,
		"added": "2018/8/10",
		"totalnotes": 168
	},
	{
		"name": "GO! GO! MANIAC",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 103.7,
		"playtime": 98.9,
		"BPM": 250,
		"difficult": "Normal",
		"level": 14,
		"added": "2018/8/10",
		"totalnotes": 273
	},
	{
		"name": "GO! GO! MANIAC",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 103.7,
		"playtime": 98.9,
		"BPM": 250,
		"difficult": "Hard",
		"level": 20,
		"added": "2018/8/10",
		"totalnotes": 507
	},
	{
		"name": "GO! GO! MANIAC",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 103.7,
		"playtime": 99.4,
		"BPM": 250,
		"difficult": "Expert",
		"level": 26,
		"added": "2018/8/10",
		"totalnotes": 799
	},
	{
		"name": "エイリアンエイリアン",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 112.9,
		"playtime": 100.9,
		"BPM": 152,
		"difficult": "Easy",
		"level": 10,
		"added": "2018/8/25",
		"totalnotes": 213
	},
	{
		"name": "エイリアンエイリアン",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 112.9,
		"playtime": 100.9,
		"BPM": 152,
		"difficult": "Normal",
		"level": 15,
		"added": "2018/8/25",
		"totalnotes": 354
	},
	{
		"name": "エイリアンエイリアン",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 112.9,
		"playtime": 104,
		"BPM": 152,
		"difficult": "Hard",
		"level": 20,
		"added": "2018/8/25",
		"totalnotes": 486
	},
	{
		"name": "エイリアンエイリアン",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 112.9,
		"playtime": 104,
		"BPM": 152,
		"difficult": "Expert",
		"level": 25,
		"added": "2018/8/25",
		"totalnotes": 641
	},
	{
		"name": "新宝島",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 127.9,
		"playtime": 120.8,
		"BPM": 148,
		"difficult": "Easy",
		"level": 8,
		"added": "2018/9/20",
		"totalnotes": 161
	},
	{
		"name": "新宝島",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 127.9,
		"playtime": 120.8,
		"BPM": 148,
		"difficult": "Normal",
		"level": 13,
		"added": "2018/9/20",
		"totalnotes": 249
	},
	{
		"name": "新宝島",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 127.9,
		"playtime": 120.8,
		"BPM": 148,
		"difficult": "Hard",
		"level": 17,
		"added": "2018/9/20",
		"totalnotes": 412
	},
	{
		"name": "新宝島",
		"band": "ハロー、ハッピーワールド！",
		"type": "Cover",
		"totaltime": 127.9,
		"playtime": 120.8,
		"BPM": 148,
		"difficult": "Expert",
		"level": 24,
		"added": "2018/9/20",
		"totalnotes": 658
	}
]
},{}],2:[function(require,module,exports){
// ------------------------------
// routing
var route = require("riot-route");
},{"riot-route":8}],3:[function(require,module,exports){

// ------------------------------
// tag load
var riot = require("riot");

// input here taglist
require("../riot/main.tag");




riot.mount("*");
},{"../riot/main.tag":5,"riot":9}],4:[function(require,module,exports){
// Main

require("./js/tags");
require("./js/route");
},{"./js/route":2,"./js/tags":3}],5:[function(require,module,exports){
(function (global){
var riot = require('riot');
module.exports = 
riot.tag2('main', '<header></header><div class="sortButtons"><span onclick="{sortClick.bind(this, 0)}">▼標準</span><span onclick="{sortClick.bind(this, 1)}">▼EXレベル順</span></div><div class="songLists"><div class="song type_{s.type}" each="{s in allSongNameList}" data-index="{s.index}" onclick="{showEditForm.bind(this, s)}"><div class="name">{s.name}</div><div class="difficults" if="{s.diffs}"><div class="diff diff_{d.diff} clearState_{d.clearState}" each="{d in s.diffs}"></div></div></div></div><div class="editSongData type_{editSong.type}" if="{editSong}"><div class="songname">{editSong.name}</div><div class="latestupdate" if="{editSong.update}">{editSong.update}</div><div class="tabs tabs_{editSong.diffs.length}"><div class="tab diff_{d.diff}" each="{d,i in editSong.diffs}" data-index="{i}" onclick="{showEditFormDiff.bind(this, editSong, d, i)}">{d.diff}</div></div><div class="scoreform" if="{editSongDiff}"><label for="sdPerf">Perfect(自動入力)</label><input id="sdPerf" onchange="{onChangePerfectCounts}" min="0" riot-value="{editSongDiff.perfect}" readonly type="{\'number\'}"><label for="sdGret">Great</label><input id="sdGret" onchange="{onChangePerfectCounts}" min="0" riot-value="{editSongDiff.great}" type="{\'number\'}"><label for="sdGood">Good</label><input id="sdGood" onchange="{onChangePerfectCounts}" min="0" riot-value="{editSongDiff.good}" type="{\'number\'}"><label for="sdBadd">Bad</label><input id="sdBadd" onchange="{onChangePerfectCounts}" min="0" riot-value="{editSongDiff.bad}" type="{\'number\'}"><label for="sdMiss">Miss</label><input id="sdMiss" onchange="{onChangePerfectCounts}" min="0" riot-value="{editSongDiff.miss}" type="{\'number\'}"><br><label for="isClear">クリア済</label><input id="isClear" type="checkbox" checked="{editSongDiff.is_clear}"><br><label for="isFC">フルコンボ済</label><input id="isFC" type="checkbox" checked="{editSongDiff.is_FC}"><textarea>{editSongDiff.comment}</textarea><button onclick="{updateSongDiffScore.bind(this, editSong, editSongDiff)}">更新</button></div></div><footer></footer>', 'main { max-width: 800px; margin: 0 auto; } main .sortButtons > span,[data-is="main"] .sortButtons > span{ font-size: smaller; margin-right: 4px; cursor: pointer; } main .songLists,[data-is="main"] .songLists{ max-width: 400px; display: inline-block; float: left; } main .song,[data-is="main"] .song{ font-size: small; display: inline-block; padding: .5ex 0; margin: 3px 0; border: 1px solid #CCC; border-radius: 6px; } main .song.type_Original,[data-is="main"] .song.type_Original{ border-color: #08F; } main .song.type_Cover,[data-is="main"] .song.type_Cover{ border-color: #F80; } main .song.type_Original:nth-child(even),[data-is="main"] .song.type_Original:nth-child(even){ background: #F0F0FF; } main .song.type_Cover:nth-child(even),[data-is="main"] .song.type_Cover:nth-child(even){ background: #FFF0F0; } main .song.type_Original:hover,[data-is="main"] .song.type_Original:hover,main .song.type_Original.active,[data-is="main"] .song.type_Original.active{ background-color: #D0EFFF !important; cursor: pointer; } main .song.type_Cover:hover,[data-is="main"] .song.type_Cover:hover,main .song.type_Cover.active,[data-is="main"] .song.type_Cover.active{ background-color: #FFEFC0 !important; cursor: pointer; } main .diff,[data-is="main"] .diff{ width: 14px; height: 14px; display: inline-block; margin: 1px; font-size: 8px; background-size: cover; vertical-align: sub; } main .difficults,[data-is="main"] .difficults{ display: inline-block; width: 85px; } main .name,[data-is="main"] .name{ display: inline-block; width: 300px; margin-right: 10px; text-align: right; } main .editSongData,[data-is="main"] .editSongData{ width: 350px; display: inline-block; float: right; position: fixed; border-radius: 4px; margin: 0.5ex 0 0 2ex; padding: 0.5ex; min-height: 400px; } main .songname,[data-is="main"] .songname{ text-decoration: underline; margin: 0.5ex 0 1.5ex; text-align: center; } main .tabs,[data-is="main"] .tabs{ width: 95%; margin: 0 auto; font-size: smaller; } main .tabs .tab,[data-is="main"] .tabs .tab{ box-sizing: border-box; display: inline-block; text-align: center; cursor: pointer; border-width: 0 0 1px; border-style: solid; color: #666; } main .tabs.tabs_4 .tab,[data-is="main"] .tabs.tabs_4 .tab{ width: 25%; } main .tabs.tabs_5 .tab,[data-is="main"] .tabs.tabs_5 .tab{ width: 20%; } main .editSongData.type_Original .tabs .tab,[data-is="main"] .editSongData.type_Original .tabs .tab{ border-color: #08F; } main .editSongData.type_Cover .tabs .tab,[data-is="main"] .editSongData.type_Cover .tabs .tab{ border-color: #F80; } main .tabs .tab:hover,[data-is="main"] .tabs .tab:hover,main .tabs .tab.active,[data-is="main"] .tabs .tab.active{ border-width: 1px 1px 0 1px !important; color: #000; } main .scoreform,[data-is="main"] .scoreform{ padding: 1.5ex 1ex; margin: -1px 1ex; border-width: 0px 1px 1px; border-style: solid; } main .editSongData.type_Original .scoreform,[data-is="main"] .editSongData.type_Original .scoreform{ border-color: #08F; } main .editSongData.type_Cover .scoreform,[data-is="main"] .editSongData.type_Cover .scoreform{ border-color: #F80; } main .scoreform label,[data-is="main"] .scoreform label{ font-size: small; width: 50%; display: inline-block; text-align: right; margin-right: 5px; } main .scoreform input[type=number],[data-is="main"] .scoreform input[type=number]{ text-align: right; width: 25%; border-width: 0 0 1px; border-color: #444; margin: 2px 0 5px; font-size: larger; font-family: monospace; } main .scoreform textarea,[data-is="main"] .scoreform textarea{ width: 90%; min-width: 90%; max-width: 100%; margin: 2ex auto; min-height: 70px; box-sizing: content-box; display: block; } main .scoreform button,[data-is="main"] .scoreform button{ display: block; margin: 0 auto; width: 25%; cursor: pointer; } main .diff.clearState_0,[data-is="main"] .diff.clearState_0{ background-image: url(./image/clear_0.png); } main .diff.clearState_1,[data-is="main"] .diff.clearState_1{ background-image: url(./image/clear_1.png); } main .diff.clearState_2,[data-is="main"] .diff.clearState_2{ background-image: url(./image/clear_2.png); } main .diff.clearState_3,[data-is="main"] .diff.clearState_3{ background-image: url(./image/clear_3.png); }', '', function(opts) {
    var $ = require("jquery");

    var lenderingUpdate = (savedData, sortType) => {
    	var allSongNameList = global.allSongList
    		.filter(e => e.difficult === "Expert")
    		.map((e,i) => {
    			return {
    				name: e.name,
    				type: e.type,
    				explevel: e.level,
    				index: i,
    				diffs: global.allSongList
    					.filter(e_ => e_.name === e.name)
    					.map(e_ => {
    						var ssd = findSaveDataItem(savedData, e_.name, e_.difficult);
    						return {
    							diff: e_.difficult,
    							totalnotes: e_.totalnotes,
    							clearState: ssd.clearState || 0,
    						};
    					})
    			}
    		});
    	if(sortType == 1){
    		allSongNameList.sort((a,b) => {
    			if(a.explevel < b.explevel) return 1;
    			if(a.explevel > b.explevel) return -1;
    			if(a.index > b.index) return 1;
    			if(a.index < b.index) return -1;
    		})
    	}
    	this.allSongNameList = global.allSongNameList = allSongNameList;
    }

    {

    	global.allSongList = require("../data/songdata.json");
    	var savedData = getSaveData();

    	lenderingUpdate(savedData);
    }

    this.showEditForm = function(song) {
    	$(`.song`).removeClass("active");
    	$(`.song[data-index=${song.index}]`).addClass("active");
    	this.editSong = song;
    	this.editSongDiff = undefined;
    }.bind(this)

    this.showEditFormDiff = function(song, diff, i) {
    	$(`.tab`).removeClass("active");
    	$(`.tab[data-index=${i}]`).addClass("active");

    	var sd = getSaveData();
    	var ssd = findSaveDataItem(sd, song.name, diff.diff);
    	var totalnotes = song.diffs.find(e => e.diff === diff.diff).totalnotes;
    	var df = {
    		diff: diff.diff,
    		perfect: ssd.perfect || totalnotes,
    		great: ssd.great || 0,
    		good: ssd.good || 0,
    		bad: ssd.bad || 0,
    		miss: ssd.miss || 0,
    		comment: ssd.comment || "",
    		is_clear: ssd.clearState >= 1,
    		is_FC: ssd.clearState >= 2,
    	}
    	global.totalnotes = totalnotes;
    	this.editSongDiff = df;
    }.bind(this)

    this.updateSongDiffScore = function(song, diff) {
    	var t = global.totalnotes;
    	var gr = $("#sdGret").val() - 0;
    	var gd = $("#sdGood").val() - 0;
    	var bd = $("#sdBadd").val() - 0;
    	var ms = $("#sdMiss").val() - 0;
    	var pf = t - gr - gd - bd - ms;
    	var cm = $(".scoreform textarea").val();
    	var isC = $("#isClear").prop("checked");
    	var isF = $("#isFC").prop("checked");

    	var missCountZero = (gd + bd + ms <= 0);
    	var simpleAliveCount = (bd * 50 + ms * 100 <= 1000);
    	var clearState = (pf === t) ? 3 : (isF || missCountZero) ? 2 : (isC || simpleAliveCount) ? 1 : 0;

    	var name = song.name;
    	var difficult = diff.diff;
    	var si = {
    		name,
    		difficult,
    		perfect: pf,
    		great: gr,
    		good: gd,
    		bad: bd,
    		miss: ms,
    		comment: cm,
    		clearState
    	}
    	console.log(si);
    	setSaveItem(si, name, difficult);

    	lenderingUpdate(getSaveData(), global.sortType || 0);
    }.bind(this)

    this.onChangePerfectCounts = function() {
    	var t = global.totalnotes;
    	var gr = $("#sdGret").val() - 0;
    	var gd = $("#sdGood").val() - 0;
    	var bd = $("#sdBadd").val() - 0;
    	var ms = $("#sdMiss").val() - 0;
    	var pf = t - gr - gd - bd - ms;
    	$("#sdPerf").val(pf);
    }.bind(this)

    this.sortClick = function(type) {
    	global.sortType = type;
    	lenderingUpdate(savedData, type);
    }.bind(this)

    function getSaveData() {

    	var lst = localStorage.getItem("savedScore");
    	console.log(lst);
    	return JSON.parse(lst || "[]");
    }
    function setSaveData(sd){

    	localStorage.setItem("savedScore", JSON.stringify(sd));
    }

    function setSaveItem(si, songName, songDiff){
    	var sd = getSaveData();
    	var i = findSaveDataIndex(sd, songName, songDiff);
    	if(i >= 0){
    		sd = sd.filter((e,i_) => i_ !== i);
    	}
    	sd.push(si);
    	setSaveData(sd);
    }

    function findSaveDataItem(sd, songName, songDiff){
    	if(!sd){ return {}; }
    	return sd.find(e => e.name === songName && e.difficult === songDiff) || {};
    }
    function findSaveDataIndex(sd, songName, songDiff){
    	if(!sd){ return {}; }
    	var elm = findSaveDataItem(sd, songName, songDiff);
    	return sd.indexOf(elm);
    }
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../data/songdata.json":1,"jquery":6,"riot":9}],6:[function(require,module,exports){
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	var preservedScriptAttributes = {
		type: true,
		src: true,
		noModule: true
	};

	function DOMEval( code, doc, node ) {
		doc = doc || document;

		var i,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {
				if ( node[ i ] ) {
					script[ i ] = node[ i ];
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.3.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && Array.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
        if ( nodeName( elem, "iframe" ) ) {
            return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if ( nodeName( elem, "template" ) ) {
            elem = elem.content || elem;
        }

        return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc, node );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		div.style.position = "absolute";
		scrollboxSizeVal = div.offsetWidth === 36 || "absolute";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a property mapped along what jQuery.cssProps suggests or to
// a vendor prefixed property.
function finalPropName( name ) {
	var ret = jQuery.cssProps[ name ];
	if ( !ret ) {
		ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
	}
	return ret;
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5
		) );
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),
		val = curCSS( elem, dimension, styles ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox;

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}

	// Check for style in case a browser which returns unreliable values
	// for getComputedStyle silently falls back to the reliable elem.style
	valueIsBorderBox = valueIsBorderBox &&
		( support.boxSizingReliable() || val === elem.style[ dimension ] );

	// Fall back to offsetWidth/offsetHeight when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	// Support: Android <=4.1 - 4.3 only
	// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
	if ( val === "auto" ||
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) {

		val = elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];

		// offsetWidth/offsetHeight provide border-box values
		valueIsBorderBox = true;
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),
				isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra && boxModelAdjustment(
					elem,
					dimension,
					extra,
					isBorderBox,
					styles
				);

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && support.scrollboxSize() === styles.position ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = Date.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );

},{}],7:[function(require,module,exports){
;(function(window, undefined) {var observable = function(el) {

  /**
   * Extend the original object or create a new empty one
   * @type { Object }
   */

  el = el || {}

  /**
   * Private variables
   */
  var callbacks = {},
    slice = Array.prototype.slice

  /**
   * Public Api
   */

  // extend the el object adding the observable methods
  Object.defineProperties(el, {
    /**
     * Listen to the given `event` ands
     * execute the `callback` each time an event is triggered.
     * @param  { String } event - event id
     * @param  { Function } fn - callback function
     * @returns { Object } el
     */
    on: {
      value: function(event, fn) {
        if (typeof fn == 'function')
          (callbacks[event] = callbacks[event] || []).push(fn)
        return el
      },
      enumerable: false,
      writable: false,
      configurable: false
    },

    /**
     * Removes the given `event` listeners
     * @param   { String } event - event id
     * @param   { Function } fn - callback function
     * @returns { Object } el
     */
    off: {
      value: function(event, fn) {
        if (event == '*' && !fn) callbacks = {}
        else {
          if (fn) {
            var arr = callbacks[event]
            for (var i = 0, cb; cb = arr && arr[i]; ++i) {
              if (cb == fn) arr.splice(i--, 1)
            }
          } else delete callbacks[event]
        }
        return el
      },
      enumerable: false,
      writable: false,
      configurable: false
    },

    /**
     * Listen to the given `event` and
     * execute the `callback` at most once
     * @param   { String } event - event id
     * @param   { Function } fn - callback function
     * @returns { Object } el
     */
    one: {
      value: function(event, fn) {
        function on() {
          el.off(event, on)
          fn.apply(el, arguments)
        }
        return el.on(event, on)
      },
      enumerable: false,
      writable: false,
      configurable: false
    },

    /**
     * Execute all callback functions that listen to
     * the given `event`
     * @param   { String } event - event id
     * @returns { Object } el
     */
    trigger: {
      value: function(event) {

        // getting the arguments
        var arglen = arguments.length - 1,
          args = new Array(arglen),
          fns,
          fn,
          i

        for (i = 0; i < arglen; i++) {
          args[i] = arguments[i + 1] // skip first argument
        }

        fns = slice.call(callbacks[event] || [], 0)

        for (i = 0; fn = fns[i]; ++i) {
          fn.apply(el, args)
        }

        if (callbacks['*'] && event != '*')
          el.trigger.apply(el, ['*', event].concat(args))

        return el
      },
      enumerable: false,
      writable: false,
      configurable: false
    }
  })

  return el

}
  /* istanbul ignore next */
  // support CommonJS, AMD & browser
  if (typeof exports === 'object')
    module.exports = observable
  else if (typeof define === 'function' && define.amd)
    define(function() { return observable })
  else
    window.observable = observable

})(typeof window != 'undefined' ? window : undefined);
},{}],8:[function(require,module,exports){
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var observable = _interopDefault(require('riot-observable'));

var RE_ORIGIN = /^.+?\/\/+[^/]+/,
  EVENT_LISTENER = 'EventListener',
  REMOVE_EVENT_LISTENER = 'remove' + EVENT_LISTENER,
  ADD_EVENT_LISTENER = 'add' + EVENT_LISTENER,
  HAS_ATTRIBUTE = 'hasAttribute',
  POPSTATE = 'popstate',
  HASHCHANGE = 'hashchange',
  TRIGGER = 'trigger',
  MAX_EMIT_STACK_LEVEL = 3,
  win = typeof window != 'undefined' && window,
  doc = typeof document != 'undefined' && document,
  hist = win && history,
  loc = win && (hist.location || win.location), // see html5-history-api
  prot = Router.prototype, // to minify more
  clickEvent = doc && doc.ontouchstart ? 'touchstart' : 'click',
  central = observable();;;;;;;;;;;;;;;;

var
  started = false,
  routeFound = false,
  debouncedEmit,
  base,
  current,
  parser,
  secondParser,
  emitStack = [],
  emitStackLevel = 0;;;;;;;;;

/**
 * Default parser. You can replace it via router.parser method.
 * @param {string} path - current path (normalized)
 * @returns {array} array
 */
function DEFAULT_PARSER(path) {
  return path.split(/[/?#]/)
}

/**
 * Default parser (second). You can replace it via router.parser method.
 * @param {string} path - current path (normalized)
 * @param {string} filter - filter string (normalized)
 * @returns {array} array
 */
function DEFAULT_SECOND_PARSER(path, filter) {
  var f = filter
    .replace(/\?/g, '\\?')
    .replace(/\*/g, '([^/?#]+?)')
    .replace(/\.\./, '.*');
  var re = new RegExp(("^" + f + "$"));
  var args = path.match(re);

  if (args) { return args.slice(1) }
}

/**
 * Simple/cheap debounce implementation
 * @param   {function} fn - callback
 * @param   {number} delay - delay in seconds
 * @returns {function} debounced function
 */
function debounce(fn, delay) {
  var t;
  return function () {
    clearTimeout(t);
    t = setTimeout(fn, delay);
  }
}

/**
 * Set the window listeners to trigger the routes
 * @param {boolean} autoExec - see route.start
 */
function start(autoExec) {
  debouncedEmit = debounce(emit, 1);
  win[ADD_EVENT_LISTENER](POPSTATE, debouncedEmit);
  win[ADD_EVENT_LISTENER](HASHCHANGE, debouncedEmit);
  doc[ADD_EVENT_LISTENER](clickEvent, click);
  if (autoExec) { emit(true); }
}

/**
 * Router class
 */
function Router() {
  this.$ = [];
  observable(this); // make it observable
  central.on('stop', this.s.bind(this));
  central.on('emit', this.e.bind(this));
}

function normalize(path) {
  return path.replace(/^\/|\/$/, '')
}

function isString(str) {
  return typeof str == 'string'
}

/**
 * Get the part after domain name
 * @param {string} href - fullpath
 * @returns {string} path from root
 */
function getPathFromRoot(href) {
  return (href || loc.href).replace(RE_ORIGIN, '')
}

/**
 * Get the part after base
 * @param {string} href - fullpath
 * @returns {string} path from base
 */
function getPathFromBase(href) {
  return base[0] === '#'
    ? (href || loc.href || '').split(base)[1] || ''
    : (loc ? getPathFromRoot(href) : href || '').replace(base, '')
}

function emit(force) {
  // the stack is needed for redirections
  var isRoot = emitStackLevel === 0;
  if (MAX_EMIT_STACK_LEVEL <= emitStackLevel) { return }

  emitStackLevel++;
  emitStack.push(function() {
    var path = getPathFromBase();
    if (force || path !== current) {
      central[TRIGGER]('emit', path);
      current = path;
    }
  });
  if (isRoot) {
    var first;
    while (first = emitStack.shift()) { first(); } // stack increses within this call
    emitStackLevel = 0;
  }
}

function click(e) {
  if (
    e.which !== 1 // not left click
    || e.metaKey || e.ctrlKey || e.shiftKey // or meta keys
    || e.defaultPrevented // or default prevented
  ) { return }

  var el = e.target;
  while (el && el.nodeName !== 'A') { el = el.parentNode; }

  if (
    !el || el.nodeName !== 'A' // not A tag
    || el[HAS_ATTRIBUTE]('download') // has download attr
    || !el[HAS_ATTRIBUTE]('href') // has no href attr
    || el.target && el.target !== '_self' // another window or frame
    || el.href.indexOf(loc.href.match(RE_ORIGIN)[0]) === -1 // cross origin
  ) { return }

  if (el.href !== loc.href
    && (
      el.href.split('#')[0] === loc.href.split('#')[0] // internal jump
      || base[0] !== '#' && getPathFromRoot(el.href).indexOf(base) !== 0 // outside of base
      || base[0] === '#' && el.href.split(base)[0] !== loc.href.split(base)[0] // outside of #base
      || !go(getPathFromBase(el.href), el.title || doc.title) // route not found
    )) { return }

  e.preventDefault();
}

/**
 * Go to the path
 * @param {string} path - destination path
 * @param {string} title - page title
 * @param {boolean} shouldReplace - use replaceState or pushState
 * @returns {boolean} - route not found flag
 */
function go(path, title, shouldReplace) {
  // Server-side usage: directly execute handlers for the path
  if (!hist) { return central[TRIGGER]('emit', getPathFromBase(path)) }

  path = base + normalize(path);
  title = title || doc.title;
  // browsers ignores the second parameter `title`
  shouldReplace
    ? hist.replaceState(null, title, path)
    : hist.pushState(null, title, path);
  // so we need to set it manually
  doc.title = title;
  routeFound = false;
  emit();
  return routeFound
}

/**
 * Go to path or set action
 * a single string:                go there
 * two strings:                    go there with setting a title
 * two strings and boolean:        replace history with setting a title
 * a single function:              set an action on the default route
 * a string/RegExp and a function: set an action on the route
 * @param {(string|function)} first - path / action / filter
 * @param {(string|RegExp|function)} second - title / action
 * @param {boolean} third - replace flag
 */
prot.m = function(first, second, third) {
  if (isString(first) && (!second || isString(second))) { go(first, second, third || false); }
  else if (second) { this.r(first, second); }
  else { this.r('@', first); }
};

/**
 * Stop routing
 */
prot.s = function() {
  this.off('*');
  this.$ = [];
};

/**
 * Emit
 * @param {string} path - path
 */
prot.e = function(path) {
  this.$.concat('@').some(function(filter) {
    var args = (filter === '@' ? parser : secondParser)(normalize(path), normalize(filter));
    if (typeof args != 'undefined') {
      this[TRIGGER].apply(null, [filter].concat(args));
      return routeFound = true // exit from loop
    }
  }, this);
};

/**
 * Register route
 * @param {string} filter - filter for matching to url
 * @param {function} action - action to register
 */
prot.r = function(filter, action) {
  if (filter !== '@') {
    filter = '/' + normalize(filter);
    this.$.push(filter);
  }
  this.on(filter, action);
};

var mainRouter = new Router();
var route = mainRouter.m.bind(mainRouter);

/**
 * Create a sub router
 * @returns {function} the method of a new Router object
 */
route.create = function() {
  var newSubRouter = new Router();
  // assign sub-router's main method
  var router = newSubRouter.m.bind(newSubRouter);
  // stop only this sub-router
  router.stop = newSubRouter.s.bind(newSubRouter);
  return router
};

/**
 * Set the base of url
 * @param {(str|RegExp)} arg - a new base or '#' or '#!'
 */
route.base = function(arg) {
  base = arg || '#';
  current = getPathFromBase(); // recalculate current path
};

/** Exec routing right now **/
route.exec = function() {
  emit(true);
};

/**
 * Replace the default router to yours
 * @param {function} fn - your parser function
 * @param {function} fn2 - your secondParser function
 */
route.parser = function(fn, fn2) {
  if (!fn && !fn2) {
    // reset parser for testing...
    parser = DEFAULT_PARSER;
    secondParser = DEFAULT_SECOND_PARSER;
  }
  if (fn) { parser = fn; }
  if (fn2) { secondParser = fn2; }
};

/**
 * Helper function to get url query as an object
 * @returns {object} parsed query
 */
route.query = function() {
  var q = {};
  var href = loc.href || current;
  href.replace(/[?&](.+?)=([^&]*)/g, function(_, k, v) { q[k] = v; });
  return q
};

/** Stop routing **/
route.stop = function () {
  if (started) {
    if (win) {
      win[REMOVE_EVENT_LISTENER](POPSTATE, debouncedEmit);
      win[REMOVE_EVENT_LISTENER](HASHCHANGE, debouncedEmit);
      doc[REMOVE_EVENT_LISTENER](clickEvent, click);
    }
    central[TRIGGER]('stop');
    started = false;
  }
};

/**
 * Start routing
 * @param {boolean} autoExec - automatically exec after starting if true
 */
route.start = function (autoExec) {
  if (!started) {
    if (win) {
      if (document.readyState === 'interactive' || document.readyState === 'complete') {
        start(autoExec);
      }
      else {
        document.onreadystatechange = function () {
          if (document.readyState === 'interactive') {
            // the timeout is needed to solve
            // a weird safari bug https://github.com/riot/route/issues/33
            setTimeout(function() { start(autoExec); }, 1);
          }
        };
      }
    }
    started = true;
  }
};

/** Prepare the router **/
route.base();
route.parser();

module.exports = route;

},{"riot-observable":7}],9:[function(require,module,exports){
/* Riot v3.11.1, @license MIT */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.riot = {})));
}(this, (function (exports) { 'use strict';

  /**
   * Shorter and fast way to select a single node in the DOM
   * @param   { String } selector - unique dom selector
   * @param   { Object } ctx - DOM node where the target of our search will is located
   * @returns { Object } dom node found
   */
  function $(selector, ctx) {
    return (ctx || document).querySelector(selector)
  }

  var
    // be aware, internal usage
    // ATTENTION: prefix the global dynamic variables with `__`
    // tags instances cache
    __TAGS_CACHE = [],
    // tags implementation cache
    __TAG_IMPL = {},
    YIELD_TAG = 'yield',

    /**
     * Const
     */
    GLOBAL_MIXIN = '__global_mixin',

    // riot specific prefixes or attributes
    ATTRS_PREFIX = 'riot-',

    // Riot Directives
    REF_DIRECTIVES = ['ref', 'data-ref'],
    IS_DIRECTIVE = 'data-is',
    CONDITIONAL_DIRECTIVE = 'if',
    LOOP_DIRECTIVE = 'each',
    LOOP_NO_REORDER_DIRECTIVE = 'no-reorder',
    SHOW_DIRECTIVE = 'show',
    HIDE_DIRECTIVE = 'hide',
    KEY_DIRECTIVE = 'key',
    RIOT_EVENTS_KEY = '__riot-events__',

    // for typeof == '' comparisons
    T_STRING = 'string',
    T_OBJECT = 'object',
    T_UNDEF  = 'undefined',
    T_FUNCTION = 'function',

    XLINK_NS = 'http://www.w3.org/1999/xlink',
    SVG_NS = 'http://www.w3.org/2000/svg',
    XLINK_REGEX = /^xlink:(\w+)/,

    WIN = typeof window === T_UNDEF ? /* istanbul ignore next */ undefined : window,

    // special native tags that cannot be treated like the others
    RE_SPECIAL_TAGS = /^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?|opt(?:ion|group))$/,
    RE_SPECIAL_TAGS_NO_OPTION = /^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?)$/,
    RE_EVENTS_PREFIX = /^on/,
    RE_HTML_ATTRS = /([-\w]+) ?= ?(?:"([^"]*)|'([^']*)|({[^}]*}))/g,
    // some DOM attributes must be normalized
    CASE_SENSITIVE_ATTRIBUTES = {
      'viewbox': 'viewBox',
      'preserveaspectratio': 'preserveAspectRatio'
    },
    /**
     * Matches boolean HTML attributes in the riot tag definition.
     * With a long list like this, a regex is faster than `[].indexOf` in most browsers.
     * @const {RegExp}
     * @see [attributes.md](https://github.com/riot/compiler/blob/dev/doc/attributes.md)
     */
    RE_BOOL_ATTRS = /^(?:disabled|checked|readonly|required|allowfullscreen|auto(?:focus|play)|compact|controls|default|formnovalidate|hidden|ismap|itemscope|loop|multiple|muted|no(?:resize|shade|validate|wrap)?|open|reversed|seamless|selected|sortable|truespeed|typemustmatch)$/,
    // version# for IE 8-11, 0 for others
    IE_VERSION = (WIN && WIN.document || /* istanbul ignore next */ {}).documentMode | 0;

  /**
   * Create a generic DOM node
   * @param   { String } name - name of the DOM node we want to create
   * @returns { Object } DOM node just created
   */
  function makeElement(name) {
    return name === 'svg' ? document.createElementNS(SVG_NS, name) : document.createElement(name)
  }

  /**
   * Set any DOM attribute
   * @param { Object } dom - DOM node we want to update
   * @param { String } name - name of the property we want to set
   * @param { String } val - value of the property we want to set
   */
  function setAttribute(dom, name, val) {
    var xlink = XLINK_REGEX.exec(name);
    if (xlink && xlink[1])
      { dom.setAttributeNS(XLINK_NS, xlink[1], val); }
    else
      { dom.setAttribute(name, val); }
  }

  var styleNode;
  // Create cache and shortcut to the correct property
  var cssTextProp;
  var byName = {};
  var needsInject = false;

  // skip the following code on the server
  if (WIN) {
    styleNode = ((function () {
      // create a new style element with the correct type
      var newNode = makeElement('style');
      // replace any user node or insert the new one into the head
      var userNode = $('style[type=riot]');

      setAttribute(newNode, 'type', 'text/css');
      /* istanbul ignore next */
      if (userNode) {
        if (userNode.id) { newNode.id = userNode.id; }
        userNode.parentNode.replaceChild(newNode, userNode);
      } else { document.head.appendChild(newNode); }

      return newNode
    }))();
    cssTextProp = styleNode.styleSheet;
  }

  /**
   * Object that will be used to inject and manage the css of every tag instance
   */
  var styleManager = {
    styleNode: styleNode,
    /**
     * Save a tag style to be later injected into DOM
     * @param { String } css - css string
     * @param { String } name - if it's passed we will map the css to a tagname
     */
    add: function add(css, name) {
      byName[name] = css;
      needsInject = true;
    },
    /**
     * Inject all previously saved tag styles into DOM
     * innerHTML seems slow: http://jsperf.com/riot-insert-style
     */
    inject: function inject() {
      if (!WIN || !needsInject) { return }
      needsInject = false;
      var style = Object.keys(byName)
        .map(function (k) { return byName[k]; })
        .join('\n');
      /* istanbul ignore next */
      if (cssTextProp) { cssTextProp.cssText = style; }
      else { styleNode.innerHTML = style; }
    },

    /**
     * Remove a tag style of injected DOM later.
     * @param {String} name a registered tagname
     */
    remove: function remove(name) {
      delete byName[name];
      needsInject = true;
    }
  }

  /**
   * The riot template engine
   * @version v3.0.8
   */

  /* istanbul ignore next */
  var skipRegex = (function () { //eslint-disable-line no-unused-vars

    var beforeReChars = '[{(,;:?=|&!^~>%*/';

    var beforeReWords = [
      'case',
      'default',
      'do',
      'else',
      'in',
      'instanceof',
      'prefix',
      'return',
      'typeof',
      'void',
      'yield'
    ];

    var wordsLastChar = beforeReWords.reduce(function (s, w) {
      return s + w.slice(-1)
    }, '');

    var RE_REGEX = /^\/(?=[^*>/])[^[/\\]*(?:(?:\\.|\[(?:\\.|[^\]\\]*)*\])[^[\\/]*)*?\/[gimuy]*/;
    var RE_VN_CHAR = /[$\w]/;

    function prev (code, pos) {
      while (--pos >= 0 && /\s/.test(code[pos])){ }
      return pos
    }

    function _skipRegex (code, start) {

      var re = /.*/g;
      var pos = re.lastIndex = start++;
      var match = re.exec(code)[0].match(RE_REGEX);

      if (match) {
        var next = pos + match[0].length;

        pos = prev(code, pos);
        var c = code[pos];

        if (pos < 0 || ~beforeReChars.indexOf(c)) {
          return next
        }

        if (c === '.') {

          if (code[pos - 1] === '.') {
            start = next;
          }

        } else if (c === '+' || c === '-') {

          if (code[--pos] !== c ||
              (pos = prev(code, pos)) < 0 ||
              !RE_VN_CHAR.test(code[pos])) {
            start = next;
          }

        } else if (~wordsLastChar.indexOf(c)) {

          var end = pos + 1;

          while (--pos >= 0 && RE_VN_CHAR.test(code[pos])){ }
          if (~beforeReWords.indexOf(code.slice(pos + 1, end))) {
            start = next;
          }
        }
      }

      return start
    }

    return _skipRegex

  })();

  /**
   * riot.util.brackets
   *
   * - `brackets    ` - Returns a string or regex based on its parameter
   * - `brackets.set` - Change the current riot brackets
   *
   * @module
   */

  /* global riot */

  /* istanbul ignore next */
  var brackets = (function (UNDEF) {

    var
      REGLOB = 'g',

      R_MLCOMMS = /\/\*[^*]*\*+(?:[^*\/][^*]*\*+)*\//g,

      R_STRINGS = /"[^"\\]*(?:\\[\S\s][^"\\]*)*"|'[^'\\]*(?:\\[\S\s][^'\\]*)*'|`[^`\\]*(?:\\[\S\s][^`\\]*)*`/g,

      S_QBLOCKS = R_STRINGS.source + '|' +
        /(?:\breturn\s+|(?:[$\w\)\]]|\+\+|--)\s*(\/)(?![*\/]))/.source + '|' +
        /\/(?=[^*\/])[^[\/\\]*(?:(?:\[(?:\\.|[^\]\\]*)*\]|\\.)[^[\/\\]*)*?([^<]\/)[gim]*/.source,

      UNSUPPORTED = RegExp('[\\' + 'x00-\\x1F<>a-zA-Z0-9\'",;\\\\]'),

      NEED_ESCAPE = /(?=[[\]()*+?.^$|])/g,

      S_QBLOCK2 = R_STRINGS.source + '|' + /(\/)(?![*\/])/.source,

      FINDBRACES = {
        '(': RegExp('([()])|'   + S_QBLOCK2, REGLOB),
        '[': RegExp('([[\\]])|' + S_QBLOCK2, REGLOB),
        '{': RegExp('([{}])|'   + S_QBLOCK2, REGLOB)
      },

      DEFAULT = '{ }';

    var _pairs = [
      '{', '}',
      '{', '}',
      /{[^}]*}/,
      /\\([{}])/g,
      /\\({)|{/g,
      RegExp('\\\\(})|([[({])|(})|' + S_QBLOCK2, REGLOB),
      DEFAULT,
      /^\s*{\^?\s*([$\w]+)(?:\s*,\s*(\S+))?\s+in\s+(\S.*)\s*}/,
      /(^|[^\\]){=[\S\s]*?}/
    ];

    var
      cachedBrackets = UNDEF,
      _regex,
      _cache = [],
      _settings;

    function _loopback (re) { return re }

    function _rewrite (re, bp) {
      if (!bp) { bp = _cache; }
      return new RegExp(
        re.source.replace(/{/g, bp[2]).replace(/}/g, bp[3]), re.global ? REGLOB : ''
      )
    }

    function _create (pair) {
      if (pair === DEFAULT) { return _pairs }

      var arr = pair.split(' ');

      if (arr.length !== 2 || UNSUPPORTED.test(pair)) {
        throw new Error('Unsupported brackets "' + pair + '"')
      }
      arr = arr.concat(pair.replace(NEED_ESCAPE, '\\').split(' '));

      arr[4] = _rewrite(arr[1].length > 1 ? /{[\S\s]*?}/ : _pairs[4], arr);
      arr[5] = _rewrite(pair.length > 3 ? /\\({|})/g : _pairs[5], arr);
      arr[6] = _rewrite(_pairs[6], arr);
      arr[7] = RegExp('\\\\(' + arr[3] + ')|([[({])|(' + arr[3] + ')|' + S_QBLOCK2, REGLOB);
      arr[8] = pair;
      return arr
    }

    function _brackets (reOrIdx) {
      return reOrIdx instanceof RegExp ? _regex(reOrIdx) : _cache[reOrIdx]
    }

    _brackets.split = function split (str, tmpl, _bp) {
      // istanbul ignore next: _bp is for the compiler
      if (!_bp) { _bp = _cache; }

      var
        parts = [],
        match,
        isexpr,
        start,
        pos,
        re = _bp[6];

      var qblocks = [];
      var prevStr = '';
      var mark, lastIndex;

      isexpr = start = re.lastIndex = 0;

      while ((match = re.exec(str))) {

        lastIndex = re.lastIndex;
        pos = match.index;

        if (isexpr) {

          if (match[2]) {

            var ch = match[2];
            var rech = FINDBRACES[ch];
            var ix = 1;

            rech.lastIndex = lastIndex;
            while ((match = rech.exec(str))) {
              if (match[1]) {
                if (match[1] === ch) { ++ix; }
                else if (!--ix) { break }
              } else {
                rech.lastIndex = pushQBlock(match.index, rech.lastIndex, match[2]);
              }
            }
            re.lastIndex = ix ? str.length : rech.lastIndex;
            continue
          }

          if (!match[3]) {
            re.lastIndex = pushQBlock(pos, lastIndex, match[4]);
            continue
          }
        }

        if (!match[1]) {
          unescapeStr(str.slice(start, pos));
          start = re.lastIndex;
          re = _bp[6 + (isexpr ^= 1)];
          re.lastIndex = start;
        }
      }

      if (str && start < str.length) {
        unescapeStr(str.slice(start));
      }

      parts.qblocks = qblocks;

      return parts

      function unescapeStr (s) {
        if (prevStr) {
          s = prevStr + s;
          prevStr = '';
        }
        if (tmpl || isexpr) {
          parts.push(s && s.replace(_bp[5], '$1'));
        } else {
          parts.push(s);
        }
      }

      function pushQBlock(_pos, _lastIndex, slash) { //eslint-disable-line
        if (slash) {
          _lastIndex = skipRegex(str, _pos);
        }

        if (tmpl && _lastIndex > _pos + 2) {
          mark = '\u2057' + qblocks.length + '~';
          qblocks.push(str.slice(_pos, _lastIndex));
          prevStr += str.slice(start, _pos) + mark;
          start = _lastIndex;
        }
        return _lastIndex
      }
    };

    _brackets.hasExpr = function hasExpr (str) {
      return _cache[4].test(str)
    };

    _brackets.loopKeys = function loopKeys (expr) {
      var m = expr.match(_cache[9]);

      return m
        ? { key: m[1], pos: m[2], val: _cache[0] + m[3].trim() + _cache[1] }
        : { val: expr.trim() }
    };

    _brackets.array = function array (pair) {
      return pair ? _create(pair) : _cache
    };

    function _reset (pair) {
      if ((pair || (pair = DEFAULT)) !== _cache[8]) {
        _cache = _create(pair);
        _regex = pair === DEFAULT ? _loopback : _rewrite;
        _cache[9] = _regex(_pairs[9]);
      }
      cachedBrackets = pair;
    }

    function _setSettings (o) {
      var b;

      o = o || {};
      b = o.brackets;
      Object.defineProperty(o, 'brackets', {
        set: _reset,
        get: function () { return cachedBrackets },
        enumerable: true
      });
      _settings = o;
      _reset(b);
    }

    Object.defineProperty(_brackets, 'settings', {
      set: _setSettings,
      get: function () { return _settings }
    });

    /* istanbul ignore next: in the browser riot is always in the scope */
    _brackets.settings = typeof riot !== 'undefined' && riot.settings || {};
    _brackets.set = _reset;
    _brackets.skipRegex = skipRegex;

    _brackets.R_STRINGS = R_STRINGS;
    _brackets.R_MLCOMMS = R_MLCOMMS;
    _brackets.S_QBLOCKS = S_QBLOCKS;
    _brackets.S_QBLOCK2 = S_QBLOCK2;

    return _brackets

  })();

  /**
   * @module tmpl
   *
   * tmpl          - Root function, returns the template value, render with data
   * tmpl.hasExpr  - Test the existence of a expression inside a string
   * tmpl.loopKeys - Get the keys for an 'each' loop (used by `_each`)
   */

  /* istanbul ignore next */
  var tmpl = (function () {

    var _cache = {};

    function _tmpl (str, data) {
      if (!str) { return str }

      return (_cache[str] || (_cache[str] = _create(str))).call(
        data, _logErr.bind({
          data: data,
          tmpl: str
        })
      )
    }

    _tmpl.hasExpr = brackets.hasExpr;

    _tmpl.loopKeys = brackets.loopKeys;

    // istanbul ignore next
    _tmpl.clearCache = function () { _cache = {}; };

    _tmpl.errorHandler = null;

    function _logErr (err, ctx) {

      err.riotData = {
        tagName: ctx && ctx.__ && ctx.__.tagName,
        _riot_id: ctx && ctx._riot_id  //eslint-disable-line camelcase
      };

      if (_tmpl.errorHandler) { _tmpl.errorHandler(err); }
      else if (
        typeof console !== 'undefined' &&
        typeof console.error === 'function'
      ) {
        console.error(err.message);
        console.log('<%s> %s', err.riotData.tagName || 'Unknown tag', this.tmpl); // eslint-disable-line
        console.log(this.data); // eslint-disable-line
      }
    }

    function _create (str) {
      var expr = _getTmpl(str);

      if (expr.slice(0, 11) !== 'try{return ') { expr = 'return ' + expr; }

      return new Function('E', expr + ';')    // eslint-disable-line no-new-func
    }

    var RE_DQUOTE = /\u2057/g;
    var RE_QBMARK = /\u2057(\d+)~/g;

    function _getTmpl (str) {
      var parts = brackets.split(str.replace(RE_DQUOTE, '"'), 1);
      var qstr = parts.qblocks;
      var expr;

      if (parts.length > 2 || parts[0]) {
        var i, j, list = [];

        for (i = j = 0; i < parts.length; ++i) {

          expr = parts[i];

          if (expr && (expr = i & 1

              ? _parseExpr(expr, 1, qstr)

              : '"' + expr
                  .replace(/\\/g, '\\\\')
                  .replace(/\r\n?|\n/g, '\\n')
                  .replace(/"/g, '\\"') +
                '"'

            )) { list[j++] = expr; }

        }

        expr = j < 2 ? list[0]
             : '[' + list.join(',') + '].join("")';

      } else {

        expr = _parseExpr(parts[1], 0, qstr);
      }

      if (qstr.length) {
        expr = expr.replace(RE_QBMARK, function (_, pos) {
          return qstr[pos]
            .replace(/\r/g, '\\r')
            .replace(/\n/g, '\\n')
        });
      }
      return expr
    }

    var RE_CSNAME = /^(?:(-?[_A-Za-z\xA0-\xFF][-\w\xA0-\xFF]*)|\u2057(\d+)~):/;
    var
      RE_BREND = {
        '(': /[()]/g,
        '[': /[[\]]/g,
        '{': /[{}]/g
      };

    function _parseExpr (expr, asText, qstr) {

      expr = expr
        .replace(/\s+/g, ' ').trim()
        .replace(/\ ?([[\({},?\.:])\ ?/g, '$1');

      if (expr) {
        var
          list = [],
          cnt = 0,
          match;

        while (expr &&
              (match = expr.match(RE_CSNAME)) &&
              !match.index
          ) {
          var
            key,
            jsb,
            re = /,|([[{(])|$/g;

          expr = RegExp.rightContext;
          key  = match[2] ? qstr[match[2]].slice(1, -1).trim().replace(/\s+/g, ' ') : match[1];

          while (jsb = (match = re.exec(expr))[1]) { skipBraces(jsb, re); }

          jsb  = expr.slice(0, match.index);
          expr = RegExp.rightContext;

          list[cnt++] = _wrapExpr(jsb, 1, key);
        }

        expr = !cnt ? _wrapExpr(expr, asText)
             : cnt > 1 ? '[' + list.join(',') + '].join(" ").trim()' : list[0];
      }
      return expr

      function skipBraces (ch, re) {
        var
          mm,
          lv = 1,
          ir = RE_BREND[ch];

        ir.lastIndex = re.lastIndex;
        while (mm = ir.exec(expr)) {
          if (mm[0] === ch) { ++lv; }
          else if (!--lv) { break }
        }
        re.lastIndex = lv ? expr.length : ir.lastIndex;
      }
    }

    // istanbul ignore next: not both
    var // eslint-disable-next-line max-len
      JS_CONTEXT = '"in this?this:' + (typeof window !== 'object' ? 'global' : 'window') + ').',
      JS_VARNAME = /[,{][\$\w]+(?=:)|(^ *|[^$\w\.{])(?!(?:typeof|true|false|null|undefined|in|instanceof|is(?:Finite|NaN)|void|NaN|new|Date|RegExp|Math)(?![$\w]))([$_A-Za-z][$\w]*)/g,
      JS_NOPROPS = /^(?=(\.[$\w]+))\1(?:[^.[(]|$)/;

    function _wrapExpr (expr, asText, key) {
      var tb;

      expr = expr.replace(JS_VARNAME, function (match, p, mvar, pos, s) {
        if (mvar) {
          pos = tb ? 0 : pos + match.length;

          if (mvar !== 'this' && mvar !== 'global' && mvar !== 'window') {
            match = p + '("' + mvar + JS_CONTEXT + mvar;
            if (pos) { tb = (s = s[pos]) === '.' || s === '(' || s === '['; }
          } else if (pos) {
            tb = !JS_NOPROPS.test(s.slice(pos));
          }
        }
        return match
      });

      if (tb) {
        expr = 'try{return ' + expr + '}catch(e){E(e,this)}';
      }

      if (key) {

        expr = (tb
            ? 'function(){' + expr + '}.call(this)' : '(' + expr + ')'
          ) + '?"' + key + '":""';

      } else if (asText) {

        expr = 'function(v){' + (tb
            ? expr.replace('return ', 'v=') : 'v=(' + expr + ')'
          ) + ';return v||v===0?v:""}.call(this)';
      }

      return expr
    }

    _tmpl.version = brackets.version = 'v3.0.8';

    return _tmpl

  })();

  /* istanbul ignore next */
  var observable = function(el) {

    /**
     * Extend the original object or create a new empty one
     * @type { Object }
     */

    el = el || {};

    /**
     * Private variables
     */
    var callbacks = {},
      slice = Array.prototype.slice;

    /**
     * Public Api
     */

    // extend the el object adding the observable methods
    Object.defineProperties(el, {
      /**
       * Listen to the given `event` ands
       * execute the `callback` each time an event is triggered.
       * @param  { String } event - event id
       * @param  { Function } fn - callback function
       * @returns { Object } el
       */
      on: {
        value: function(event, fn) {
          if (typeof fn == 'function')
            { (callbacks[event] = callbacks[event] || []).push(fn); }
          return el
        },
        enumerable: false,
        writable: false,
        configurable: false
      },

      /**
       * Removes the given `event` listeners
       * @param   { String } event - event id
       * @param   { Function } fn - callback function
       * @returns { Object } el
       */
      off: {
        value: function(event, fn) {
          if (event == '*' && !fn) { callbacks = {}; }
          else {
            if (fn) {
              var arr = callbacks[event];
              for (var i = 0, cb; cb = arr && arr[i]; ++i) {
                if (cb == fn) { arr.splice(i--, 1); }
              }
            } else { delete callbacks[event]; }
          }
          return el
        },
        enumerable: false,
        writable: false,
        configurable: false
      },

      /**
       * Listen to the given `event` and
       * execute the `callback` at most once
       * @param   { String } event - event id
       * @param   { Function } fn - callback function
       * @returns { Object } el
       */
      one: {
        value: function(event, fn) {
          function on() {
            el.off(event, on);
            fn.apply(el, arguments);
          }
          return el.on(event, on)
        },
        enumerable: false,
        writable: false,
        configurable: false
      },

      /**
       * Execute all callback functions that listen to
       * the given `event`
       * @param   { String } event - event id
       * @returns { Object } el
       */
      trigger: {
        value: function(event) {
          var arguments$1 = arguments;


          // getting the arguments
          var arglen = arguments.length - 1,
            args = new Array(arglen),
            fns,
            fn,
            i;

          for (i = 0; i < arglen; i++) {
            args[i] = arguments$1[i + 1]; // skip first argument
          }

          fns = slice.call(callbacks[event] || [], 0);

          for (i = 0; fn = fns[i]; ++i) {
            fn.apply(el, args);
          }

          if (callbacks['*'] && event != '*')
            { el.trigger.apply(el, ['*', event].concat(args)); }

          return el
        },
        enumerable: false,
        writable: false,
        configurable: false
      }
    });

    return el

  };

  /**
   * Short alias for Object.getOwnPropertyDescriptor
   */
  function getPropDescriptor (o, k) {
    return Object.getOwnPropertyDescriptor(o, k)
  }

  /**
   * Check if passed argument is undefined
   * @param   { * } value -
   * @returns { Boolean } -
   */
  function isUndefined(value) {
    return typeof value === T_UNDEF
  }

  /**
   * Check whether object's property could be overridden
   * @param   { Object }  obj - source object
   * @param   { String }  key - object property
   * @returns { Boolean } true if writable
   */
  function isWritable(obj, key) {
    var descriptor = getPropDescriptor(obj, key);
    return isUndefined(obj[key]) || descriptor && descriptor.writable
  }

  /**
   * Extend any object with other properties
   * @param   { Object } src - source object
   * @returns { Object } the resulting extended object
   *
   * var obj = { foo: 'baz' }
   * extend(obj, {bar: 'bar', foo: 'bar'})
   * console.log(obj) => {bar: 'bar', foo: 'bar'}
   *
   */
  function extend(src) {
    var obj;
    var i = 1;
    var args = arguments;
    var l = args.length;

    for (; i < l; i++) {
      if (obj = args[i]) {
        for (var key in obj) {
          // check if this property of the source object could be overridden
          if (isWritable(src, key))
            { src[key] = obj[key]; }
        }
      }
    }
    return src
  }

  /**
   * Alias for Object.create
   */
  function create(src) {
    return Object.create(src)
  }

  var settings = extend(create(brackets.settings), {
    skipAnonymousTags: true,
    // handle the auto updates on any DOM event
    autoUpdate: true
  })

  /**
   * Shorter and fast way to select multiple nodes in the DOM
   * @param   { String } selector - DOM selector
   * @param   { Object } ctx - DOM node where the targets of our search will is located
   * @returns { Object } dom nodes found
   */
  function $$(selector, ctx) {
    return [].slice.call((ctx || document).querySelectorAll(selector))
  }

  /**
   * Create a document text node
   * @returns { Object } create a text node to use as placeholder
   */
  function createDOMPlaceholder() {
    return document.createTextNode('')
  }

  /**
   * Toggle the visibility of any DOM node
   * @param   { Object }  dom - DOM node we want to hide
   * @param   { Boolean } show - do we want to show it?
   */

  function toggleVisibility(dom, show) {
    dom.style.display = show ? '' : 'none';
    dom.hidden = show ? false : true;
  }

  /**
   * Get the value of any DOM attribute on a node
   * @param   { Object } dom - DOM node we want to parse
   * @param   { String } name - name of the attribute we want to get
   * @returns { String | undefined } name of the node attribute whether it exists
   */
  function getAttribute(dom, name) {
    return dom.getAttribute(name)
  }

  /**
   * Remove any DOM attribute from a node
   * @param   { Object } dom - DOM node we want to update
   * @param   { String } name - name of the property we want to remove
   */
  function removeAttribute(dom, name) {
    dom.removeAttribute(name);
  }

  /**
   * Set the inner html of any DOM node SVGs included
   * @param { Object } container - DOM node where we'll inject new html
   * @param { String } html - html to inject
   * @param { Boolean } isSvg - svg tags should be treated a bit differently
   */
  /* istanbul ignore next */
  function setInnerHTML(container, html, isSvg) {
    // innerHTML is not supported on svg tags so we neet to treat them differently
    if (isSvg) {
      var node = container.ownerDocument.importNode(
        new DOMParser()
          .parseFromString(("<svg xmlns=\"" + SVG_NS + "\">" + html + "</svg>"), 'application/xml')
          .documentElement,
        true
      );

      container.appendChild(node);
    } else {
      container.innerHTML = html;
    }
  }

  /**
   * Minimize risk: only zero or one _space_ between attr & value
   * @param   { String }   html - html string we want to parse
   * @param   { Function } fn - callback function to apply on any attribute found
   */
  function walkAttributes(html, fn) {
    if (!html) { return }
    var m;
    while (m = RE_HTML_ATTRS.exec(html))
      { fn(m[1].toLowerCase(), m[2] || m[3] || m[4]); }
  }

  /**
   * Create a document fragment
   * @returns { Object } document fragment
   */
  function createFragment() {
    return document.createDocumentFragment()
  }

  /**
   * Insert safely a tag to fix #1962 #1649
   * @param   { HTMLElement } root - children container
   * @param   { HTMLElement } curr - node to insert
   * @param   { HTMLElement } next - node that should preceed the current node inserted
   */
  function safeInsert(root, curr, next) {
    root.insertBefore(curr, next.parentNode && next);
  }

  /**
   * Convert a style object to a string
   * @param   { Object } style - style object we need to parse
   * @returns { String } resulting css string
   * @example
   * styleObjectToString({ color: 'red', height: '10px'}) // => 'color: red; height: 10px'
   */
  function styleObjectToString(style) {
    return Object.keys(style).reduce(function (acc, prop) {
      return (acc + " " + prop + ": " + (style[prop]) + ";")
    }, '')
  }

  /**
   * Walk down recursively all the children tags starting dom node
   * @param   { Object }   dom - starting node where we will start the recursion
   * @param   { Function } fn - callback to transform the child node just found
   * @param   { Object }   context - fn can optionally return an object, which is passed to children
   */
  function walkNodes(dom, fn, context) {
    if (dom) {
      var res = fn(dom, context);
      var next;
      // stop the recursion
      if (res === false) { return }

      dom = dom.firstChild;

      while (dom) {
        next = dom.nextSibling;
        walkNodes(dom, fn, res);
        dom = next;
      }
    }
  }



  var dom = /*#__PURE__*/Object.freeze({
    $$: $$,
    $: $,
    createDOMPlaceholder: createDOMPlaceholder,
    mkEl: makeElement,
    setAttr: setAttribute,
    toggleVisibility: toggleVisibility,
    getAttr: getAttribute,
    remAttr: removeAttribute,
    setInnerHTML: setInnerHTML,
    walkAttrs: walkAttributes,
    createFrag: createFragment,
    safeInsert: safeInsert,
    styleObjectToString: styleObjectToString,
    walkNodes: walkNodes
  });

  /**
   * Check against the null and undefined values
   * @param   { * }  value -
   * @returns {Boolean} -
   */
  function isNil(value) {
    return isUndefined(value) || value === null
  }

  /**
   * Check if passed argument is empty. Different from falsy, because we dont consider 0 or false to be blank
   * @param { * } value -
   * @returns { Boolean } -
   */
  function isBlank(value) {
    return isNil(value) || value === ''
  }

  /**
   * Check if passed argument is a function
   * @param   { * } value -
   * @returns { Boolean } -
   */
  function isFunction(value) {
    return typeof value === T_FUNCTION
  }

  /**
   * Check if passed argument is an object, exclude null
   * NOTE: use isObject(x) && !isArray(x) to excludes arrays.
   * @param   { * } value -
   * @returns { Boolean } -
   */
  function isObject(value) {
    return value && typeof value === T_OBJECT // typeof null is 'object'
  }

  /**
   * Check if a DOM node is an svg tag or part of an svg
   * @param   { HTMLElement }  el - node we want to test
   * @returns {Boolean} true if it's an svg node
   */
  function isSvg(el) {
    var owner = el.ownerSVGElement;
    return !!owner || owner === null
  }

  /**
   * Check if passed argument is a kind of array
   * @param   { * } value -
   * @returns { Boolean } -
   */
  function isArray(value) {
    return Array.isArray(value) || value instanceof Array
  }

  /**
   * Check if the passed argument is a boolean attribute
   * @param   { String } value -
   * @returns { Boolean } -
   */
  function isBoolAttr(value) {
    return RE_BOOL_ATTRS.test(value)
  }

  /**
   * Check if passed argument is a string
   * @param   { * } value -
   * @returns { Boolean } -
   */
  function isString(value) {
    return typeof value === T_STRING
  }



  var check = /*#__PURE__*/Object.freeze({
    isBlank: isBlank,
    isFunction: isFunction,
    isObject: isObject,
    isSvg: isSvg,
    isWritable: isWritable,
    isArray: isArray,
    isBoolAttr: isBoolAttr,
    isNil: isNil,
    isString: isString,
    isUndefined: isUndefined
  });

  /**
   * Check whether an array contains an item
   * @param   { Array } array - target array
   * @param   { * } item - item to test
   * @returns { Boolean } -
   */
  function contains(array, item) {
    return array.indexOf(item) !== -1
  }

  /**
   * Specialized function for looping an array-like collection with `each={}`
   * @param   { Array } list - collection of items
   * @param   {Function} fn - callback function
   * @returns { Array } the array looped
   */
  function each(list, fn) {
    var len = list ? list.length : 0;
    var i = 0;
    for (; i < len; i++) { fn(list[i], i); }
    return list
  }

  /**
   * Faster String startsWith alternative
   * @param   { String } str - source string
   * @param   { String } value - test string
   * @returns { Boolean } -
   */
  function startsWith(str, value) {
    return str.slice(0, value.length) === value
  }

  /**
   * Function returning always a unique identifier
   * @returns { Number } - number from 0...n
   */
  var uid = (function uid() {
    var i = -1;
    return function () { return ++i; }
  })()

  /**
   * Helper function to set an immutable property
   * @param   { Object } el - object where the new property will be set
   * @param   { String } key - object key where the new property will be stored
   * @param   { * } value - value of the new property
   * @param   { Object } options - set the propery overriding the default options
   * @returns { Object } - the initial object
   */
  function define(el, key, value, options) {
    Object.defineProperty(el, key, extend({
      value: value,
      enumerable: false,
      writable: false,
      configurable: true
    }, options));
    return el
  }

  /**
   * Convert a string containing dashes to camel case
   * @param   { String } str - input string
   * @returns { String } my-string -> myString
   */
  function toCamel(str) {
    return str.replace(/-(\w)/g, function (_, c) { return c.toUpperCase(); })
  }

  /**
   * Warn a message via console
   * @param   {String} message - warning message
   */
  function warn(message) {
    if (console && console.warn) { console.warn(message); }
  }



  var misc = /*#__PURE__*/Object.freeze({
    contains: contains,
    each: each,
    getPropDescriptor: getPropDescriptor,
    startsWith: startsWith,
    uid: uid,
    defineProperty: define,
    objectCreate: create,
    extend: extend,
    toCamel: toCamel,
    warn: warn
  });

  /**
   * Set the property of an object for a given key. If something already
   * exists there, then it becomes an array containing both the old and new value.
   * @param { Object } obj - object on which to set the property
   * @param { String } key - property name
   * @param { Object } value - the value of the property to be set
   * @param { Boolean } ensureArray - ensure that the property remains an array
   * @param { Number } index - add the new item in a certain array position
   */
  function arrayishAdd(obj, key, value, ensureArray, index) {
    var dest = obj[key];
    var isArr = isArray(dest);
    var hasIndex = !isUndefined(index);

    if (dest && dest === value) { return }

    // if the key was never set, set it once
    if (!dest && ensureArray) { obj[key] = [value]; }
    else if (!dest) { obj[key] = value; }
    // if it was an array and not yet set
    else {
      if (isArr) {
        var oldIndex = dest.indexOf(value);
        // this item never changed its position
        if (oldIndex === index) { return }
        // remove the item from its old position
        if (oldIndex !== -1) { dest.splice(oldIndex, 1); }
        // move or add the item
        if (hasIndex) {
          dest.splice(index, 0, value);
        } else {
          dest.push(value);
        }
      } else { obj[key] = [dest, value]; }
    }
  }

  /**
   * Detect the tag implementation by a DOM node
   * @param   { Object } dom - DOM node we need to parse to get its tag implementation
   * @returns { Object } it returns an object containing the implementation of a custom tag (template and boot function)
   */
  function get(dom) {
    return dom.tagName && __TAG_IMPL[getAttribute(dom, IS_DIRECTIVE) ||
      getAttribute(dom, IS_DIRECTIVE) || dom.tagName.toLowerCase()]
  }

  /**
   * Get the tag name of any DOM node
   * @param   { Object } dom - DOM node we want to parse
   * @param   { Boolean } skipDataIs - hack to ignore the data-is attribute when attaching to parent
   * @returns { String } name to identify this dom node in riot
   */
  function getName(dom, skipDataIs) {
    var child = get(dom);
    var namedTag = !skipDataIs && getAttribute(dom, IS_DIRECTIVE);
    return namedTag && !tmpl.hasExpr(namedTag) ?
      namedTag : child ? child.name : dom.tagName.toLowerCase()
  }

  /**
   * Return a temporary context containing also the parent properties
   * @this Tag
   * @param { Tag } - temporary tag context containing all the parent properties
   */
  function inheritParentProps() {
    if (this.parent) { return extend(create(this), this.parent) }
    return this
  }

  /*
    Includes hacks needed for the Internet Explorer version 9 and below
    See: http://kangax.github.io/compat-table/es5/#ie8
         http://codeplanet.io/dropping-ie8/
  */

  var
    reHasYield  = /<yield\b/i,
    reYieldAll  = /<yield\s*(?:\/>|>([\S\s]*?)<\/yield\s*>|>)/ig,
    reYieldSrc  = /<yield\s+to=['"]([^'">]*)['"]\s*>([\S\s]*?)<\/yield\s*>/ig,
    reYieldDest = /<yield\s+from=['"]?([-\w]+)['"]?\s*(?:\/>|>([\S\s]*?)<\/yield\s*>)/ig,
    rootEls = { tr: 'tbody', th: 'tr', td: 'tr', col: 'colgroup' },
    tblTags = IE_VERSION && IE_VERSION < 10 ? RE_SPECIAL_TAGS : RE_SPECIAL_TAGS_NO_OPTION,
    GENERIC = 'div',
    SVG = 'svg';


  /*
    Creates the root element for table or select child elements:
    tr/th/td/thead/tfoot/tbody/caption/col/colgroup/option/optgroup
  */
  function specialTags(el, tmpl, tagName) {

    var
      select = tagName[0] === 'o',
      parent = select ? 'select>' : 'table>';

    // trim() is important here, this ensures we don't have artifacts,
    // so we can check if we have only one element inside the parent
    el.innerHTML = '<' + parent + tmpl.trim() + '</' + parent;
    parent = el.firstChild;

    // returns the immediate parent if tr/th/td/col is the only element, if not
    // returns the whole tree, as this can include additional elements
    /* istanbul ignore next */
    if (select) {
      parent.selectedIndex = -1;  // for IE9, compatible w/current riot behavior
    } else {
      // avoids insertion of cointainer inside container (ex: tbody inside tbody)
      var tname = rootEls[tagName];
      if (tname && parent.childElementCount === 1) { parent = $(tname, parent); }
    }
    return parent
  }

  /*
    Replace the yield tag from any tag template with the innerHTML of the
    original tag in the page
  */
  function replaceYield(tmpl, html) {
    // do nothing if no yield
    if (!reHasYield.test(tmpl)) { return tmpl }

    // be careful with #1343 - string on the source having `$1`
    var src = {};

    html = html && html.replace(reYieldSrc, function (_, ref, text) {
      src[ref] = src[ref] || text;   // preserve first definition
      return ''
    }).trim();

    return tmpl
      .replace(reYieldDest, function (_, ref, def) {  // yield with from - to attrs
        return src[ref] || def || ''
      })
      .replace(reYieldAll, function (_, def) {        // yield without any "from"
        return html || def || ''
      })
  }

  /**
   * Creates a DOM element to wrap the given content. Normally an `DIV`, but can be
   * also a `TABLE`, `SELECT`, `TBODY`, `TR`, or `COLGROUP` element.
   *
   * @param   { String } tmpl  - The template coming from the custom tag definition
   * @param   { String } html - HTML content that comes from the DOM element where you
   *           will mount the tag, mostly the original tag in the page
   * @param   { Boolean } isSvg - true if the root node is an svg
   * @returns { HTMLElement } DOM element with _tmpl_ merged through `YIELD` with the _html_.
   */
  function mkdom(tmpl, html, isSvg) {
    var match   = tmpl && tmpl.match(/^\s*<([-\w]+)/);
    var  tagName = match && match[1].toLowerCase();
    var el = makeElement(isSvg ? SVG : GENERIC);

    // replace all the yield tags with the tag inner html
    tmpl = replaceYield(tmpl, html);

    /* istanbul ignore next */
    if (tblTags.test(tagName))
      { el = specialTags(el, tmpl, tagName); }
    else
      { setInnerHTML(el, tmpl, isSvg); }

    return el
  }

  var EVENT_ATTR_RE = /^on/;

  /**
   * True if the event attribute starts with 'on'
   * @param   { String } attribute - event attribute
   * @returns { Boolean }
   */
  function isEventAttribute(attribute) {
    return EVENT_ATTR_RE.test(attribute)
  }

  /**
   * Loop backward all the parents tree to detect the first custom parent tag
   * @param   { Object } tag - a Tag instance
   * @returns { Object } the instance of the first custom parent tag found
   */
  function getImmediateCustomParent(tag) {
    var ptag = tag;
    while (ptag.__.isAnonymous) {
      if (!ptag.parent) { break }
      ptag = ptag.parent;
    }
    return ptag
  }

  /**
   * Trigger DOM events
   * @param   { HTMLElement } dom - dom element target of the event
   * @param   { Function } handler - user function
   * @param   { Object } e - event object
   */
  function handleEvent(dom, handler, e) {
    var ptag = this.__.parent;
    var item = this.__.item;

    if (!item)
      { while (ptag && !item) {
        item = ptag.__.item;
        ptag = ptag.__.parent;
      } }

    // override the event properties
    /* istanbul ignore next */
    if (isWritable(e, 'currentTarget')) { e.currentTarget = dom; }
    /* istanbul ignore next */
    if (isWritable(e, 'target')) { e.target = e.srcElement; }
    /* istanbul ignore next */
    if (isWritable(e, 'which')) { e.which = e.charCode || e.keyCode; }

    e.item = item;

    handler.call(this, e);

    // avoid auto updates
    if (!settings.autoUpdate) { return }

    if (!e.preventUpdate) {
      var p = getImmediateCustomParent(this);
      // fixes #2083
      if (p.isMounted) { p.update(); }
    }
  }

  /**
   * Attach an event to a DOM node
   * @param { String } name - event name
   * @param { Function } handler - event callback
   * @param { Object } dom - dom node
   * @param { Tag } tag - tag instance
   */
  function setEventHandler(name, handler, dom, tag) {
    var eventName;
    var cb = handleEvent.bind(tag, dom, handler);

    // avoid to bind twice the same event
    // possible fix for #2332
    dom[name] = null;

    // normalize event name
    eventName = name.replace(RE_EVENTS_PREFIX, '');

    // cache the listener into the listeners array
    if (!contains(tag.__.listeners, dom)) { tag.__.listeners.push(dom); }
    if (!dom[RIOT_EVENTS_KEY]) { dom[RIOT_EVENTS_KEY] = {}; }
    if (dom[RIOT_EVENTS_KEY][name]) { dom.removeEventListener(eventName, dom[RIOT_EVENTS_KEY][name]); }

    dom[RIOT_EVENTS_KEY][name] = cb;
    dom.addEventListener(eventName, cb, false);
  }

  /**
   * Create a new child tag including it correctly into its parent
   * @param   { Object } child - child tag implementation
   * @param   { Object } opts - tag options containing the DOM node where the tag will be mounted
   * @param   { String } innerHTML - inner html of the child node
   * @param   { Object } parent - instance of the parent tag including the child custom tag
   * @returns { Object } instance of the new child tag just created
   */
  function initChild(child, opts, innerHTML, parent) {
    var tag = createTag(child, opts, innerHTML);
    var tagName = opts.tagName || getName(opts.root, true);
    var ptag = getImmediateCustomParent(parent);
    // fix for the parent attribute in the looped elements
    define(tag, 'parent', ptag);
    // store the real parent tag
    // in some cases this could be different from the custom parent tag
    // for example in nested loops
    tag.__.parent = parent;

    // add this tag to the custom parent tag
    arrayishAdd(ptag.tags, tagName, tag);

    // and also to the real parent tag
    if (ptag !== parent)
      { arrayishAdd(parent.tags, tagName, tag); }

    return tag
  }

  /**
   * Removes an item from an object at a given key. If the key points to an array,
   * then the item is just removed from the array.
   * @param { Object } obj - object on which to remove the property
   * @param { String } key - property name
   * @param { Object } value - the value of the property to be removed
   * @param { Boolean } ensureArray - ensure that the property remains an array
  */
  function arrayishRemove(obj, key, value, ensureArray) {
    if (isArray(obj[key])) {
      var index = obj[key].indexOf(value);
      if (index !== -1) { obj[key].splice(index, 1); }
      if (!obj[key].length) { delete obj[key]; }
      else if (obj[key].length === 1 && !ensureArray) { obj[key] = obj[key][0]; }
    } else if (obj[key] === value)
      { delete obj[key]; } // otherwise just delete the key
  }

  /**
   * Adds the elements for a virtual tag
   * @this Tag
   * @param { Node } src - the node that will do the inserting or appending
   * @param { Tag } target - only if inserting, insert before this tag's first child
   */
  function makeVirtual(src, target) {
    var this$1 = this;

    var head = createDOMPlaceholder();
    var tail = createDOMPlaceholder();
    var frag = createFragment();
    var sib;
    var el;

    this.root.insertBefore(head, this.root.firstChild);
    this.root.appendChild(tail);

    this.__.head = el = head;
    this.__.tail = tail;

    while (el) {
      sib = el.nextSibling;
      frag.appendChild(el);
      this$1.__.virts.push(el); // hold for unmounting
      el = sib;
    }

    if (target)
      { src.insertBefore(frag, target.__.head); }
    else
      { src.appendChild(frag); }
  }

  /**
   * makes a tag virtual and replaces a reference in the dom
   * @this Tag
   * @param { tag } the tag to make virtual
   * @param { ref } the dom reference location
   */
  function makeReplaceVirtual(tag, ref) {
    var frag = createFragment();
    makeVirtual.call(tag, frag);
    ref.parentNode.replaceChild(frag, ref);
  }

  /**
   * Update dynamically created data-is tags with changing expressions
   * @param { Object } expr - expression tag and expression info
   * @param { Tag }    parent - parent for tag creation
   * @param { String } tagName - tag implementation we want to use
   */
  function updateDataIs(expr, parent, tagName) {
    var tag = expr.tag || expr.dom._tag;
    var ref;

    var ref$1 = tag ? tag.__ : {};
    var head = ref$1.head;
    var isVirtual = expr.dom.tagName === 'VIRTUAL';

    if (tag && expr.tagName === tagName) {
      tag.update();
      return
    }

    // sync _parent to accommodate changing tagnames
    if (tag) {
      // need placeholder before unmount
      if(isVirtual) {
        ref = createDOMPlaceholder();
        head.parentNode.insertBefore(ref, head);
      }

      tag.unmount(true);
    }

    // unable to get the tag name
    if (!isString(tagName)) { return }

    expr.impl = __TAG_IMPL[tagName];

    // unknown implementation
    if (!expr.impl) { return }

    expr.tag = tag = initChild(
      expr.impl, {
        root: expr.dom,
        parent: parent,
        tagName: tagName
      },
      expr.dom.innerHTML,
      parent
    );

    each(expr.attrs, function (a) { return setAttribute(tag.root, a.name, a.value); });
    expr.tagName = tagName;
    tag.mount();

    // root exist first time, after use placeholder
    if (isVirtual) { makeReplaceVirtual(tag, ref || tag.root); }

    // parent is the placeholder tag, not the dynamic tag so clean up
    parent.__.onUnmount = function () {
      var delName = tag.opts.dataIs;
      arrayishRemove(tag.parent.tags, delName, tag);
      arrayishRemove(tag.__.parent.tags, delName, tag);
      tag.unmount();
    };
  }

  /**
   * Nomalize any attribute removing the "riot-" prefix
   * @param   { String } attrName - original attribute name
   * @returns { String } valid html attribute name
   */
  function normalizeAttrName(attrName) {
    if (!attrName) { return null }
    attrName = attrName.replace(ATTRS_PREFIX, '');
    if (CASE_SENSITIVE_ATTRIBUTES[attrName]) { attrName = CASE_SENSITIVE_ATTRIBUTES[attrName]; }
    return attrName
  }

  /**
   * Update on single tag expression
   * @this Tag
   * @param { Object } expr - expression logic
   * @returns { undefined }
   */
  function updateExpression(expr) {
    if (this.root && getAttribute(this.root,'virtualized')) { return }

    var dom = expr.dom;
    // remove the riot- prefix
    var attrName = normalizeAttrName(expr.attr);
    var isToggle = contains([SHOW_DIRECTIVE, HIDE_DIRECTIVE], attrName);
    var isVirtual = expr.root && expr.root.tagName === 'VIRTUAL';
    var ref = this.__;
    var isAnonymous = ref.isAnonymous;
    var parent = dom && (expr.parent || dom.parentNode);
    // detect the style attributes
    var isStyleAttr = attrName === 'style';
    var isClassAttr = attrName === 'class';

    var value;

    // if it's a tag we could totally skip the rest
    if (expr._riot_id) {
      if (expr.__.wasCreated) {
        expr.update();
      // if it hasn't been mounted yet, do that now.
      } else {
        expr.mount();
        if (isVirtual) {
          makeReplaceVirtual(expr, expr.root);
        }
      }
      return
    }

    // if this expression has the update method it means it can handle the DOM changes by itself
    if (expr.update) { return expr.update() }

    var context = isToggle && !isAnonymous ? inheritParentProps.call(this) : this;

    // ...it seems to be a simple expression so we try to calculate its value
    value = tmpl(expr.expr, context);

    var hasValue = !isBlank(value);
    var isObj = isObject(value);

    // convert the style/class objects to strings
    if (isObj) {
      if (isClassAttr) {
        value = tmpl(JSON.stringify(value), this);
      } else if (isStyleAttr) {
        value = styleObjectToString(value);
      }
    }

    // remove original attribute
    if (expr.attr && (!expr.wasParsedOnce || !hasValue || value === false)) {
      // remove either riot-* attributes or just the attribute name
      removeAttribute(dom, getAttribute(dom, expr.attr) ? expr.attr : attrName);
    }

    // for the boolean attributes we don't need the value
    // we can convert it to checked=true to checked=checked
    if (expr.bool) { value = value ? attrName : false; }
    if (expr.isRtag) { return updateDataIs(expr, this, value) }
    if (expr.wasParsedOnce && expr.value === value) { return }

    // update the expression value
    expr.value = value;
    expr.wasParsedOnce = true;

    // if the value is an object (and it's not a style or class attribute) we can not do much more with it
    if (isObj && !isClassAttr && !isStyleAttr && !isToggle) { return }
    // avoid to render undefined/null values
    if (!hasValue) { value = ''; }

    // textarea and text nodes have no attribute name
    if (!attrName) {
      // about #815 w/o replace: the browser converts the value to a string,
      // the comparison by "==" does too, but not in the server
      value += '';
      // test for parent avoids error with invalid assignment to nodeValue
      if (parent) {
        // cache the parent node because somehow it will become null on IE
        // on the next iteration
        expr.parent = parent;
        if (parent.tagName === 'TEXTAREA') {
          parent.value = value;                    // #1113
          if (!IE_VERSION) { dom.nodeValue = value; }  // #1625 IE throws here, nodeValue
        }                                         // will be available on 'updated'
        else { dom.nodeValue = value; }
      }
      return
    }

    switch (true) {
    // handle events binding
    case isFunction(value):
      if (isEventAttribute(attrName)) {
        setEventHandler(attrName, value, dom, this);
      }
      break
    // show / hide
    case isToggle:
      toggleVisibility(dom, attrName === HIDE_DIRECTIVE ? !value : value);
      break
    // handle attributes
    default:
      if (expr.bool) {
        dom[attrName] = value;
      }

      if (attrName === 'value' && dom.value !== value) {
        dom.value = value;
      } else if (hasValue && value !== false) {
        setAttribute(dom, attrName, value);
      }

      // make sure that in case of style changes
      // the element stays hidden
      if (isStyleAttr && dom.hidden) { toggleVisibility(dom, false); }
    }
  }

  /**
   * Update all the expressions in a Tag instance
   * @this Tag
   * @param { Array } expressions - expression that must be re evaluated
   */
  function update(expressions) {
    each(expressions, updateExpression.bind(this));
  }

  /**
   * We need to update opts for this tag. That requires updating the expressions
   * in any attributes on the tag, and then copying the result onto opts.
   * @this Tag
   * @param   {Boolean} isLoop - is it a loop tag?
   * @param   { Tag }  parent - parent tag node
   * @param   { Boolean }  isAnonymous - is it a tag without any impl? (a tag not registered)
   * @param   { Object }  opts - tag options
   * @param   { Array }  instAttrs - tag attributes array
   */
  function updateOpts(isLoop, parent, isAnonymous, opts, instAttrs) {
    // isAnonymous `each` tags treat `dom` and `root` differently. In this case
    // (and only this case) we don't need to do updateOpts, because the regular parse
    // will update those attrs. Plus, isAnonymous tags don't need opts anyway
    if (isLoop && isAnonymous) { return }
    var ctx = isLoop ? inheritParentProps.call(this) : parent || this;

    each(instAttrs, function (attr) {
      if (attr.expr) { updateExpression.call(ctx, attr.expr); }
      // normalize the attribute names
      opts[toCamel(attr.name).replace(ATTRS_PREFIX, '')] = attr.expr ? attr.expr.value : attr.value;
    });
  }

  /**
   * Update the tag expressions and options
   * @param { Tag } tag - tag object
   * @param { * } data - data we want to use to extend the tag properties
   * @param { Array } expressions - component expressions array
   * @returns { Tag } the current tag instance
   */
  function componentUpdate(tag, data, expressions) {
    var __ = tag.__;
    var nextOpts = {};
    var canTrigger = tag.isMounted && !__.skipAnonymous;

    // inherit properties from the parent tag
    if (__.isAnonymous && __.parent) { extend(tag, __.parent); }
    extend(tag, data);

    updateOpts.apply(tag, [__.isLoop, __.parent, __.isAnonymous, nextOpts, __.instAttrs]);

    if (
      canTrigger &&
      tag.isMounted &&
      isFunction(tag.shouldUpdate) && !tag.shouldUpdate(data, nextOpts)
    ) {
      return tag
    }

    extend(tag.opts, nextOpts);

    if (canTrigger) { tag.trigger('update', data); }
    update.call(tag, expressions);
    if (canTrigger) { tag.trigger('updated'); }

    return tag
  }

  /**
   * Get selectors for tags
   * @param   { Array } tags - tag names to select
   * @returns { String } selector
   */
  function query(tags) {
    // select all tags
    if (!tags) {
      var keys = Object.keys(__TAG_IMPL);
      return keys + query(keys)
    }

    return tags
      .filter(function (t) { return !/[^-\w]/.test(t); })
      .reduce(function (list, t) {
        var name = t.trim().toLowerCase();
        return list + ",[" + IS_DIRECTIVE + "=\"" + name + "\"]"
      }, '')
  }

  /**
   * Another way to create a riot tag a bit more es6 friendly
   * @param { HTMLElement } el - tag DOM selector or DOM node/s
   * @param { Object } opts - tag logic
   * @returns { Tag } new riot tag instance
   */
  function Tag(el, opts) {
    // get the tag properties from the class constructor
    var ref = this;
    var name = ref.name;
    var tmpl = ref.tmpl;
    var css = ref.css;
    var attrs = ref.attrs;
    var onCreate = ref.onCreate;
    // register a new tag and cache the class prototype
    if (!__TAG_IMPL[name]) {
      tag(name, tmpl, css, attrs, onCreate);
      // cache the class constructor
      __TAG_IMPL[name].class = this.constructor;
    }

    // mount the tag using the class instance
    mount$1(el, name, opts, this);
    // inject the component css
    if (css) { styleManager.inject(); }

    return this
  }

  /**
   * Create a new riot tag implementation
   * @param   { String }   name - name/id of the new riot tag
   * @param   { String }   tmpl - tag template
   * @param   { String }   css - custom tag css
   * @param   { String }   attrs - root tag attributes
   * @param   { Function } fn - user function
   * @returns { String } name/id of the tag just created
   */
  function tag(name, tmpl, css, attrs, fn) {
    if (isFunction(attrs)) {
      fn = attrs;

      if (/^[\w-]+\s?=/.test(css)) {
        attrs = css;
        css = '';
      } else
        { attrs = ''; }
    }

    if (css) {
      if (isFunction(css))
        { fn = css; }
      else
        { styleManager.add(css, name); }
    }

    name = name.toLowerCase();
    __TAG_IMPL[name] = { name: name, tmpl: tmpl, attrs: attrs, fn: fn };

    return name
  }

  /**
   * Create a new riot tag implementation (for use by the compiler)
   * @param   { String }   name - name/id of the new riot tag
   * @param   { String }   tmpl - tag template
   * @param   { String }   css - custom tag css
   * @param   { String }   attrs - root tag attributes
   * @param   { Function } fn - user function
   * @returns { String } name/id of the tag just created
   */
  function tag2(name, tmpl, css, attrs, fn) {
    if (css) { styleManager.add(css, name); }

    __TAG_IMPL[name] = { name: name, tmpl: tmpl, attrs: attrs, fn: fn };

    return name
  }

  /**
   * Mount a tag using a specific tag implementation
   * @param   { * } selector - tag DOM selector or DOM node/s
   * @param   { String } tagName - tag implementation name
   * @param   { Object } opts - tag logic
   * @returns { Array } new tags instances
   */
  function mount(selector, tagName, opts) {
    var tags = [];
    var elem, allTags;

    function pushTagsTo(root) {
      if (root.tagName) {
        var riotTag = getAttribute(root, IS_DIRECTIVE), tag;

        // have tagName? force riot-tag to be the same
        if (tagName && riotTag !== tagName) {
          riotTag = tagName;
          setAttribute(root, IS_DIRECTIVE, tagName);
        }

        tag = mount$1(root, riotTag || root.tagName.toLowerCase(), opts);

        if (tag)
          { tags.push(tag); }
      } else if (root.length)
        { each(root, pushTagsTo); } // assume nodeList
    }

    // inject styles into DOM
    styleManager.inject();

    if (isObject(tagName)) {
      opts = tagName;
      tagName = 0;
    }

    // crawl the DOM to find the tag
    if (isString(selector)) {
      selector = selector === '*' ?
        // select all registered tags
        // & tags found with the riot-tag attribute set
        allTags = query() :
        // or just the ones named like the selector
        selector + query(selector.split(/, */));

      // make sure to pass always a selector
      // to the querySelectorAll function
      elem = selector ? $$(selector) : [];
    }
    else
      // probably you have passed already a tag or a NodeList
      { elem = selector; }

    // select all the registered and mount them inside their root elements
    if (tagName === '*') {
      // get all custom tags
      tagName = allTags || query();
      // if the root els it's just a single tag
      if (elem.tagName)
        { elem = $$(tagName, elem); }
      else {
        // select all the children for all the different root elements
        var nodeList = [];

        each(elem, function (_el) { return nodeList.push($$(tagName, _el)); });

        elem = nodeList;
      }
      // get rid of the tagName
      tagName = 0;
    }

    pushTagsTo(elem);

    return tags
  }

  // Create a mixin that could be globally shared across all the tags
  var mixins = {};
  var globals = mixins[GLOBAL_MIXIN] = {};
  var mixins_id = 0;

  /**
   * Create/Return a mixin by its name
   * @param   { String }  name - mixin name (global mixin if object)
   * @param   { Object }  mix - mixin logic
   * @param   { Boolean } g - is global?
   * @returns { Object }  the mixin logic
   */
  function mixin(name, mix, g) {
    // Unnamed global
    if (isObject(name)) {
      mixin(("__" + (mixins_id++) + "__"), name, true);
      return
    }

    var store = g ? globals : mixins;

    // Getter
    if (!mix) {
      if (isUndefined(store[name]))
        { throw new Error(("Unregistered mixin: " + name)) }

      return store[name]
    }

    // Setter
    store[name] = isFunction(mix) ?
      extend(mix.prototype, store[name] || {}) && mix :
      extend(store[name] || {}, mix);
  }

  /**
   * Update all the tags instances created
   * @returns { Array } all the tags instances
   */
  function update$1() {
    return each(__TAGS_CACHE, function (tag) { return tag.update(); })
  }

  function unregister(name) {
    styleManager.remove(name);
    return delete __TAG_IMPL[name]
  }

  var version = 'v3.11.1';

  var core = /*#__PURE__*/Object.freeze({
    Tag: Tag,
    tag: tag,
    tag2: tag2,
    mount: mount,
    mixin: mixin,
    update: update$1,
    unregister: unregister,
    version: version
  });

  /**
   * Add a mixin to this tag
   * @returns { Tag } the current tag instance
   */
  function componentMixin(tag$$1) {
    var mixins = [], len = arguments.length - 1;
    while ( len-- > 0 ) mixins[ len ] = arguments[ len + 1 ];

    each(mixins, function (mix) {
      var instance;
      var obj;
      var props = [];

      // properties blacklisted and will not be bound to the tag instance
      var propsBlacklist = ['init', '__proto__'];

      mix = isString(mix) ? mixin(mix) : mix;

      // check if the mixin is a function
      if (isFunction(mix)) {
        // create the new mixin instance
        instance = new mix();
      } else { instance = mix; }

      var proto = Object.getPrototypeOf(instance);

      // build multilevel prototype inheritance chain property list
      do { props = props.concat(Object.getOwnPropertyNames(obj || instance)); }
      while (obj = Object.getPrototypeOf(obj || instance))

      // loop the keys in the function prototype or the all object keys
      each(props, function (key) {
        // bind methods to tag
        // allow mixins to override other properties/parent mixins
        if (!contains(propsBlacklist, key)) {
          // check for getters/setters
          var descriptor = getPropDescriptor(instance, key) || getPropDescriptor(proto, key);
          var hasGetterSetter = descriptor && (descriptor.get || descriptor.set);

          // apply method only if it does not already exist on the instance
          if (!tag$$1.hasOwnProperty(key) && hasGetterSetter) {
            Object.defineProperty(tag$$1, key, descriptor);
          } else {
            tag$$1[key] = isFunction(instance[key]) ?
              instance[key].bind(tag$$1) :
              instance[key];
          }
        }
      });

      // init method will be called automatically
      if (instance.init)
        { instance.init.bind(tag$$1)(tag$$1.opts); }
    });

    return tag$$1
  }

  /**
   * Move the position of a custom tag in its parent tag
   * @this Tag
   * @param   { String } tagName - key where the tag was stored
   * @param   { Number } newPos - index where the new tag will be stored
   */
  function moveChild(tagName, newPos) {
    var parent = this.parent;
    var tags;
    // no parent no move
    if (!parent) { return }

    tags = parent.tags[tagName];

    if (isArray(tags))
      { tags.splice(newPos, 0, tags.splice(tags.indexOf(this), 1)[0]); }
    else { arrayishAdd(parent.tags, tagName, this); }
  }

  /**
   * Move virtual tag and all child nodes
   * @this Tag
   * @param { Node } src  - the node that will do the inserting
   * @param { Tag } target - insert before this tag's first child
   */
  function moveVirtual(src, target) {
    var this$1 = this;

    var el = this.__.head;
    var sib;
    var frag = createFragment();

    while (el) {
      sib = el.nextSibling;
      frag.appendChild(el);
      el = sib;
      if (el === this$1.__.tail) {
        frag.appendChild(el);
        src.insertBefore(frag, target.__.head);
        break
      }
    }
  }

  /**
   * Convert the item looped into an object used to extend the child tag properties
   * @param   { Object } expr - object containing the keys used to extend the children tags
   * @param   { * } key - value to assign to the new object returned
   * @param   { * } val - value containing the position of the item in the array
   * @returns { Object } - new object containing the values of the original item
   *
   * The variables 'key' and 'val' are arbitrary.
   * They depend on the collection type looped (Array, Object)
   * and on the expression used on the each tag
   *
   */
  function mkitem(expr, key, val) {
    var item = {};
    item[expr.key] = key;
    if (expr.pos) { item[expr.pos] = val; }
    return item
  }

  /**
   * Unmount the redundant tags
   * @param   { Array } items - array containing the current items to loop
   * @param   { Array } tags - array containing all the children tags
   */
  function unmountRedundant(items, tags, filteredItemsCount) {
    var i = tags.length;
    var j = items.length - filteredItemsCount;

    while (i > j) {
      i--;
      remove.apply(tags[i], [tags, i]);
    }
  }


  /**
   * Remove a child tag
   * @this Tag
   * @param   { Array } tags - tags collection
   * @param   { Number } i - index of the tag to remove
   */
  function remove(tags, i) {
    tags.splice(i, 1);
    this.unmount();
    arrayishRemove(this.parent, this, this.__.tagName, true);
  }

  /**
   * Move the nested custom tags in non custom loop tags
   * @this Tag
   * @param   { Number } i - current position of the loop tag
   */
  function moveNestedTags(i) {
    var this$1 = this;

    each(Object.keys(this.tags), function (tagName) {
      moveChild.apply(this$1.tags[tagName], [tagName, i]);
    });
  }

  /**
   * Move a child tag
   * @this Tag
   * @param   { HTMLElement } root - dom node containing all the loop children
   * @param   { Tag } nextTag - instance of the next tag preceding the one we want to move
   * @param   { Boolean } isVirtual - is it a virtual tag?
   */
  function move(root, nextTag, isVirtual) {
    if (isVirtual)
      { moveVirtual.apply(this, [root, nextTag]); }
    else
      { safeInsert(root, this.root, nextTag.root); }
  }

  /**
   * Insert and mount a child tag
   * @this Tag
   * @param   { HTMLElement } root - dom node containing all the loop children
   * @param   { Tag } nextTag - instance of the next tag preceding the one we want to insert
   * @param   { Boolean } isVirtual - is it a virtual tag?
   */
  function insert(root, nextTag, isVirtual) {
    if (isVirtual)
      { makeVirtual.apply(this, [root, nextTag]); }
    else
      { safeInsert(root, this.root, nextTag.root); }
  }

  /**
   * Append a new tag into the DOM
   * @this Tag
   * @param   { HTMLElement } root - dom node containing all the loop children
   * @param   { Boolean } isVirtual - is it a virtual tag?
   */
  function append(root, isVirtual) {
    if (isVirtual)
      { makeVirtual.call(this, root); }
    else
      { root.appendChild(this.root); }
  }

  /**
   * Return the value we want to use to lookup the postion of our items in the collection
   * @param   { String }  keyAttr         - lookup string or expression
   * @param   { * }       originalItem    - original item from the collection
   * @param   { Object }  keyedItem       - object created by riot via { item, i in collection }
   * @param   { Boolean } hasKeyAttrExpr  - flag to check whether the key is an expression
   * @returns { * } value that we will use to figure out the item position via collection.indexOf
   */
  function getItemId(keyAttr, originalItem, keyedItem, hasKeyAttrExpr) {
    if (keyAttr) {
      return hasKeyAttrExpr ?  tmpl(keyAttr, keyedItem) :  originalItem[keyAttr]
    }

    return originalItem
  }

  /**
   * Manage tags having the 'each'
   * @param   { HTMLElement } dom - DOM node we need to loop
   * @param   { Tag } parent - parent tag instance where the dom node is contained
   * @param   { String } expr - string contained in the 'each' attribute
   * @returns { Object } expression object for this each loop
   */
  function _each(dom, parent, expr) {
    var mustReorder = typeof getAttribute(dom, LOOP_NO_REORDER_DIRECTIVE) !== T_STRING || removeAttribute(dom, LOOP_NO_REORDER_DIRECTIVE);
    var keyAttr = getAttribute(dom, KEY_DIRECTIVE);
    var hasKeyAttrExpr = keyAttr ? tmpl.hasExpr(keyAttr) : false;
    var tagName = getName(dom);
    var impl = __TAG_IMPL[tagName];
    var parentNode = dom.parentNode;
    var placeholder = createDOMPlaceholder();
    var child = get(dom);
    var ifExpr = getAttribute(dom, CONDITIONAL_DIRECTIVE);
    var tags = [];
    var isLoop = true;
    var innerHTML = dom.innerHTML;
    var isAnonymous = !__TAG_IMPL[tagName];
    var isVirtual = dom.tagName === 'VIRTUAL';
    var oldItems = [];

    // remove the each property from the original tag
    removeAttribute(dom, LOOP_DIRECTIVE);
    removeAttribute(dom, KEY_DIRECTIVE);

    // parse the each expression
    expr = tmpl.loopKeys(expr);
    expr.isLoop = true;

    if (ifExpr) { removeAttribute(dom, CONDITIONAL_DIRECTIVE); }

    // insert a marked where the loop tags will be injected
    parentNode.insertBefore(placeholder, dom);
    parentNode.removeChild(dom);

    expr.update = function updateEach() {
      // get the new items collection
      expr.value = tmpl(expr.val, parent);

      var items = expr.value;
      var frag = createFragment();
      var isObject = !isArray(items) && !isString(items);
      var root = placeholder.parentNode;
      var tmpItems = [];
      var hasKeys = isObject && !!items;

      // if this DOM was removed the update here is useless
      // this condition fixes also a weird async issue on IE in our unit test
      if (!root) { return }

      // object loop. any changes cause full redraw
      if (isObject) {
        items = items ? Object.keys(items).map(function (key) { return mkitem(expr, items[key], key); }) : [];
      }

      // store the amount of filtered items
      var filteredItemsCount = 0;

      // loop all the new items
      each(items, function (_item, index) {
        var i = index - filteredItemsCount;
        var item = !hasKeys && expr.key ? mkitem(expr, _item, index) : _item;

        // skip this item because it must be filtered
        if (ifExpr && !tmpl(ifExpr, extend(create(parent), item))) {
          filteredItemsCount ++;
          return
        }

        var itemId = getItemId(keyAttr, _item, item, hasKeyAttrExpr);
        // reorder only if the items are not objects
        // or a key attribute has been provided
        var doReorder = !isObject && mustReorder && typeof _item === T_OBJECT || keyAttr;
        var oldPos = oldItems.indexOf(itemId);
        var isNew = oldPos === -1;
        var pos = !isNew && doReorder ? oldPos : i;
        // does a tag exist in this position?
        var tag = tags[pos];
        var mustAppend = i >= oldItems.length;
        var mustCreate = doReorder && isNew || !doReorder && !tag || !tags[i];

        // new tag
        if (mustCreate) {
          tag = createTag(impl, {
            parent: parent,
            isLoop: isLoop,
            isAnonymous: isAnonymous,
            tagName: tagName,
            root: dom.cloneNode(isAnonymous),
            item: item,
            index: i,
          }, innerHTML);

          // mount the tag
          tag.mount();

          if (mustAppend)
            { append.apply(tag, [frag || root, isVirtual]); }
          else
            { insert.apply(tag, [root, tags[i], isVirtual]); }

          if (!mustAppend) { oldItems.splice(i, 0, item); }
          tags.splice(i, 0, tag);
          if (child) { arrayishAdd(parent.tags, tagName, tag, true); }
        } else if (pos !== i && doReorder) {
          // move
          if (keyAttr || contains(items, oldItems[pos])) {
            move.apply(tag, [root, tags[i], isVirtual]);
            // move the old tag instance
            tags.splice(i, 0, tags.splice(pos, 1)[0]);
            // move the old item
            oldItems.splice(i, 0, oldItems.splice(pos, 1)[0]);
          }

          // update the position attribute if it exists
          if (expr.pos) { tag[expr.pos] = i; }

          // if the loop tags are not custom
          // we need to move all their custom tags into the right position
          if (!child && tag.tags) { moveNestedTags.call(tag, i); }
        }

        // cache the original item to use it in the events bound to this node
        // and its children
        extend(tag.__, {
          item: item,
          index: i,
          parent: parent
        });

        tmpItems[i] = itemId;

        if (!mustCreate) { tag.update(item); }
      });

      // remove the redundant tags
      unmountRedundant(items, tags, filteredItemsCount);

      // clone the items array
      oldItems = tmpItems.slice();

      root.insertBefore(frag, placeholder);
    };

    expr.unmount = function () {
      each(tags, function (t) { t.unmount(); });
    };

    return expr
  }

  var RefExpr = {
    init: function init(dom, parent, attrName, attrValue) {
      this.dom = dom;
      this.attr = attrName;
      this.rawValue = attrValue;
      this.parent = parent;
      this.hasExp = tmpl.hasExpr(attrValue);
      return this
    },
    update: function update() {
      var old = this.value;
      var customParent = this.parent && getImmediateCustomParent(this.parent);
      // if the referenced element is a custom tag, then we set the tag itself, rather than DOM
      var tagOrDom = this.dom.__ref || this.tag || this.dom;

      this.value = this.hasExp ? tmpl(this.rawValue, this.parent) : this.rawValue;

      // the name changed, so we need to remove it from the old key (if present)
      if (!isBlank(old) && customParent) { arrayishRemove(customParent.refs, old, tagOrDom); }
      if (!isBlank(this.value) && isString(this.value)) {
        // add it to the refs of parent tag (this behavior was changed >=3.0)
        if (customParent) { arrayishAdd(
          customParent.refs,
          this.value,
          tagOrDom,
          // use an array if it's a looped node and the ref is not an expression
          null,
          this.parent.__.index
        ); }

        if (this.value !== old) {
          setAttribute(this.dom, this.attr, this.value);
        }
      } else {
        removeAttribute(this.dom, this.attr);
      }

      // cache the ref bound to this dom node
      // to reuse it in future (see also #2329)
      if (!this.dom.__ref) { this.dom.__ref = tagOrDom; }
    },
    unmount: function unmount() {
      var tagOrDom = this.tag || this.dom;
      var customParent = this.parent && getImmediateCustomParent(this.parent);
      if (!isBlank(this.value) && customParent)
        { arrayishRemove(customParent.refs, this.value, tagOrDom); }
    }
  }

  /**
   * Create a new ref directive
   * @param   { HTMLElement } dom - dom node having the ref attribute
   * @param   { Tag } context - tag instance where the DOM node is located
   * @param   { String } attrName - either 'ref' or 'data-ref'
   * @param   { String } attrValue - value of the ref attribute
   * @returns { RefExpr } a new RefExpr object
   */
  function createRefDirective(dom, tag, attrName, attrValue) {
    return create(RefExpr).init(dom, tag, attrName, attrValue)
  }

  /**
   * Trigger the unmount method on all the expressions
   * @param   { Array } expressions - DOM expressions
   */
  function unmountAll(expressions) {
    each(expressions, function (expr) {
      if (expr.unmount) { expr.unmount(true); }
      else if (expr.tagName) { expr.tag.unmount(true); }
      else if (expr.unmount) { expr.unmount(); }
    });
  }

  var IfExpr = {
    init: function init(dom, tag, expr) {
      removeAttribute(dom, CONDITIONAL_DIRECTIVE);
      extend(this, { tag: tag, expr: expr, stub: createDOMPlaceholder(), pristine: dom });
      var p = dom.parentNode;
      p.insertBefore(this.stub, dom);
      p.removeChild(dom);

      return this
    },
    update: function update$$1() {
      this.value = tmpl(this.expr, this.tag);

      if (!this.stub.parentNode) { return }

      if (this.value && !this.current) { // insert
        this.current = this.pristine.cloneNode(true);
        this.stub.parentNode.insertBefore(this.current, this.stub);
        this.expressions = parseExpressions.apply(this.tag, [this.current, true]);
      } else if (!this.value && this.current) { // remove
        this.unmount();
        this.current = null;
        this.expressions = [];
      }

      if (this.value) { update.call(this.tag, this.expressions); }
    },
    unmount: function unmount() {
      if (this.current) {
        if (this.current._tag) {
          this.current._tag.unmount();
        } else if (this.current.parentNode) {
          this.current.parentNode.removeChild(this.current);
        }
      }

      unmountAll(this.expressions || []);
    }
  }

  /**
   * Create a new if directive
   * @param   { HTMLElement } dom - if root dom node
   * @param   { Tag } context - tag instance where the DOM node is located
   * @param   { String } attr - if expression
   * @returns { IFExpr } a new IfExpr object
   */
  function createIfDirective(dom, tag, attr) {
    return create(IfExpr).init(dom, tag, attr)
  }

  /**
   * Walk the tag DOM to detect the expressions to evaluate
   * @this Tag
   * @param   { HTMLElement } root - root tag where we will start digging the expressions
   * @param   { Boolean } mustIncludeRoot - flag to decide whether the root must be parsed as well
   * @returns { Array } all the expressions found
   */
  function parseExpressions(root, mustIncludeRoot) {
    var this$1 = this;

    var expressions = [];

    walkNodes(root, function (dom) {
      var type = dom.nodeType;
      var attr;
      var tagImpl;

      if (!mustIncludeRoot && dom === root) { return }

      // text node
      if (type === 3 && dom.parentNode.tagName !== 'STYLE' && tmpl.hasExpr(dom.nodeValue))
        { expressions.push({dom: dom, expr: dom.nodeValue}); }

      if (type !== 1) { return }

      var isVirtual = dom.tagName === 'VIRTUAL';

      // loop. each does it's own thing (for now)
      if (attr = getAttribute(dom, LOOP_DIRECTIVE)) {
        if(isVirtual) { setAttribute(dom, 'loopVirtual', true); } // ignore here, handled in _each
        expressions.push(_each(dom, this$1, attr));
        return false
      }

      // if-attrs become the new parent. Any following expressions (either on the current
      // element, or below it) become children of this expression.
      if (attr = getAttribute(dom, CONDITIONAL_DIRECTIVE)) {
        expressions.push(createIfDirective(dom, this$1, attr));
        return false
      }

      if (attr = getAttribute(dom, IS_DIRECTIVE)) {
        if (tmpl.hasExpr(attr)) {
          expressions.push({
            isRtag: true,
            expr: attr,
            dom: dom,
            attrs: [].slice.call(dom.attributes)
          });

          return false
        }
      }

      // if this is a tag, stop traversing here.
      // we ignore the root, since parseExpressions is called while we're mounting that root
      tagImpl = get(dom);

      if(isVirtual) {
        if(getAttribute(dom, 'virtualized')) {dom.parentElement.removeChild(dom); } // tag created, remove from dom
        if(!tagImpl && !getAttribute(dom, 'virtualized') && !getAttribute(dom, 'loopVirtual'))  // ok to create virtual tag
          { tagImpl = { tmpl: dom.outerHTML }; }
      }

      if (tagImpl && (dom !== root || mustIncludeRoot)) {
        var hasIsDirective = getAttribute(dom, IS_DIRECTIVE);
        if(isVirtual && !hasIsDirective) { // handled in update
          // can not remove attribute like directives
          // so flag for removal after creation to prevent maximum stack error
          setAttribute(dom, 'virtualized', true);
          var tag = createTag(
            {tmpl: dom.outerHTML},
            {root: dom, parent: this$1},
            dom.innerHTML
          );

          expressions.push(tag); // no return, anonymous tag, keep parsing
        } else {
          if (hasIsDirective && isVirtual)
            { warn(("Virtual tags shouldn't be used together with the \"" + IS_DIRECTIVE + "\" attribute - https://github.com/riot/riot/issues/2511")); }

          expressions.push(
            initChild(
              tagImpl,
              {
                root: dom,
                parent: this$1
              },
              dom.innerHTML,
              this$1
            )
          );
          return false
        }
      }

      // attribute expressions
      parseAttributes.apply(this$1, [dom, dom.attributes, function (attr, expr) {
        if (!expr) { return }
        expressions.push(expr);
      }]);
    });

    return expressions
  }

  /**
   * Calls `fn` for every attribute on an element. If that attr has an expression,
   * it is also passed to fn.
   * @this Tag
   * @param   { HTMLElement } dom - dom node to parse
   * @param   { Array } attrs - array of attributes
   * @param   { Function } fn - callback to exec on any iteration
   */
  function parseAttributes(dom, attrs, fn) {
    var this$1 = this;

    each(attrs, function (attr) {
      if (!attr) { return false }

      var name = attr.name;
      var bool = isBoolAttr(name);
      var expr;

      if (contains(REF_DIRECTIVES, name) && dom.tagName.toLowerCase() !== YIELD_TAG) {
        expr =  createRefDirective(dom, this$1, name, attr.value);
      } else if (tmpl.hasExpr(attr.value)) {
        expr = {dom: dom, expr: attr.value, attr: name, bool: bool};
      }

      fn(attr, expr);
    });
  }

  /**
   * Manage the mount state of a tag triggering also the observable events
   * @this Tag
   * @param { Boolean } value - ..of the isMounted flag
   */
  function setMountState(value) {
    var ref = this.__;
    var isAnonymous = ref.isAnonymous;

    define(this, 'isMounted', value);

    if (!isAnonymous) {
      if (value) { this.trigger('mount'); }
      else {
        this.trigger('unmount');
        this.off('*');
        this.__.wasCreated = false;
      }
    }
  }

  /**
   * Mount the current tag instance
   * @returns { Tag } the current tag instance
   */
  function componentMount(tag$$1, dom, expressions, opts) {
    var __ = tag$$1.__;
    var root = __.root;
    root._tag = tag$$1; // keep a reference to the tag just created

    // Read all the attrs on this instance. This give us the info we need for updateOpts
    parseAttributes.apply(__.parent, [root, root.attributes, function (attr, expr) {
      if (!__.isAnonymous && RefExpr.isPrototypeOf(expr)) { expr.tag = tag$$1; }
      attr.expr = expr;
      __.instAttrs.push(attr);
    }]);

    // update the root adding custom attributes coming from the compiler
    walkAttributes(__.impl.attrs, function (k, v) { __.implAttrs.push({name: k, value: v}); });
    parseAttributes.apply(tag$$1, [root, __.implAttrs, function (attr, expr) {
      if (expr) { expressions.push(expr); }
      else { setAttribute(root, attr.name, attr.value); }
    }]);

    // initialiation
    updateOpts.apply(tag$$1, [__.isLoop, __.parent, __.isAnonymous, opts, __.instAttrs]);

    // add global mixins
    var globalMixin = mixin(GLOBAL_MIXIN);

    if (globalMixin && !__.skipAnonymous) {
      for (var i in globalMixin) {
        if (globalMixin.hasOwnProperty(i)) {
          tag$$1.mixin(globalMixin[i]);
        }
      }
    }

    if (__.impl.fn) { __.impl.fn.call(tag$$1, opts); }

    if (!__.skipAnonymous) { tag$$1.trigger('before-mount'); }

    // parse layout after init. fn may calculate args for nested custom tags
    each(parseExpressions.apply(tag$$1, [dom, __.isAnonymous]), function (e) { return expressions.push(e); });

    tag$$1.update(__.item);

    if (!__.isAnonymous && !__.isInline) {
      while (dom.firstChild) { root.appendChild(dom.firstChild); }
    }

    define(tag$$1, 'root', root);

    // if we need to wait that the parent "mount" or "updated" event gets triggered
    if (!__.skipAnonymous && tag$$1.parent) {
      var p = getImmediateCustomParent(tag$$1.parent);
      p.one(!p.isMounted ? 'mount' : 'updated', function () {
        setMountState.call(tag$$1, true);
      });
    } else {
      // otherwise it's not a child tag we can trigger its mount event
      setMountState.call(tag$$1, true);
    }

    tag$$1.__.wasCreated = true;

    return tag$$1
  }

  /**
   * Unmount the tag instance
   * @param { Boolean } mustKeepRoot - if it's true the root node will not be removed
   * @returns { Tag } the current tag instance
   */
  function tagUnmount(tag, mustKeepRoot, expressions) {
    var __ = tag.__;
    var root = __.root;
    var tagIndex = __TAGS_CACHE.indexOf(tag);
    var p = root.parentNode;

    if (!__.skipAnonymous) { tag.trigger('before-unmount'); }

    // clear all attributes coming from the mounted tag
    walkAttributes(__.impl.attrs, function (name) {
      if (startsWith(name, ATTRS_PREFIX))
        { name = name.slice(ATTRS_PREFIX.length); }

      removeAttribute(root, name);
    });

    // remove all the event listeners
    tag.__.listeners.forEach(function (dom) {
      Object.keys(dom[RIOT_EVENTS_KEY]).forEach(function (eventName) {
        dom.removeEventListener(eventName, dom[RIOT_EVENTS_KEY][eventName]);
      });
    });

    // remove tag instance from the global tags cache collection
    if (tagIndex !== -1) { __TAGS_CACHE.splice(tagIndex, 1); }

    // clean up the parent tags object
    if (__.parent && !__.isAnonymous) {
      var ptag = getImmediateCustomParent(__.parent);

      if (__.isVirtual) {
        Object
          .keys(tag.tags)
          .forEach(function (tagName) { return arrayishRemove(ptag.tags, tagName, tag.tags[tagName]); });
      } else {
        arrayishRemove(ptag.tags, __.tagName, tag);
      }
    }

    // unmount all the virtual directives
    if (tag.__.virts) {
      each(tag.__.virts, function (v) {
        if (v.parentNode) { v.parentNode.removeChild(v); }
      });
    }

    // allow expressions to unmount themselves
    unmountAll(expressions);
    each(__.instAttrs, function (a) { return a.expr && a.expr.unmount && a.expr.unmount(); });

    // clear the tag html if it's necessary
    if (mustKeepRoot) { setInnerHTML(root, ''); }
    // otherwise detach the root tag from the DOM
    else if (p) { p.removeChild(root); }

    // custom internal unmount function to avoid relying on the observable
    if (__.onUnmount) { __.onUnmount(); }

    // weird fix for a weird edge case #2409 and #2436
    // some users might use your software not as you've expected
    // so I need to add these dirty hacks to mitigate unexpected issues
    if (!tag.isMounted) { setMountState.call(tag, true); }

    setMountState.call(tag, false);

    delete root._tag;

    return tag
  }

  /**
   * Tag creation factory function
   * @constructor
   * @param { Object } impl - it contains the tag template, and logic
   * @param { Object } conf - tag options
   * @param { String } innerHTML - html that eventually we need to inject in the tag
   */
  function createTag(impl, conf, innerHTML) {
    if ( impl === void 0 ) impl = {};
    if ( conf === void 0 ) conf = {};

    var tag = conf.context || {};
    var opts = conf.opts || {};
    var parent = conf.parent;
    var isLoop = conf.isLoop;
    var isAnonymous = !!conf.isAnonymous;
    var skipAnonymous = settings.skipAnonymousTags && isAnonymous;
    var item = conf.item;
    // available only for the looped nodes
    var index = conf.index;
    // All attributes on the Tag when it's first parsed
    var instAttrs = [];
    // expressions on this type of Tag
    var implAttrs = [];
    var tmpl = impl.tmpl;
    var expressions = [];
    var root = conf.root;
    var tagName = conf.tagName || getName(root);
    var isVirtual = tagName === 'virtual';
    var isInline = !isVirtual && !tmpl;
    var dom;

    if (isInline || isLoop && isAnonymous) {
      dom = root;
    } else {
      if (!isVirtual) { root.innerHTML = ''; }
      dom = mkdom(tmpl, innerHTML, isSvg(root));
    }

    // make this tag observable
    if (!skipAnonymous) { observable(tag); }

    // only call unmount if we have a valid __TAG_IMPL (has name property)
    if (impl.name && root._tag) { root._tag.unmount(true); }

    define(tag, '__', {
      impl: impl,
      root: root,
      skipAnonymous: skipAnonymous,
      implAttrs: implAttrs,
      isAnonymous: isAnonymous,
      instAttrs: instAttrs,
      innerHTML: innerHTML,
      tagName: tagName,
      index: index,
      isLoop: isLoop,
      isInline: isInline,
      item: item,
      parent: parent,
      // tags having event listeners
      // it would be better to use weak maps here but we can not introduce breaking changes now
      listeners: [],
      // these vars will be needed only for the virtual tags
      virts: [],
      wasCreated: false,
      tail: null,
      head: null
    });

    // tag protected properties
    return [
      ['isMounted', false],
      // create a unique id to this tag
      // it could be handy to use it also to improve the virtual dom rendering speed
      ['_riot_id', uid()],
      ['root', root],
      ['opts', opts, { writable: true, enumerable: true }],
      ['parent', parent || null],
      // protect the "tags" and "refs" property from being overridden
      ['tags', {}],
      ['refs', {}],
      ['update', function (data) { return componentUpdate(tag, data, expressions); }],
      ['mixin', function () {
        var mixins = [], len = arguments.length;
        while ( len-- ) mixins[ len ] = arguments[ len ];

        return componentMixin.apply(void 0, [ tag ].concat( mixins ));
    }],
      ['mount', function () { return componentMount(tag, dom, expressions, opts); }],
      ['unmount', function (mustKeepRoot) { return tagUnmount(tag, mustKeepRoot, expressions); }]
    ].reduce(function (acc, ref) {
      var key = ref[0];
      var value = ref[1];
      var opts = ref[2];

      define(tag, key, value, opts);
      return acc
    }, extend(tag, item))
  }

  /**
   * Mount a tag creating new Tag instance
   * @param   { Object } root - dom node where the tag will be mounted
   * @param   { String } tagName - name of the riot tag we want to mount
   * @param   { Object } opts - options to pass to the Tag instance
   * @param   { Object } ctx - optional context that will be used to extend an existing class ( used in riot.Tag )
   * @returns { Tag } a new Tag instance
   */
  function mount$1(root, tagName, opts, ctx) {
    var impl = __TAG_IMPL[tagName];
    var implClass = __TAG_IMPL[tagName].class;
    var context = ctx || (implClass ? create(implClass.prototype) : {});
    // cache the inner HTML to fix #855
    var innerHTML = root._innerHTML = root._innerHTML || root.innerHTML;
    var conf = extend({ root: root, opts: opts, context: context }, { parent: opts ? opts.parent : null });
    var tag;

    if (impl && root) { tag = createTag(impl, conf, innerHTML); }

    if (tag && tag.mount) {
      tag.mount(true);
      // add this tag to the virtualDom variable
      if (!contains(__TAGS_CACHE, tag)) { __TAGS_CACHE.push(tag); }
    }

    return tag
  }



  var tags = /*#__PURE__*/Object.freeze({
    arrayishAdd: arrayishAdd,
    getTagName: getName,
    inheritParentProps: inheritParentProps,
    mountTo: mount$1,
    selectTags: query,
    arrayishRemove: arrayishRemove,
    getTag: get,
    initChildTag: initChild,
    moveChildTag: moveChild,
    makeReplaceVirtual: makeReplaceVirtual,
    getImmediateCustomParentTag: getImmediateCustomParent,
    makeVirtual: makeVirtual,
    moveVirtual: moveVirtual,
    unmountAll: unmountAll,
    createIfDirective: createIfDirective,
    createRefDirective: createRefDirective
  });

  /**
   * Riot public api
   */
  var settings$1 = settings;
  var util = {
    tmpl: tmpl,
    brackets: brackets,
    styleManager: styleManager,
    vdom: __TAGS_CACHE,
    styleNode: styleManager.styleNode,
    // export the riot internal utils as well
    dom: dom,
    check: check,
    misc: misc,
    tags: tags
  };

  // export the core props/methods
  var Tag$1 = Tag;
  var tag$1 = tag;
  var tag2$1 = tag2;
  var mount$2 = mount;
  var mixin$1 = mixin;
  var update$2 = update$1;
  var unregister$1 = unregister;
  var version$1 = version;
  var observable$1 = observable;

  var riot$1 = extend({}, core, {
    observable: observable,
    settings: settings$1,
    util: util,
  })

  exports.settings = settings$1;
  exports.util = util;
  exports.Tag = Tag$1;
  exports.tag = tag$1;
  exports.tag2 = tag2$1;
  exports.mount = mount$2;
  exports.mixin = mixin$1;
  exports.update = update$2;
  exports.unregister = unregister$1;
  exports.version = version$1;
  exports.observable = observable$1;
  exports.default = riot$1;

  Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
